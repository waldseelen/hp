class OfflineFormsManager{constructor(){this.isOnline=navigator.onLine,this.init()}init(){this.bindEvents(),this.checkOnlineStatus(),this.registerForNotifications()}bindEvents(){window.addEventListener("online",()=>this.handleOnline()),window.addEventListener("offline",()=>this.handleOffline()),document.addEventListener("submit",e=>this.handleFormSubmit(e)),"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",e=>{this.handleServiceWorkerMessage(e)})}handleOnline(){this.isOnline=!0,this.showConnectionStatus("online"),this.triggerBackgroundSync()}handleOffline(){this.isOnline=!1,this.showConnectionStatus("offline")}showConnectionStatus(e){const t=document.querySelector(".connection-status");t&&t.remove();const n=document.createElement("div");n.className=`connection-status connection-status--${e}`,"offline"===e?n.innerHTML='\n                <div class="connection-status__content">\n                    <svg width="16" height="16" fill="currentColor">\n                        <path d="M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zM7 11V9h2v2H7zm0-8v6h2V3H7z"/>\n                    </svg>\n                    <span>You\'re offline. Forms will be saved and submitted when connection is restored.</span>\n                </div>\n            ':(n.innerHTML='\n                <div class="connection-status__content">\n                    <svg width="16" height="16" fill="currentColor">\n                        <path d="M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zM6.5 12L2 7.5l1.4-1.4L6.5 9.2l4.1-4.1L12 6.5 6.5 12z"/>\n                    </svg>\n                    <span>Connection restored! Submitting queued forms...</span>\n                </div>\n            ',setTimeout(()=>{n.parentNode&&n.remove()},3e3)),document.body.appendChild(n)}async handleFormSubmit(e){const t=e.target;if(!t.classList.contains("offline-sync")&&!t.dataset.offlineSync)return;e.preventDefault();const n=new FormData(t),s=t.querySelector('[type="submit"]'),o=s.textContent;try{if(this.setFormState(t,"loading"),s.textContent="Submitting...",s.disabled=!0,"POST"===(t.method||"POST").toUpperCase()){const e=this.getCSRFToken();e&&!n.has("csrfmiddlewaretoken")&&n.append("csrfmiddlewaretoken",e)}const e=await fetch(t.action||window.location.href,{method:t.method||"POST",body:n,headers:{"X-Requested-With":"XMLHttpRequest","X-CSRFToken":this.getCSRFToken()}});if(!e.ok)throw new Error(`HTTP ${e.status}`);(await e.json()).offline?(this.showMessage("Form saved! It will be submitted when you're back online.","info"),this.setFormState(t,"queued")):(this.showMessage("Form submitted successfully!","success"),this.setFormState(t,"success"),t.reset())}catch(e){console.error("Form submission error:",e),this.isOnline?(this.showMessage("Submission failed. Please try again.","error"),this.setFormState(t,"error")):(this.showMessage("You're offline. Form will be submitted when connection is restored.","info"),this.setFormState(t,"queued"))}finally{s.textContent=o,s.disabled=!1}}setFormState(e,t){e.classList.remove("form-loading","form-success","form-error","form-queued"),e.classList.add(`form-${t}`)}showMessage(e,t="info"){document.querySelectorAll(".form-message").forEach(e=>e.remove());const n=document.createElement("div");n.className=`form-message form-message--${t}`,n.innerHTML=`\n            <div class="form-message__content">\n                <span>${e}</span>\n                <button class="form-message__close" onclick="this.parentElement.parentElement.remove()">\n                    <svg width="14" height="14" fill="currentColor">\n                        <path d="M14 1.41L12.59 0 7 5.59 1.41 0 0 1.41 5.59 7 0 12.59 1.41 14 7 8.41 12.59 14 14 12.59 8.41 7z"/>\n                    </svg>\n                </button>\n            </div>\n        `,document.body.appendChild(n),setTimeout(()=>{n.parentNode&&n.remove()},5e3)}checkOnlineStatus(){this.isOnline||this.showConnectionStatus("offline")}async triggerBackgroundSync(){if("serviceWorker"in navigator&&"sync"in window.ServiceWorkerRegistration.prototype)try{const e=await navigator.serviceWorker.ready;await e.sync.register("form-sync")}catch(e){console.error("Failed to register background sync:",e)}}async registerForNotifications(){if("serviceWorker"in navigator&&"Notification"in window){(await navigator.serviceWorker.ready).addEventListener("notificationclick",e=>{"form-success"===e.notification.data?.type&&e.notification.close()})}}handleServiceWorkerMessage(e){const{type:t,payload:n}=e.data||{};switch(t){case"form-sync-success":this.showMessage("Queued form submitted successfully!","success");break;case"form-sync-failed":this.showMessage("Failed to submit queued form. Will retry later.","warning")}}getCSRFToken(){return document.querySelector("[name=csrfmiddlewaretoken]")?.value||document.querySelector("[name=csrf-token]")?.getAttribute("content")||document.querySelector("meta[name=csrf-token]")?.getAttribute("content")||""}}document.addEventListener("DOMContentLoaded",()=>{new OfflineFormsManager}),document.addEventListener("DOMContentLoaded",()=>{document.querySelectorAll('form[action*="/contact/"]').forEach(e=>{e.classList.add("offline-sync")})});
//# sourceMappingURL=offline-forms.min.js.map