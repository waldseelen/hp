/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 146:
/***/ (() => {

eval("{// Enhanced Scroll Animations with Intersection Observer\n(function () {\n  'use strict';\n\n  // Configuration\n  const config = {\n    threshold: 0.1,\n    rootMargin: '0px 0px -10% 0px',\n    staggerDelay: 100,\n    animationDuration: 800\n  };\n\n  // Intersection Observer for scroll animations\n  function initScrollAnimations() {\n    // Check if Intersection Observer is supported\n    if (!window.IntersectionObserver) {\n      // Fallback: show all elements immediately\n      document.querySelectorAll('.scroll-reveal, .scroll-reveal-left, .scroll-reveal-right, .scroll-reveal-scale').forEach(el => {\n        el.style.opacity = '1';\n        el.style.transform = 'none';\n      });\n      return;\n    }\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach((entry, index) => {\n        if (entry.isIntersecting) {\n          const element = entry.target;\n\n          // Add stagger delay for multiple elements\n          const staggerIndex = parseInt(element.dataset.stagger) || 0;\n          const delay = staggerIndex * config.staggerDelay;\n          setTimeout(() => {\n            element.classList.add('visible');\n\n            // Add custom animation class if specified\n            const animationType = element.dataset.animation;\n            if (animationType) {\n              element.classList.add(animationType);\n            }\n\n            // Dispatch custom event\n            element.dispatchEvent(new CustomEvent('elementRevealed', {\n              detail: {\n                element,\n                delay\n              }\n            }));\n          }, delay);\n\n          // Stop observing this element\n          observer.unobserve(element);\n        }\n      });\n    }, {\n      threshold: config.threshold,\n      rootMargin: config.rootMargin\n    });\n\n    // Observe all scroll reveal elements\n    const scrollElements = document.querySelectorAll('.scroll-reveal, .scroll-reveal-left, .scroll-reveal-right, .scroll-reveal-scale');\n    scrollElements.forEach((element, index) => {\n      // Set initial state\n      element.style.opacity = '0';\n\n      // Add stagger index as data attribute\n      if (element.classList.contains('stagger-' + (index + 1))) {\n        element.dataset.stagger = index;\n      }\n      observer.observe(element);\n    });\n  }\n\n  // Enhanced hover effects for cards\n  function initEnhancedHoverEffects() {\n    const cards = document.querySelectorAll('.card-interactive, .hover-glow');\n    cards.forEach(card => {\n      // Mouse enter effect\n      card.addEventListener('mouseenter', function (e) {\n        this.style.setProperty('--mouse-x', e.clientX - this.offsetLeft + 'px');\n        this.style.setProperty('--mouse-y', e.clientY - this.offsetTop + 'px');\n\n        // Add ripple effect\n        createRippleEffect(this, e);\n      });\n\n      // Mouse move effect for gradient following\n      card.addEventListener('mousemove', function (e) {\n        const rect = this.getBoundingClientRect();\n        const x = (e.clientX - rect.left) / rect.width * 100;\n        const y = (e.clientY - rect.top) / rect.height * 100;\n        this.style.setProperty('--mouse-x-percent', x + '%');\n        this.style.setProperty('--mouse-y-percent', y + '%');\n      });\n    });\n  }\n\n  // Create ripple effect\n  function createRippleEffect(element, event) {\n    const ripple = document.createElement('div');\n    const rect = element.getBoundingClientRect();\n    const size = Math.max(rect.width, rect.height);\n    const x = event.clientX - rect.left - size / 2;\n    const y = event.clientY - rect.top - size / 2;\n    ripple.style.cssText = `\n            position: absolute;\n            width: ${size}px;\n            height: ${size}px;\n            border-radius: 50%;\n            background: radial-gradient(circle, rgba(59, 130, 246, 0.3) 0%, transparent 70%);\n            left: ${x}px;\n            top: ${y}px;\n            transform: scale(0);\n            animation: ripple 0.6s linear forwards;\n            pointer-events: none;\n            z-index: 0;\n        `;\n\n    // Add ripple animation keyframes if not exists\n    if (!document.querySelector('#ripple-styles')) {\n      const style = document.createElement('style');\n      style.id = 'ripple-styles';\n      style.textContent = `\n                @keyframes ripple {\n                    to {\n                        transform: scale(2);\n                        opacity: 0;\n                    }\n                }\n            `;\n      document.head.appendChild(style);\n    }\n    element.style.position = 'relative';\n    element.style.overflow = 'hidden';\n    element.appendChild(ripple);\n\n    // Remove ripple after animation\n    setTimeout(() => {\n      if (ripple.parentNode) {\n        ripple.parentNode.removeChild(ripple);\n      }\n    }, 600);\n  }\n\n  // Smooth scroll for anchor links\n  function initSmoothScroll() {\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n      anchor.addEventListener('click', function (e) {\n        const targetId = this.getAttribute('href').substring(1);\n        const targetElement = document.getElementById(targetId);\n        if (targetElement) {\n          e.preventDefault();\n          targetElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n          });\n\n          // Update URL without scrolling\n          history.pushState(null, null, '#' + targetId);\n        }\n      });\n    });\n  }\n\n  // Parallax scroll effect for background elements\n  function initParallaxEffect() {\n    const parallaxElements = document.querySelectorAll('.scroll-parallax');\n    if (parallaxElements.length === 0) return;\n    let ticking = false;\n    function updateParallax() {\n      const scrollY = window.pageYOffset;\n      parallaxElements.forEach(element => {\n        const speed = parseFloat(element.dataset.speed) || 0.5;\n        const yPos = -(scrollY * speed);\n        element.style.transform = `translateY(${yPos}px)`;\n      });\n      ticking = false;\n    }\n    function requestTick() {\n      if (!ticking) {\n        requestAnimationFrame(updateParallax);\n        ticking = true;\n      }\n    }\n\n    // Throttled scroll listener\n    window.addEventListener('scroll', requestTick, {\n      passive: true\n    });\n  }\n\n  // Loading state animations\n  function initLoadingAnimations() {\n    // Simulate loading for skeleton elements\n    const skeletonElements = document.querySelectorAll('.skeleton, .skeleton-dark');\n    skeletonElements.forEach((element, index) => {\n      setTimeout(() => {\n        element.classList.add('loaded');\n        element.style.animation = 'none';\n      }, 1000 + index * 200);\n    });\n  }\n\n  // Performance optimization: Use ResizeObserver for responsive animations\n  function initResponsiveAnimations() {\n    if (!window.ResizeObserver) return;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        const element = entry.target;\n        const {\n          width\n        } = entry.contentRect;\n\n        // Adjust animation timing based on screen size\n        if (width < 768) {\n          element.style.setProperty('--animation-duration', '0.4s');\n        } else {\n          element.style.setProperty('--animation-duration', '0.6s');\n        }\n      });\n    });\n\n    // Observe the body element\n    resizeObserver.observe(document.body);\n  }\n\n  // Initialize all enhancements\n  function init() {\n    // Wait for DOM to be ready\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', init);\n      return;\n    }\n    try {\n      initScrollAnimations();\n      initEnhancedHoverEffects();\n      initSmoothScroll();\n      initParallaxEffect();\n      initLoadingAnimations();\n      initResponsiveAnimations();\n\n      // Dispatch initialization complete event\n      document.dispatchEvent(new CustomEvent('scrollAnimationsReady'));\n      console.log('âœ¨ Enhanced scroll animations initialized');\n    } catch (error) {\n      console.warn('Error initializing scroll animations:', error);\n    }\n  }\n\n  // Reduced motion support\n  function respectsReducedMotion() {\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  }\n  if (respectsReducedMotion()) {\n    // Disable animations for users who prefer reduced motion\n    document.documentElement.style.setProperty('--animation-duration', '0s');\n    document.documentElement.style.setProperty('--transition-duration', '0s');\n  }\n\n  // Initialize\n  init();\n\n  // Export functions for external use\n  window.ScrollAnimations = {\n    init,\n    initScrollAnimations,\n    initEnhancedHoverEffects,\n    createRippleEffect\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///146\n\n}");

/***/ }),

/***/ 279:
/***/ ((module) => {

eval("{/**\r\n * Custom Cursor Effects Controller\r\n * Provides enhanced cursor interactions and visual feedback\r\n */\n\nclass CustomCursorController {\n  constructor() {\n    this.cursor = null;\n    this.trails = [];\n    this.particles = [];\n    this.isTouch = false;\n    this.currentState = 'default';\n    this.lastPosition = {\n      x: 0,\n      y: 0\n    };\n    this.isMoving = false;\n    this.moveTimeout = null;\n    this.init();\n  }\n  init() {\n    // Check if device supports hover (not a touch device)\n    this.isTouch = !window.matchMedia('(hover: hover) and (pointer: fine)').matches;\n    if (this.isTouch) {\n      console.log('ðŸ‘† Touch device detected - custom cursor disabled');\n      return;\n    }\n\n    // Check for reduced motion preference\n    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n      console.log('âš¡ Reduced motion preference detected - simplified cursor');\n      this.createSimpleCursor();\n      return;\n    }\n    this.createCursor();\n    this.createTrails();\n    this.bindEvents();\n    console.log('âœ¨ Custom cursor controller initialized');\n  }\n  createCursor() {\n    this.cursor = document.createElement('div');\n    this.cursor.className = 'custom-cursor';\n    this.cursor.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(this.cursor);\n  }\n  createSimpleCursor() {\n    // Create a simpler cursor for reduced motion\n    this.cursor = document.createElement('div');\n    this.cursor.className = 'custom-cursor';\n    this.cursor.style.transition = 'none';\n    this.cursor.style.animation = 'none';\n    this.cursor.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(this.cursor);\n    this.bindBasicEvents();\n  }\n  createTrails() {\n    const trailCount = 3;\n    for (let i = 0; i < trailCount; i++) {\n      const trail = document.createElement('div');\n      trail.className = 'custom-cursor-trail';\n      trail.style.transitionDelay = `${i * 0.1}s`;\n      trail.setAttribute('aria-hidden', 'true');\n      document.body.appendChild(trail);\n      this.trails.push(trail);\n    }\n  }\n  bindEvents() {\n    // Mouse movement\n    document.addEventListener('mousemove', this.handleMouseMove.bind(this), {\n      passive: true\n    });\n\n    // Mouse events\n    document.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    document.addEventListener('mouseup', this.handleMouseUp.bind(this));\n\n    // Hover events for interactive elements\n    this.bindInteractiveElements();\n\n    // Text selection events\n    document.addEventListener('selectstart', this.handleTextSelect.bind(this));\n    document.addEventListener('selectionchange', this.handleSelectionChange.bind(this));\n\n    // Window events\n    document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n    window.addEventListener('blur', this.handleWindowBlur.bind(this));\n    window.addEventListener('focus', this.handleWindowFocus.bind(this));\n  }\n  bindBasicEvents() {\n    // Simplified events for reduced motion\n    document.addEventListener('mousemove', this.handleBasicMouseMove.bind(this), {\n      passive: true\n    });\n    document.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    document.addEventListener('mouseup', this.handleMouseUp.bind(this));\n  }\n  bindInteractiveElements() {\n    const interactiveSelectors = ['a', 'button', 'input', 'textarea', 'select', '[role=\"button\"]', '[tabindex]', '.clickable', '.btn-primary', '.btn-secondary', '.btn-tertiary', '.nav-link-modern', '.card-interactive'].join(', ');\n    const elements = document.querySelectorAll(interactiveSelectors);\n    elements.forEach(element => {\n      element.addEventListener('mouseenter', this.handleElementHover.bind(this));\n      element.addEventListener('mouseleave', this.handleElementLeave.bind(this));\n    });\n\n    // Text inputs\n    const textInputs = document.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input[type=\"password\"], textarea');\n    textInputs.forEach(input => {\n      input.addEventListener('focus', this.handleTextFocus.bind(this));\n      input.addEventListener('blur', this.handleTextBlur.bind(this));\n    });\n\n    // Disabled elements\n    const disabledElements = document.querySelectorAll('[disabled], .disabled');\n    disabledElements.forEach(element => {\n      element.addEventListener('mouseenter', this.handleDisabledHover.bind(this));\n      element.addEventListener('mouseleave', this.handleElementLeave.bind(this));\n    });\n  }\n  handleMouseMove(e) {\n    const x = e.clientX;\n    const y = e.clientY;\n    this.updateCursorPosition(x, y);\n    this.updateTrails(x, y);\n\n    // Create particles on movement\n    if (this.isMoving && Math.random() > 0.8) {\n      this.createParticle(x, y);\n    }\n\n    // Track movement state\n    this.isMoving = true;\n    clearTimeout(this.moveTimeout);\n    this.moveTimeout = setTimeout(() => {\n      this.isMoving = false;\n    }, 100);\n    this.lastPosition = {\n      x,\n      y\n    };\n  }\n  handleBasicMouseMove(e) {\n    if (this.cursor) {\n      this.cursor.style.left = e.clientX + 'px';\n      this.cursor.style.top = e.clientY + 'px';\n    }\n  }\n  updateCursorPosition(x, y) {\n    if (this.cursor) {\n      requestAnimationFrame(() => {\n        this.cursor.style.left = x + 'px';\n        this.cursor.style.top = y + 'px';\n      });\n    }\n  }\n  updateTrails(x, y) {\n    this.trails.forEach((trail, index) => {\n      requestAnimationFrame(() => {\n        trail.style.left = x + 'px';\n        trail.style.top = y + 'px';\n        trail.style.opacity = this.isMoving ? '1' : '0';\n      });\n    });\n  }\n  handleMouseDown(e) {\n    if (this.cursor) {\n      this.cursor.classList.add('click');\n      this.createRippleEffect(e.clientX, e.clientY);\n\n      // Haptic feedback if supported\n      if (navigator.vibrate) {\n        navigator.vibrate(50);\n      }\n    }\n  }\n  handleMouseUp() {\n    if (this.cursor) {\n      setTimeout(() => {\n        this.cursor.classList.remove('click');\n      }, 300);\n    }\n  }\n  handleElementHover(e) {\n    if (this.cursor) {\n      this.currentState = 'hover';\n      this.cursor.classList.add('hover');\n      this.cursor.classList.remove('text', 'disabled');\n\n      // Add special effects for different element types\n      if (e.target.matches('a, .btn-primary, .btn-secondary')) {\n        this.createHoverEffect(e.clientX, e.clientY);\n      }\n    }\n  }\n  handleElementLeave() {\n    if (this.cursor) {\n      this.currentState = 'default';\n      this.cursor.classList.remove('hover', 'text', 'disabled');\n    }\n  }\n  handleTextFocus() {\n    if (this.cursor) {\n      this.currentState = 'text';\n      this.cursor.classList.add('text');\n      this.cursor.classList.remove('hover', 'disabled');\n    }\n  }\n  handleTextBlur() {\n    if (this.cursor) {\n      this.currentState = 'default';\n      this.cursor.classList.remove('text');\n    }\n  }\n  handleDisabledHover() {\n    if (this.cursor) {\n      this.currentState = 'disabled';\n      this.cursor.classList.add('disabled');\n      this.cursor.classList.remove('hover', 'text');\n    }\n  }\n  handleTextSelect() {\n    if (this.cursor && this.currentState !== 'text') {\n      this.cursor.classList.add('text');\n    }\n  }\n  handleSelectionChange() {\n    if (this.cursor && window.getSelection().toString() === '') {\n      this.cursor.classList.remove('text');\n    }\n  }\n  handleVisibilityChange() {\n    if (this.cursor) {\n      if (document.hidden) {\n        this.cursor.style.opacity = '0';\n        this.trails.forEach(trail => trail.style.opacity = '0');\n      } else {\n        this.cursor.style.opacity = '1';\n      }\n    }\n  }\n  handleWindowBlur() {\n    if (this.cursor) {\n      this.cursor.style.opacity = '0.3';\n    }\n  }\n  handleWindowFocus() {\n    if (this.cursor) {\n      this.cursor.style.opacity = '1';\n    }\n  }\n  createParticle(x, y) {\n    const particle = document.createElement('div');\n    particle.className = 'cursor-particle';\n    particle.style.left = x + 'px';\n    particle.style.top = y + 'px';\n    particle.setAttribute('aria-hidden', 'true');\n\n    // Random offset\n    const offsetX = (Math.random() - 0.5) * 20;\n    const offsetY = (Math.random() - 0.5) * 20;\n    particle.style.transform = `translate(${offsetX}px, ${offsetY}px)`;\n    document.body.appendChild(particle);\n\n    // Remove particle after animation\n    setTimeout(() => {\n      if (particle.parentNode) {\n        particle.parentNode.removeChild(particle);\n      }\n    }, 1000);\n  }\n  createRippleEffect(x, y) {\n    const ripple = document.createElement('div');\n    ripple.style.cssText = `\n            position: fixed;\n            left: ${x}px;\n            top: ${y}px;\n            width: 20px;\n            height: 20px;\n            background: rgba(255, 215, 0, 0.3);\n            border: 2px solid rgba(255, 215, 0, 0.6);\n            border-radius: 50%;\n            pointer-events: none;\n            z-index: 9996;\n            transform: translate(-50%, -50%) scale(0);\n            animation: cursor-ripple 0.6s ease-out forwards;\n        `;\n    ripple.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(ripple);\n    setTimeout(() => {\n      if (ripple.parentNode) {\n        ripple.parentNode.removeChild(ripple);\n      }\n    }, 600);\n  }\n  createHoverEffect(x, y) {\n    // Create subtle glow effect on hover\n    const glow = document.createElement('div');\n    glow.style.cssText = `\n            position: fixed;\n            left: ${x}px;\n            top: ${y}px;\n            width: 60px;\n            height: 60px;\n            background: radial-gradient(circle, rgba(255, 215, 0, 0.1) 0%, transparent 70%);\n            border-radius: 50%;\n            pointer-events: none;\n            z-index: 9995;\n            transform: translate(-50%, -50%);\n            animation: cursor-glow 0.8s ease-out forwards;\n        `;\n    glow.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(glow);\n    setTimeout(() => {\n      if (glow.parentNode) {\n        glow.parentNode.removeChild(glow);\n      }\n    }, 800);\n  }\n\n  // Public method to update interactive elements (for dynamic content)\n  refreshInteractiveElements() {\n    if (!this.isTouch) {\n      this.bindInteractiveElements();\n    }\n  }\n\n  // Public method to temporarily disable cursor\n  disable() {\n    if (this.cursor) {\n      this.cursor.style.display = 'none';\n      this.trails.forEach(trail => trail.style.display = 'none');\n    }\n  }\n\n  // Public method to re-enable cursor\n  enable() {\n    if (this.cursor && !this.isTouch) {\n      this.cursor.style.display = 'block';\n      this.trails.forEach(trail => trail.style.display = 'block');\n    }\n  }\n\n  // Cleanup method\n  destroy() {\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n    }\n    this.trails.forEach(trail => {\n      if (trail.parentNode) {\n        trail.parentNode.removeChild(trail);\n      }\n    });\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    document.removeEventListener('mousedown', this.handleMouseDown);\n    document.removeEventListener('mouseup', this.handleMouseUp);\n    console.log('ðŸ§¹ Custom cursor controller destroyed');\n  }\n}\n\n// Add necessary CSS animations via JavaScript\nconst cursorStyles = document.createElement('style');\ncursorStyles.textContent = `\n    @keyframes cursor-glow {\n        0% {\n            opacity: 0;\n            transform: translate(-50%, -50%) scale(0.5);\n        }\n        50% {\n            opacity: 1;\n            transform: translate(-50%, -50%) scale(1);\n        }\n        100% {\n            opacity: 0;\n            transform: translate(-50%, -50%) scale(1.2);\n        }\n    }\n`;\ndocument.head.appendChild(cursorStyles);\n\n// Initialize cursor controller when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.customCursor = new CustomCursorController();\n});\n\n// Export for module usage if needed\nif ( true && module.exports) {\n  module.exports = CustomCursorController;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///279\n\n}");

/***/ }),

/***/ 374:
/***/ ((module) => {

eval("{/**\r\n * Parallax Effect Controller\r\n * Handles scroll-based parallax movement for enhanced visual depth\r\n */\n\nclass ParallaxController {\n  constructor() {\n    this.parallaxElements = [];\n    this.rafId = null;\n    this.isScrolling = false;\n    this.lastScrollY = window.scrollY;\n    this.init();\n  }\n  init() {\n    // Find all parallax elements\n    this.parallaxElements = document.querySelectorAll('.scroll-parallax');\n    if (this.parallaxElements.length === 0) {\n      return;\n    }\n\n    // Check for reduced motion preference\n    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n      return;\n    }\n\n    // Bind scroll events\n    this.bindEvents();\n\n    // Initial parallax calculation\n    this.updateParallax();\n    console.log(`âœ¨ Parallax controller initialized with ${this.parallaxElements.length} elements`);\n  }\n  bindEvents() {\n    // Optimized scroll handler with requestAnimationFrame\n    window.addEventListener('scroll', this.handleScroll.bind(this), {\n      passive: true\n    });\n\n    // Handle resize events\n    window.addEventListener('resize', this.handleResize.bind(this), {\n      passive: true\n    });\n\n    // Handle visibility change for performance\n    document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n  }\n  handleScroll() {\n    if (!this.isScrolling) {\n      this.isScrolling = true;\n      this.rafId = requestAnimationFrame(this.updateParallax.bind(this));\n    }\n  }\n  handleResize() {\n    // Debounce resize updates\n    clearTimeout(this.resizeTimeout);\n    this.resizeTimeout = setTimeout(() => {\n      this.updateParallax();\n    }, 100);\n  }\n  handleVisibilityChange() {\n    if (document.hidden) {\n      // Pause animations when tab is not visible\n      if (this.rafId) {\n        cancelAnimationFrame(this.rafId);\n        this.rafId = null;\n      }\n    } else {\n      // Resume when tab becomes visible\n      this.updateParallax();\n    }\n  }\n  updateParallax() {\n    const scrollY = window.scrollY;\n    const windowHeight = window.innerHeight;\n    const documentHeight = document.documentElement.scrollHeight;\n\n    // Calculate scroll progress (0 to 1)\n    const scrollProgress = scrollY / (documentHeight - windowHeight);\n    this.parallaxElements.forEach((element, index) => {\n      // Get parallax speed from data attribute (default: 0.5)\n      const speed = parseFloat(element.dataset.speed) || 0.5;\n\n      // Get element position relative to viewport\n      const rect = element.getBoundingClientRect();\n      const elementTop = rect.top + scrollY;\n      const elementHeight = rect.height;\n\n      // Check if element is in viewport (with buffer)\n      const buffer = windowHeight * 0.5;\n      const isInView = scrollY + windowHeight + buffer > elementTop && scrollY - buffer < elementTop + elementHeight;\n      if (isInView) {\n        // Calculate parallax offset based on scroll position and speed\n        const yPos = (scrollY - elementTop) * speed;\n\n        // Apply different parallax calculations based on element type\n        if (element.classList.contains('parallax-layer-back')) {\n          // Furthest layer moves slower and with slight rotation\n          const rotation = scrollProgress * 2;\n          const scale = 1 + scrollProgress * 0.1;\n          element.style.transform = `translateZ(-300px) scale(${1.3 * scale}) translate3d(0, ${yPos}px, 0) rotate(${rotation}deg)`;\n        } else if (element.classList.contains('parallax-layer-base')) {\n          // Base layer with moderate movement\n          const scale = 1 + scrollProgress * 0.05;\n          element.style.transform = `translateZ(-100px) scale(${1.1 * scale}) translate3d(0, ${yPos}px, 0)`;\n        } else if (element.classList.contains('parallax-layer-mid')) {\n          // Mid layer with subtle movement\n          element.style.transform = `translateZ(-50px) scale(1.05) translate3d(0, ${yPos}px, 0)`;\n        } else if (element.classList.contains('parallax-layer-front')) {\n          // Front layer with minimal movement\n          element.style.transform = `translateZ(0px) scale(1) translate3d(0, ${yPos * 0.3}px, 0)`;\n        } else {\n          // Default parallax movement\n          element.style.transform = `translate3d(0, ${yPos}px, 0)`;\n        }\n\n        // Add subtle opacity changes based on scroll position\n        const opacityFactor = 1 - Math.abs(yPos) / (windowHeight * 2);\n        const opacity = Math.max(0.3, Math.min(1, opacityFactor));\n        element.style.opacity = opacity;\n      }\n    });\n\n    // Update scroll position\n    this.lastScrollY = scrollY;\n    this.isScrolling = false;\n  }\n\n  // Public method to add new parallax elements dynamically\n  addElement(element, speed = 0.5) {\n    if (element && !element.classList.contains('scroll-parallax')) {\n      element.classList.add('scroll-parallax');\n      element.dataset.speed = speed;\n      this.parallaxElements.push(element);\n    }\n  }\n\n  // Public method to remove parallax effects\n  removeElement(element) {\n    const index = Array.from(this.parallaxElements).indexOf(element);\n    if (index > -1) {\n      element.classList.remove('scroll-parallax');\n      element.style.transform = '';\n      element.style.opacity = '';\n      this.parallaxElements.splice(index, 1);\n    }\n  }\n\n  // Cleanup method\n  destroy() {\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n    }\n    window.removeEventListener('scroll', this.handleScroll);\n    window.removeEventListener('resize', this.handleResize);\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n\n    // Reset all elements\n    this.parallaxElements.forEach(element => {\n      element.style.transform = '';\n      element.style.opacity = '';\n    });\n    this.parallaxElements = [];\n    console.log('ðŸ§¹ Parallax controller destroyed');\n  }\n}\n\n// Initialize parallax controller when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Check if parallax elements exist before initializing\n  if (document.querySelector('.scroll-parallax')) {\n    window.parallaxController = new ParallaxController();\n  }\n});\n\n// Export for module usage if needed\nif ( true && module.exports) {\n  module.exports = ParallaxController;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///374\n\n}");

/***/ }),

/***/ 786:
/***/ (() => {

eval("{/**\r\n * Advanced Animations & Micro-interactions\r\n * Handles scroll-triggered animations, page transitions, and interactive effects\r\n */\n\nclass AnimationController {\n  constructor() {\n    this.isReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    this.observers = new Map();\n    this.init();\n  }\n  init() {\n    // Skip animations if user prefers reduced motion\n    if (this.isReduced) {\n      this.disableAnimations();\n      return;\n    }\n    this.initPageTransitions();\n    this.initScrollReveal();\n    this.initMicroInteractions();\n    this.initPerformanceOptimizations();\n\n    // Initialize when DOM is ready\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => this.startAnimations());\n    } else {\n      this.startAnimations();\n    }\n  }\n\n  /**\r\n   * Disable all animations for users who prefer reduced motion\r\n   */\n  disableAnimations() {\n    const style = document.createElement('style');\n    style.textContent = `\n            *, *::before, *::after {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n        `;\n    document.head.appendChild(style);\n  }\n\n  /**\r\n   * Initialize page transition animations\r\n   */\n  initPageTransitions() {\n    // Add page transition class to main content\n    const main = document.querySelector('main') || document.body;\n    main.classList.add('page-transition');\n\n    // Trigger page load animation\n    window.addEventListener('load', () => {\n      setTimeout(() => {\n        main.classList.add('loaded');\n      }, 100);\n    });\n\n    // Handle navigation transitions\n    this.initNavigationTransitions();\n  }\n\n  /**\r\n   * Initialize navigation transitions for SPA-like experience\r\n   */\n  initNavigationTransitions() {\n    const links = document.querySelectorAll('a[href^=\"/\"], a[href^=\"#\"]');\n    links.forEach(link => {\n      // Skip external links and hash-only links\n      if (link.hostname !== window.location.hostname || link.getAttribute('href').startsWith('#')) {\n        return;\n      }\n      link.addEventListener('click', e => {\n        const main = document.querySelector('main') || document.body;\n\n        // Add transition out effect\n        main.style.opacity = '0';\n        main.style.transform = 'translateY(-20px)';\n\n        // Allow default navigation after transition\n        setTimeout(() => {\n          // Navigation will happen naturally\n        }, 200);\n      });\n    });\n  }\n\n  /**\r\n   * Initialize scroll-triggered reveal animations\r\n   */\n  initScrollReveal() {\n    // Create intersection observer for scroll reveals\n    const revealObserver = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('revealed');\n\n          // Stop observing once revealed\n          revealObserver.unobserve(entry.target);\n        }\n      });\n    }, {\n      threshold: 0.1,\n      rootMargin: '0px 0px -50px 0px'\n    });\n\n    // Observe all scroll reveal elements\n    const revealElements = document.querySelectorAll(['.scroll-reveal', '.scroll-reveal-left', '.scroll-reveal-right', '.scroll-reveal-scale'].join(', '));\n    revealElements.forEach(el => {\n      revealObserver.observe(el);\n    });\n    this.observers.set('reveal', revealObserver);\n  }\n\n  /**\r\n   * Initialize micro-interactions for enhanced user feedback\r\n   */\n  initMicroInteractions() {\n    this.initButtonInteractions();\n    this.initFormInteractions();\n    this.initCardInteractions();\n    this.initHoverEffects();\n  }\n\n  /**\r\n   * Enhanced button interactions\r\n   */\n  initButtonInteractions() {\n    const buttons = document.querySelectorAll('button, .btn-primary, .btn-secondary, .btn-tertiary');\n    buttons.forEach(button => {\n      // Add micro-interaction classes\n      button.classList.add('btn-micro', 'click-animation', 'gpu-accelerated');\n\n      // Click feedback\n      button.addEventListener('click', e => {\n        // Create ripple effect at click position\n        this.createRipple(e, button);\n\n        // Haptic feedback on supported devices\n        if (navigator.vibrate) {\n          navigator.vibrate(10);\n        }\n      });\n\n      // Loading state management\n      this.initButtonLoadingState(button);\n    });\n  }\n\n  /**\r\n   * Create ripple effect on button click\r\n   */\n  createRipple(event, element) {\n    const rect = element.getBoundingClientRect();\n    const size = Math.max(rect.width, rect.height);\n    const x = event.clientX - rect.left - size / 2;\n    const y = event.clientY - rect.top - size / 2;\n    const ripple = document.createElement('div');\n    ripple.style.cssText = `\n            position: absolute;\n            border-radius: 50%;\n            background: rgba(255, 255, 255, 0.3);\n            width: ${size}px;\n            height: ${size}px;\n            left: ${x}px;\n            top: ${y}px;\n            animation: ripple-animation 0.6s ease-out;\n            pointer-events: none;\n            z-index: 1000;\n        `;\n    element.style.position = element.style.position || 'relative';\n    element.appendChild(ripple);\n\n    // Remove ripple after animation\n    setTimeout(() => {\n      if (ripple.parentNode) {\n        ripple.parentNode.removeChild(ripple);\n      }\n    }, 600);\n  }\n\n  /**\r\n   * Initialize button loading states\r\n   */\n  initButtonLoadingState(button) {\n    // Handle form submission buttons\n    const form = button.closest('form');\n    if (form) {\n      form.addEventListener('submit', () => {\n        if (button.type === 'submit') {\n          this.setButtonLoading(button, true);\n        }\n      });\n    }\n  }\n\n  /**\r\n   * Set button loading state\r\n   */\n  setButtonLoading(button, isLoading) {\n    if (isLoading) {\n      button.classList.add('btn-loading');\n      button.disabled = true;\n\n      // Store original content\n      button.dataset.originalContent = button.innerHTML;\n\n      // Add spinner\n      button.innerHTML = `\n                <svg class=\"btn-spinner\" viewBox=\"0 0 24 24\">\n                    <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\" fill=\"none\"></circle>\n                    <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"></path>\n                </svg>\n                Loading...\n            `;\n    } else {\n      button.classList.remove('btn-loading');\n      button.disabled = false;\n      button.innerHTML = button.dataset.originalContent || button.innerHTML;\n    }\n  }\n\n  /**\r\n   * Enhanced form interactions\r\n   */\n  initFormInteractions() {\n    const inputs = document.querySelectorAll('input, textarea, select');\n    inputs.forEach(input => {\n      // Add focus animations\n      input.classList.add('input-focus-animation', 'gpu-accelerated');\n\n      // Error shake animation\n      input.addEventListener('invalid', () => {\n        input.classList.add('animate-shake');\n        setTimeout(() => {\n          input.classList.remove('animate-shake');\n        }, 500);\n      });\n\n      // Success feedback\n      input.addEventListener('input', () => {\n        if (input.validity.valid && input.value) {\n          input.classList.add('input-valid-feedback');\n        } else {\n          input.classList.remove('input-valid-feedback');\n        }\n      });\n    });\n  }\n\n  /**\r\n   * Enhanced card interactions\r\n   */\n  initCardInteractions() {\n    const cards = document.querySelectorAll('.card-base, .glass-card');\n    cards.forEach(card => {\n      // Add hover glow effect to interactive cards\n      if (card.classList.contains('card-interactive')) {\n        card.classList.add('hover-glow');\n      }\n\n      // Parallax effect on mouse move\n      this.initCardParallax(card);\n\n      // Stagger animations for card grids\n      this.initCardGridAnimations(card);\n    });\n  }\n\n  /**\r\n   * Add subtle parallax effect to cards\r\n   */\n  initCardParallax(card) {\n    card.addEventListener('mousemove', e => {\n      const rect = card.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      const centerX = rect.width / 2;\n      const centerY = rect.height / 2;\n      const rotateX = (y - centerY) / 20;\n      const rotateY = (centerX - x) / 20;\n      card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(0)`;\n    });\n    card.addEventListener('mouseleave', () => {\n      card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) translateZ(0)';\n    });\n  }\n\n  /**\r\n   * Stagger animations for card grids\r\n   */\n  initCardGridAnimations(card) {\n    const cardGrid = card.closest('.card-grid');\n    if (!cardGrid) return;\n    const cards = Array.from(cardGrid.children);\n    const index = cards.indexOf(card);\n\n    // Add stagger delay\n    card.style.animationDelay = `${index * 0.1}s`;\n    card.classList.add('animate-fade-in');\n  }\n\n  /**\r\n   * Initialize hover effects\r\n   */\n  initHoverEffects() {\n    // Add floating animation to specific elements\n    const floatingElements = document.querySelectorAll('.animate-float');\n    floatingElements.forEach(el => {\n      el.classList.add('gpu-accelerated');\n    });\n\n    // Add pulse animation to call-to-action elements\n    const ctaElements = document.querySelectorAll('.btn-primary, .btn-fab');\n    ctaElements.forEach(el => {\n      el.addEventListener('mouseenter', () => {\n        el.classList.add('animate-pulse-soft');\n      });\n      el.addEventListener('mouseleave', () => {\n        el.classList.remove('animate-pulse-soft');\n      });\n    });\n  }\n\n  /**\r\n   * Performance optimizations\r\n   */\n  initPerformanceOptimizations() {\n    // Add will-change properties to animated elements\n    const animatedElements = document.querySelectorAll(['.btn-base', '.card-base', '.glass-card', '.animate-fade-in', '.animate-slide-up', '.scroll-reveal', '.nav-link-modern'].join(', '));\n    animatedElements.forEach(el => {\n      el.classList.add('gpu-accelerated');\n\n      // Add will-change on interaction\n      el.addEventListener('mouseenter', () => {\n        el.classList.add('will-change-transform');\n      });\n      el.addEventListener('mouseleave', () => {\n        setTimeout(() => {\n          el.classList.remove('will-change-transform');\n        }, 300);\n      });\n    });\n  }\n\n  /**\r\n   * Start all animations\r\n   */\n  startAnimations() {\n    // Trigger initial animations with stagger\n    const elements = document.querySelectorAll('.animate-fade-in, .animate-slide-up');\n    elements.forEach((el, index) => {\n      setTimeout(() => {\n        el.style.opacity = '1';\n        el.style.transform = 'translateY(0)';\n      }, index * 100);\n    });\n  }\n\n  /**\r\n   * Cleanup method\r\n   */\n  destroy() {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n  }\n}\n\n// Add ripple animation keyframes\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes ripple-animation {\n        to {\n            transform: scale(2);\n            opacity: 0;\n        }\n    }\n\n    .input-valid-feedback {\n        border-color: #059669 !important;\n        box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1) !important;\n    }\n`;\ndocument.head.appendChild(style);\n\n// Initialize animations when script loads\nconst animationController = new AnimationController();\n\n// Export for potential external use\nwindow.AnimationController = AnimationController;\nwindow.animationController = animationController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///786\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__(786);
/******/ 	__webpack_require__(146);
/******/ 	__webpack_require__(374);
/******/ 	var __webpack_exports__ = __webpack_require__(279);
/******/ 	
/******/ })()
;