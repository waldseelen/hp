/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkbest"] = self["webpackChunkbest"] || []).push([[792],{

/***/ 497:
/***/ ((module) => {

eval("{/**\r\n * UI Enhancements Module\r\n * Advanced user interface enhancements for improved user experience\r\n */\n\nclass UIEnhancements {\n  constructor() {\n    this.init();\n    this.setupEventListeners();\n    this.initializeComponents();\n  }\n  init() {\n    // Initialize UI enhancement systems\n    this.toastManager = new ToastManager();\n    this.modalManager = new ModalManager();\n    this.scrollManager = new ScrollManager();\n    this.loadingManager = new LoadingManager();\n    this.searchManager = new SearchManager();\n    this.animationManager = new AnimationManager();\n    this.keyboardManager = new KeyboardManager();\n    this.themeManager = new ThemeManager();\n  }\n  setupEventListeners() {\n    // DOM content loaded\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => this.onDOMReady());\n    } else {\n      this.onDOMReady();\n    }\n\n    // Window events\n    window.addEventListener('load', () => this.onWindowLoad());\n    window.addEventListener('resize', () => this.onWindowResize());\n    window.addEventListener('scroll', this.throttle(this.onWindowScroll, 16), {\n      passive: true\n    });\n\n    // Page visibility\n    document.addEventListener('visibilitychange', () => this.onVisibilityChange());\n\n    // Network status\n    window.addEventListener('online', () => this.onNetworkChange(true));\n    window.addEventListener('offline', () => this.onNetworkChange(false));\n  }\n  initializeComponents() {\n    // Initialize all UI components\n    this.setupBackToTop();\n    this.setupScrollProgress();\n    this.setupImageLazyLoading();\n    this.setupFormEnhancements();\n    this.setupCardInteractions();\n    this.setupNavigationEnhancements();\n    this.setupAccessibilityFeatures();\n  }\n  onDOMReady() {\n    console.log('UI Enhancements: DOM Ready');\n    this.animationManager.initializeScrollAnimations();\n    this.loadingManager.hideInitialLoader();\n  }\n  onWindowLoad() {\n    console.log('UI Enhancements: Window Loaded');\n    this.animationManager.triggerDelayedAnimations();\n  }\n  onWindowResize() {\n    this.scrollManager.updateScrollProgress();\n  }\n  onWindowScroll = () => {\n    if (!this.scrollAnimationFrame) {\n      this.scrollAnimationFrame = requestAnimationFrame(() => {\n        this.scrollManager.handleScroll();\n        this.animationManager.handleScrollAnimations();\n        this.scrollAnimationFrame = null;\n      });\n    }\n  };\n  onVisibilityChange() {\n    if (document.hidden) {\n      this.pauseAnimations();\n    } else {\n      this.resumeAnimations();\n    }\n  }\n  onNetworkChange(isOnline) {\n    const message = isOnline ? 'Connection restored' : 'Connection lost';\n    const type = isOnline ? 'success' : 'warning';\n    this.toastManager.show(message, type);\n  }\n  setupBackToTop() {\n    const backToTopBtn = document.getElementById('back-to-top');\n    if (!backToTopBtn) return;\n    backToTopBtn.addEventListener('click', e => {\n      e.preventDefault();\n      this.scrollManager.scrollToTop();\n    });\n  }\n  setupScrollProgress() {\n    const progressBar = document.getElementById('scroll-progress');\n    if (progressBar) {\n      this.scrollManager.setProgressBar(progressBar);\n    }\n  }\n  setupImageLazyLoading() {\n    // Skip image lazy loading if already handled by performance.js\n    if (window.__imgLazyOwner && window.__imgLazyOwner !== 'ui-enhancements') {\n      return;\n    }\n\n    // Set owner if not already set\n    if (!window.__imgLazyOwner) {\n      window.__imgLazyOwner = 'ui-enhancements';\n    }\n    const images = document.querySelectorAll('img[data-src]');\n    if ('IntersectionObserver' in window) {\n      const observerOptions = {\n        root: null,\n        rootMargin: '50px',\n        threshold: 0.1\n      };\n      const imageObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const img = entry.target;\n\n            // Add error handling for failed image loads\n            img.addEventListener('error', () => {\n              img.classList.remove('loading');\n              img.classList.add('load-error');\n\n              // Try fallback image if available\n              if (img.dataset.fallback) {\n                img.src = img.dataset.fallback;\n              } else {\n                // Use placeholder or hide image\n                img.style.display = 'none';\n                console.warn('Image failed to load:', img.dataset.src);\n              }\n            });\n            img.addEventListener('load', () => {\n              img.classList.remove('loading');\n              img.classList.add('loaded');\n            });\n            img.src = img.dataset.src;\n            observer.unobserve(img);\n          }\n        });\n      }, observerOptions);\n      images.forEach(img => {\n        img.classList.add('loading');\n        imageObserver.observe(img);\n      });\n    }\n  }\n  setupFormEnhancements() {\n    // Real-time form validation\n    const forms = document.querySelectorAll('form');\n    forms.forEach(form => {\n      this.enhanceForm(form);\n    });\n  }\n  enhanceForm(form) {\n    const inputs = form.querySelectorAll('input, textarea, select');\n    inputs.forEach(input => {\n      // Add floating label effect\n      this.addFloatingLabel(input);\n\n      // Add validation feedback\n      input.addEventListener('blur', () => this.validateInput(input));\n      input.addEventListener('input', () => this.clearValidationErrors(input));\n    });\n    form.addEventListener('submit', e => this.handleFormSubmit(e, form));\n  }\n  addFloatingLabel(input) {\n    const container = input.closest('.form-group');\n    if (!container) return;\n    const label = container.querySelector('label');\n    if (!label) return;\n    input.addEventListener('focus', () => label.classList.add('focused'));\n    input.addEventListener('blur', () => {\n      if (!input.value) {\n        label.classList.remove('focused');\n      }\n    });\n\n    // Initial state\n    if (input.value) {\n      label.classList.add('focused');\n    }\n  }\n  validateInput(input) {\n    const isValid = input.checkValidity();\n    const container = input.closest('.form-group');\n    if (container) {\n      container.classList.toggle('has-error', !isValid);\n      container.classList.toggle('has-success', isValid && input.value);\n    }\n    return isValid;\n  }\n  clearValidationErrors(input) {\n    const container = input.closest('.form-group');\n    if (container) {\n      container.classList.remove('has-error');\n    }\n  }\n  handleFormSubmit(e, form) {\n    const inputs = form.querySelectorAll('input[required], textarea[required], select[required]');\n    let isFormValid = true;\n    inputs.forEach(input => {\n      if (!this.validateInput(input)) {\n        isFormValid = false;\n      }\n    });\n    if (!isFormValid) {\n      e.preventDefault();\n      this.toastManager.show('Please fill in all required fields', 'error');\n      return;\n    }\n\n    // Show loading state\n    const submitBtn = form.querySelector('[type=\"submit\"]');\n    if (submitBtn) {\n      submitBtn.classList.add('btn-loading');\n      submitBtn.disabled = true;\n    }\n  }\n  setupCardInteractions() {\n    const cards = document.querySelectorAll('.card-interactive');\n    cards.forEach(card => {\n      // Mouse move effect for cards\n      card.addEventListener('mousemove', e => {\n        const {\n          clientX,\n          clientY\n        } = e;\n        const {\n          left,\n          top\n        } = card.getBoundingClientRect();\n        const x = clientX - left;\n        const y = clientY - top;\n        card.style.setProperty('--mouse-x', `${x}px`);\n        card.style.setProperty('--mouse-y', `${y}px`);\n      });\n\n      // Click ripple effect\n      card.addEventListener('click', e => {\n        this.createRippleEffect(e, card);\n      });\n    });\n  }\n  createRippleEffect(e, element) {\n    const ripple = document.createElement('span');\n    const {\n      width,\n      height,\n      left,\n      top\n    } = element.getBoundingClientRect();\n    const size = Math.max(width, height);\n    const {\n      clientX,\n      clientY\n    } = e;\n    const x = clientX - left - size / 2;\n    const y = clientY - top - size / 2;\n    ripple.style.cssText = `\n            width: ${size}px;\n            height: ${size}px;\n            left: ${x}px;\n            top: ${y}px;\n            position: absolute;\n            border-radius: 50%;\n            background: rgba(255, 255, 255, 0.1);\n            transform: scale(0);\n            animation: ripple 0.6s linear;\n            pointer-events: none;\n            z-index: 1;\n        `;\n    element.style.position = 'relative';\n    element.style.overflow = 'hidden';\n    element.appendChild(ripple);\n\n    // Add ripple animation\n    const style = document.createElement('style');\n    style.textContent = `\n            @keyframes ripple {\n                to {\n                    transform: scale(2);\n                    opacity: 0;\n                }\n            }\n        `;\n    document.head.appendChild(style);\n    setTimeout(() => {\n      ripple.remove();\n      if (element.querySelectorAll('span').length === 0) {\n        style.remove();\n      }\n    }, 600);\n  }\n  setupNavigationEnhancements() {\n    // Smooth scroll for anchor links\n    document.addEventListener('click', e => {\n      const link = e.target.closest('a[href^=\"#\"]');\n      if (link && link.getAttribute('href') !== '#') {\n        e.preventDefault();\n        const target = document.querySelector(link.getAttribute('href'));\n        if (target) {\n          this.scrollManager.scrollToElement(target);\n        }\n      }\n    });\n\n    // Active navigation highlighting\n    this.highlightActiveNavigation();\n  }\n  highlightActiveNavigation() {\n    const navLinks = document.querySelectorAll('.nav-link');\n    const currentPath = window.location.pathname;\n    navLinks.forEach(link => {\n      if (link.getAttribute('href') === currentPath) {\n        link.classList.add('active');\n      }\n    });\n  }\n  setupAccessibilityFeatures() {\n    // Focus management\n    document.addEventListener('keydown', e => {\n      if (e.key === 'Tab') {\n        document.body.classList.add('keyboard-navigation');\n      }\n    });\n    document.addEventListener('mousedown', () => {\n      document.body.classList.remove('keyboard-navigation');\n    });\n\n    // Skip links\n    const skipLinks = document.querySelectorAll('.skip-link');\n    skipLinks.forEach(link => {\n      link.addEventListener('click', e => {\n        e.preventDefault();\n        const target = document.querySelector(link.getAttribute('href'));\n        if (target) {\n          target.focus();\n          target.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      });\n    });\n  }\n  pauseAnimations() {\n    document.body.classList.add('animations-paused');\n  }\n  resumeAnimations() {\n    document.body.classList.remove('animations-paused');\n  }\n}\n\n// Toast Manager Class\nclass ToastManager {\n  constructor() {\n    this.container = document.getElementById('toast-container');\n    this.toasts = new Map();\n    this.defaultDuration = 5000;\n  }\n  show = (message, type = 'info', options = {}) => {\n    const id = Date.now().toString();\n    const toast = this.createToast(id, message, type, options);\n    if (this.container) {\n      this.container.appendChild(toast);\n      this.toasts.set(id, toast);\n\n      // Trigger entrance animation\n      requestAnimationFrame(() => {\n        toast.classList.add('toast-entering');\n      });\n\n      // Auto dismiss\n      if (options.autoDismiss !== false) {\n        setTimeout(() => {\n          this.dismiss(id);\n        }, options.duration || this.defaultDuration);\n      }\n\n      // Screen reader announcement\n      this.announceToScreenReader(message);\n    }\n    return id;\n  };\n  createToast(id, message, type, options) {\n    const template = document.getElementById('toast-template');\n    if (!template) return null;\n    const toast = template.content.cloneNode(true).querySelector('.toast-notification');\n    toast.setAttribute('data-toast-id', id);\n    toast.classList.add(`toast-${type}`);\n\n    // Set content\n    const titleEl = toast.querySelector('.toast-title');\n    const messageEl = toast.querySelector('.toast-message');\n    const iconEl = toast.querySelector('.toast-icon');\n    if (titleEl) titleEl.textContent = options.title || this.getDefaultTitle(type);\n    if (messageEl) messageEl.textContent = message;\n    if (iconEl) this.setToastIcon(iconEl, type);\n\n    // Setup close button\n    const closeBtn = toast.querySelector('.toast-close');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => this.dismiss(id));\n    }\n\n    // Setup actions\n    if (options.actions) {\n      this.setupToastActions(toast, options.actions, id);\n    }\n\n    // Setup progress bar for auto-dismiss\n    if (options.autoDismiss !== false) {\n      this.setupProgressBar(toast, options.duration || this.defaultDuration);\n    }\n    return toast;\n  }\n  setToastIcon(iconEl, type) {\n    const iconId = `toast-${type}-icon`;\n    const sourceIcon = document.getElementById(iconId);\n    if (sourceIcon) {\n      iconEl.innerHTML = sourceIcon.innerHTML;\n      iconEl.className = sourceIcon.className;\n    }\n  }\n  setupToastActions(toast, actions, toastId) {\n    const actionsContainer = toast.querySelector('.toast-actions');\n    if (!actionsContainer || !actions.length) return;\n    actionsContainer.classList.remove('hidden');\n    actions.forEach((action, index) => {\n      const button = actionsContainer.querySelector(index === 0 ? '.toast-action-primary' : '.toast-action-secondary');\n      if (button) {\n        button.textContent = action.text;\n        button.onclick = () => {\n          action.handler();\n          this.dismiss(toastId);\n        };\n      }\n    });\n  }\n  setupProgressBar(toast, duration) {\n    const progressContainer = toast.querySelector('.toast-progress-container');\n    const progressBar = toast.querySelector('.toast-progress');\n    if (progressContainer && progressBar) {\n      progressContainer.classList.remove('hidden');\n      progressBar.style.setProperty('--duration', `${duration}ms`);\n      requestAnimationFrame(() => {\n        progressBar.style.width = '0%';\n      });\n    }\n  }\n  dismiss(id) {\n    const toast = this.toasts.get(id);\n    if (toast) {\n      toast.classList.add('toast-removing');\n      setTimeout(() => {\n        toast.remove();\n        this.toasts.delete(id);\n      }, 300);\n    }\n  }\n  dismissAll() {\n    this.toasts.forEach((toast, id) => {\n      this.dismiss(id);\n    });\n  }\n  getDefaultTitle(type) {\n    const titles = {\n      success: 'Success',\n      error: 'Error',\n      warning: 'Warning',\n      info: 'Info'\n    };\n    return titles[type] || 'Notification';\n  }\n  announceToScreenReader(message) {\n    const announcement = document.getElementById('toast-announcement');\n    if (announcement) {\n      announcement.textContent = message;\n      setTimeout(() => {\n        announcement.textContent = '';\n      }, 1000);\n    }\n  }\n}\n\n// Modal Manager Class\nclass ModalManager {\n  constructor() {\n    this.activeModal = null;\n    this.previousFocus = null;\n  }\n  open(modalId) {\n    const modal = document.getElementById(modalId);\n    if (!modal) return;\n    this.previousFocus = document.activeElement;\n    this.activeModal = modal;\n    modal.classList.add('modal-open');\n    modal.setAttribute('aria-hidden', 'false');\n\n    // Focus management\n    const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n    if (focusableElements.length > 0) {\n      focusableElements[0].focus();\n    }\n\n    // Escape key to close\n    document.addEventListener('keydown', this.handleModalEscape);\n\n    // Prevent body scroll\n    document.body.style.overflow = 'hidden';\n  }\n  close(modalId) {\n    const modal = document.getElementById(modalId);\n    if (!modal) return;\n    modal.classList.remove('modal-open');\n    modal.setAttribute('aria-hidden', 'true');\n\n    // Restore focus\n    if (this.previousFocus) {\n      this.previousFocus.focus();\n    }\n\n    // Remove event listeners\n    document.removeEventListener('keydown', this.handleModalEscape);\n\n    // Restore body scroll\n    document.body.style.overflow = '';\n    this.activeModal = null;\n    this.previousFocus = null;\n  }\n  handleModalEscape = e => {\n    if (e.key === 'Escape' && this.activeModal) {\n      this.close(this.activeModal.id);\n    }\n  };\n}\n\n// Scroll Manager Class\nclass ScrollManager {\n  constructor() {\n    this.progressBar = null;\n    this.backToTopBtn = document.getElementById('back-to-top');\n    this.scrollThreshold = 300;\n    this.ticking = false;\n  }\n  setProgressBar(element) {\n    this.progressBar = element;\n  }\n  handleScroll() {\n    if (!this.ticking) {\n      requestAnimationFrame(() => {\n        this.updateScrollProgress();\n        this.updateBackToTopButton();\n        this.ticking = false;\n      });\n      this.ticking = true;\n    }\n  }\n  updateScrollProgress() {\n    if (!this.progressBar) return;\n    const scrollTop = window.pageYOffset;\n    const docHeight = document.documentElement.scrollHeight - window.innerHeight;\n    const scrolled = scrollTop / docHeight * 100;\n    this.progressBar.style.width = `${Math.min(scrolled, 100)}%`;\n  }\n  updateBackToTopButton() {\n    if (!this.backToTopBtn) return;\n    const shouldShow = window.pageYOffset > this.scrollThreshold;\n    this.backToTopBtn.classList.toggle('visible', shouldShow);\n  }\n  scrollToTop() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }\n  scrollToElement(element, offset = 80) {\n    const elementPosition = element.offsetTop - offset;\n    window.scrollTo({\n      top: elementPosition,\n      behavior: 'smooth'\n    });\n  }\n}\n\n// Loading Manager Class\nclass LoadingManager {\n  constructor() {\n    this.overlay = document.getElementById('loading-overlay');\n    this.loadingMessages = ['Loading content...', 'Preparing your experience...', 'Almost ready...', 'Just a moment...'];\n    this.currentMessageIndex = 0;\n  }\n  show(message) {\n    if (!this.overlay) return;\n    if (message) {\n      const messageEl = document.getElementById('loading-message');\n      if (messageEl) messageEl.textContent = message;\n    }\n    this.overlay.classList.add('show');\n    this.announceToScreenReader('Loading');\n  }\n  hide() {\n    if (!this.overlay) return;\n    this.overlay.classList.remove('show');\n  }\n  hideInitialLoader() {\n    // Hide any initial page loader\n    const initialLoader = document.querySelector('.initial-loader');\n    if (initialLoader) {\n      initialLoader.style.opacity = '0';\n      setTimeout(() => {\n        initialLoader.remove();\n      }, 300);\n    }\n  }\n  updateProgress(percent) {\n    const progressBar = document.getElementById('loading-progress');\n    if (progressBar) {\n      progressBar.style.width = `${percent}%`;\n    }\n  }\n  updateMessage(message) {\n    const messageEl = document.getElementById('loading-message');\n    if (messageEl) {\n      messageEl.textContent = message;\n    }\n  }\n  cycleMessages(interval = 2000) {\n    setInterval(() => {\n      this.currentMessageIndex = (this.currentMessageIndex + 1) % this.loadingMessages.length;\n      this.updateMessage(this.loadingMessages[this.currentMessageIndex]);\n    }, interval);\n  }\n  announceToScreenReader(message) {\n    const announcement = document.getElementById('loading-announcement');\n    if (announcement) {\n      announcement.textContent = message;\n    }\n  }\n}\n\n// Search Manager Class\nclass SearchManager {\n  constructor() {\n    this.modal = document.getElementById('search-modal');\n    this.input = document.getElementById('search-input');\n    this.resultsContainer = document.getElementById('search-results');\n    this.debounceTimer = null;\n    this.currentQuery = '';\n    this.selectedIndex = -1;\n    this.results = [];\n  }\n  initialize() {\n    if (!this.modal || !this.input) return;\n\n    // Setup event listeners\n    this.input.addEventListener('input', this.debounce(e => this.handleInput(e.target.value), 300));\n    this.input.addEventListener('keydown', e => this.handleKeydown(e));\n\n    // Setup filter buttons\n    const filters = this.modal.querySelectorAll('.search-filter');\n    filters.forEach(filter => {\n      filter.addEventListener('click', e => this.handleFilterClick(e.target));\n    });\n\n    // Setup suggestions\n    const suggestions = this.modal.querySelectorAll('.search-suggestion');\n    suggestions.forEach(suggestion => {\n      suggestion.addEventListener('click', e => {\n        this.input.value = e.target.textContent;\n        this.handleInput(e.target.textContent);\n      });\n    });\n  }\n  open() {\n    if (!this.modal) return;\n    this.modal.classList.add('search-modal-open');\n    this.modal.style.opacity = '1';\n    this.modal.style.visibility = 'visible';\n    if (this.input) {\n      this.input.focus();\n    }\n\n    // Show recent searches initially\n    this.showRecentSearches();\n  }\n  close() {\n    if (!this.modal) return;\n    this.modal.classList.remove('search-modal-open');\n    this.modal.style.opacity = '0';\n    this.modal.style.visibility = 'hidden';\n    this.clearResults();\n    this.selectedIndex = -1;\n  }\n  handleInput(query) {\n    this.currentQuery = query.trim();\n    if (this.debounceTimer) {\n      clearTimeout(this.debounceTimer);\n    }\n    this.debounceTimer = setTimeout(() => {\n      if (this.currentQuery.length >= 2) {\n        this.performSearch(this.currentQuery);\n      } else {\n        this.showRecentSearches();\n      }\n    }, 300);\n  }\n  handleKeydown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        this.selectedIndex = Math.min(this.selectedIndex + 1, this.results.length - 1);\n        this.updateSelection();\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        this.selectedIndex = Math.max(this.selectedIndex - 1, -1);\n        this.updateSelection();\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (this.selectedIndex >= 0) {\n          this.selectResult(this.selectedIndex);\n        }\n        break;\n      case 'Escape':\n        this.close();\n        break;\n    }\n  }\n  handleFilterClick(filterBtn) {\n    // Update active filter\n    this.modal.querySelectorAll('.search-filter').forEach(btn => {\n      btn.classList.remove('active');\n    });\n    filterBtn.classList.add('active');\n\n    // Re-run search with new filter\n    if (this.currentQuery) {\n      this.performSearch(this.currentQuery);\n    }\n  }\n  async performSearch(query) {\n    this.showLoading();\n    try {\n      const activeFilter = this.modal.querySelector('.search-filter.active')?.dataset.filter || 'all';\n      const response = await fetch(`/search/?q=${encodeURIComponent(query)}&filter=${activeFilter}`, {\n        method: 'GET',\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest',\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      this.results = data.results || [];\n      this.displayResults(this.results);\n\n      // Save to recent searches\n      this.saveRecentSearch(query);\n    } catch (error) {\n      console.error('Search error:', error);\n      this.showError('Search temporarily unavailable');\n    } finally {\n      this.hideLoading();\n    }\n  }\n  showLoading() {\n    const loading = document.getElementById('search-loading');\n    if (loading) loading.classList.remove('hidden');\n    const recent = document.getElementById('search-recent');\n    if (recent) recent.style.display = 'none';\n  }\n  hideLoading() {\n    const loading = document.getElementById('search-loading');\n    if (loading) loading.classList.add('hidden');\n  }\n  displayResults(results) {\n    if (!this.resultsContainer) return;\n    this.resultsContainer.innerHTML = '';\n    if (results.length === 0) {\n      this.showNoResults();\n      return;\n    }\n    results.forEach((result, index) => {\n      const resultEl = this.createResultElement(result, index);\n      this.resultsContainer.appendChild(resultEl);\n    });\n\n    // Hide other sections\n    const recent = document.getElementById('search-recent');\n    const noResults = document.getElementById('search-no-results');\n    if (recent) recent.style.display = 'none';\n    if (noResults) noResults.classList.add('hidden');\n  }\n  createResultElement(result, index) {\n    const template = document.getElementById('search-result-template');\n    if (!template) return document.createElement('div');\n    const element = template.content.cloneNode(true).querySelector('.search-result');\n    element.dataset.index = index;\n\n    // Fill in result data\n    const title = element.querySelector('.result-title');\n    const description = element.querySelector('.result-description');\n    const category = element.querySelector('.result-category');\n    const date = element.querySelector('.result-date');\n    const icon = element.querySelector('.result-icon');\n    if (title) title.textContent = result.title;\n    if (description) description.textContent = result.description;\n    if (category) category.textContent = result.category;\n    if (date) date.textContent = result.date;\n    if (icon) this.setResultIcon(icon, result.type);\n\n    // Click handler\n    element.addEventListener('click', () => this.selectResult(index));\n    return element;\n  }\n  setResultIcon(iconEl, type) {\n    const icons = {\n      blog: '<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\"></path></svg>',\n      project: '<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z\"></path></svg>',\n      tool: '<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path></svg>'\n    };\n    iconEl.innerHTML = icons[type] || icons.blog;\n  }\n  updateSelection() {\n    const results = this.resultsContainer.querySelectorAll('.search-result');\n    results.forEach((result, index) => {\n      result.classList.toggle('selected', index === this.selectedIndex);\n    });\n  }\n  selectResult(index) {\n    if (index >= 0 && index < this.results.length) {\n      const result = this.results[index];\n      window.location.href = result.url;\n    }\n  }\n  showNoResults() {\n    const noResults = document.getElementById('search-no-results');\n    if (noResults) noResults.classList.remove('hidden');\n  }\n  showError(message) {\n    // Implementation for showing error message\n    console.error('Search error:', message);\n  }\n  showRecentSearches() {\n    const recent = document.getElementById('search-recent');\n    if (recent) recent.style.display = 'block';\n\n    // Load and display recent searches from localStorage\n    const recentSearches = this.getRecentSearches();\n    const listContainer = document.getElementById('recent-searches-list');\n    if (listContainer && recentSearches.length > 0) {\n      listContainer.innerHTML = '';\n      recentSearches.forEach(search => {\n        const item = document.createElement('button');\n        item.className = 'text-left text-sm text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white py-1';\n        item.textContent = search;\n        item.addEventListener('click', () => {\n          this.input.value = search;\n          this.handleInput(search);\n        });\n        listContainer.appendChild(item);\n      });\n    }\n  }\n  saveRecentSearch(query) {\n    let recent = this.getRecentSearches();\n    recent = recent.filter(item => item !== query);\n    recent.unshift(query);\n    recent = recent.slice(0, 5); // Keep only 5 recent searches\n\n    localStorage.setItem('recentSearches', JSON.stringify(recent));\n  }\n  getRecentSearches() {\n    try {\n      return JSON.parse(localStorage.getItem('recentSearches') || '[]');\n    } catch {\n      return [];\n    }\n  }\n  clearRecentSearches() {\n    localStorage.removeItem('recentSearches');\n    this.showRecentSearches();\n  }\n}\n\n// Animation Manager Class\nclass AnimationManager {\n  constructor() {\n    this.observers = new Map();\n    this.setupIntersectionObserver();\n  }\n  setupIntersectionObserver() {\n    if (!('IntersectionObserver' in window)) return;\n    const options = {\n      root: null,\n      rootMargin: '-10% 0px',\n      threshold: 0.1\n    };\n    this.scrollObserver = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          this.triggerAnimation(entry.target);\n        }\n      });\n    }, options);\n  }\n  initializeScrollAnimations() {\n    const elements = document.querySelectorAll('[data-animate]');\n    elements.forEach(element => {\n      this.scrollObserver.observe(element);\n    });\n  }\n  triggerAnimation(element) {\n    const animationType = element.dataset.animate;\n    const delay = element.dataset.delay || 0;\n    setTimeout(() => {\n      switch (animationType) {\n        case 'fade-in':\n          element.classList.add('animate-fade-in');\n          break;\n        case 'slide-up':\n          element.classList.add('animate-slide-up');\n          break;\n        case 'slide-in-left':\n          element.classList.add('animate-slide-in-left');\n          break;\n        case 'slide-in-right':\n          element.classList.add('animate-slide-in-right');\n          break;\n        case 'scale-in':\n          element.classList.add('animate-scale-in');\n          break;\n      }\n    }, delay);\n\n    // Stop observing this element\n    this.scrollObserver.unobserve(element);\n  }\n  handleScrollAnimations() {\n    // Handle scroll-based animations that need continuous updates\n  }\n  triggerDelayedAnimations() {\n    // Trigger animations that should happen after page load\n    const delayedElements = document.querySelectorAll('[data-animate-delay]');\n    delayedElements.forEach(element => {\n      const delay = parseInt(element.dataset.animateDelay) || 0;\n      setTimeout(() => {\n        element.classList.add('animate-fade-in');\n      }, delay);\n    });\n  }\n}\n\n// Keyboard Manager Class\nclass KeyboardManager {\n  constructor() {\n    this.shortcuts = new Map();\n    this.setupGlobalShortcuts();\n    this.setupEventListeners();\n  }\n  setupGlobalShortcuts() {\n    // Search shortcut\n    this.addShortcut('ctrl+k', () => {\n      if (window.uiEnhancements?.searchManager) {\n        window.uiEnhancements.searchManager.open();\n      }\n    });\n\n    // Escape to close modals\n    this.addShortcut('escape', () => {\n      if (window.uiEnhancements?.modalManager?.activeModal) {\n        window.uiEnhancements.modalManager.close(window.uiEnhancements.modalManager.activeModal.id);\n      }\n      if (window.uiEnhancements?.searchManager?.modal?.classList.contains('search-modal-open')) {\n        window.uiEnhancements.searchManager.close();\n      }\n    });\n  }\n  addShortcut(key, handler) {\n    this.shortcuts.set(key.toLowerCase(), handler);\n  }\n  setupEventListeners() {\n    document.addEventListener('keydown', e => {\n      const key = this.getKeyString(e);\n      const handler = this.shortcuts.get(key);\n      if (handler) {\n        // Don't trigger shortcuts when typing in inputs\n        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {\n          // Only allow escape key in inputs\n          if (key === 'escape') {\n            e.preventDefault();\n            handler(e);\n          }\n          return;\n        }\n        e.preventDefault();\n        handler(e);\n      }\n    });\n  }\n  getKeyString(e) {\n    let key = e.key.toLowerCase();\n    if (e.ctrlKey) key = `ctrl+${key}`;\n    if (e.altKey) key = `alt+${key}`;\n    if (e.shiftKey && key.length > 1) key = `shift+${key}`;\n    return key;\n  }\n}\n\n// Theme Manager Class\nclass ThemeManager {\n  constructor() {\n    this.currentTheme = localStorage.getItem('theme') || 'dark';\n    this.applyTheme(this.currentTheme);\n  }\n  toggleTheme() {\n    this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';\n    this.applyTheme(this.currentTheme);\n    localStorage.setItem('theme', this.currentTheme);\n  }\n  applyTheme(theme) {\n    document.documentElement.setAttribute('data-theme', theme);\n\n    // Update theme color meta tag\n    const themeColorMeta = document.querySelector('meta[name=\"theme-color\"]');\n    if (themeColorMeta) {\n      themeColorMeta.setAttribute('content', theme === 'dark' ? '#0f172a' : '#ffffff');\n    }\n  }\n  getTheme() {\n    return this.currentTheme;\n  }\n  setTheme(theme) {\n    if (['light', 'dark'].includes(theme)) {\n      this.currentTheme = theme;\n      this.applyTheme(theme);\n      localStorage.setItem('theme', theme);\n    }\n  }\n}\n\n// Global Functions\nwindow.toggleSearchModal = () => {\n  if (!window.uiEnhancements) return;\n  const searchManager = window.uiEnhancements.searchManager;\n  const isOpen = searchManager.modal?.classList.contains('search-modal-open');\n  if (isOpen) {\n    searchManager.close();\n  } else {\n    searchManager.open();\n  }\n};\nwindow.closeSearchModal = () => {\n  if (window.uiEnhancements?.searchManager) {\n    window.uiEnhancements.searchManager.close();\n  }\n};\nwindow.clearRecentSearches = () => {\n  if (window.uiEnhancements?.searchManager) {\n    window.uiEnhancements.searchManager.clearRecentSearches();\n  }\n};\nwindow.showToast = (message, type = 'info', options = {}) => {\n  if (window.uiEnhancements?.toastManager) {\n    return window.uiEnhancements.toastManager.show(message, type, options);\n  }\n};\n\n// Initialize UI Enhancements\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.uiEnhancements = new UIEnhancements();\n\n  // Initialize search manager\n  if (window.uiEnhancements.searchManager) {\n    window.uiEnhancements.searchManager.initialize();\n  }\n  console.log('UI Enhancements initialized successfully');\n});\n\n// Export for module usage\nif ( true && module.exports) {\n  module.exports = {\n    UIEnhancements,\n    ToastManager,\n    ModalManager,\n    ScrollManager,\n    LoadingManager,\n    SearchManager,\n    AnimationManager,\n    KeyboardManager,\n    ThemeManager\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///497\n\n}");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__(497));
/******/ }
]);