/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 58:
/***/ (() => {

eval("{(function () {\n  const doc = document;\n  const NAV_SCROLL_THRESHOLD = 32;\n  const NAV_HIDE_THRESHOLD = 160;\n  let searchModal = null;\n  let searchModalInput = null;\n  let previouslyFocused = null;\n  function initNavigation() {\n    const nav = doc.querySelector('[data-nav-shell]');\n    if (!nav) {\n      return;\n    }\n    let lastY = window.scrollY;\n    const handleScroll = () => {\n      const currentY = window.scrollY;\n      if (currentY > NAV_SCROLL_THRESHOLD) {\n        nav.classList.add('is-scrolled');\n      } else {\n        nav.classList.remove('is-scrolled');\n      }\n      if (currentY > NAV_HIDE_THRESHOLD && currentY > lastY) {\n        nav.classList.add('is-hidden');\n      } else {\n        nav.classList.remove('is-hidden');\n      }\n      lastY = currentY;\n    };\n    window.addEventListener('scroll', handleScroll, {\n      passive: true\n    });\n    handleScroll();\n  }\n  function initRevealAnimations() {\n    const elements = doc.querySelectorAll('[data-animate], [data-animate-card], .scroll-reveal, .scroll-reveal-left, .scroll-reveal-right');\n    if (!elements.length || !('IntersectionObserver' in window)) {\n      elements.forEach(el => el.classList.add('is-visible'));\n      return;\n    }\n    const observer = new IntersectionObserver((entries, obs) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('is-visible');\n          obs.unobserve(entry.target);\n        }\n      });\n    }, {\n      rootMargin: '0px 0px -10% 0px',\n      threshold: 0.15\n    });\n    elements.forEach(el => observer.observe(el));\n  }\n  function initStarfield() {\n    const body = doc.getElementById('app-body');\n    const cursor = doc.querySelector('.cursor-blackhole');\n    const starContainer = body ? body.querySelector('.starfield-layer') : null;\n    const prefersReducedMotion = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    const prefersCoarsePointer = window.matchMedia && window.matchMedia('(pointer: coarse)').matches;\n    if (!body || !starContainer || !cursor || prefersCoarsePointer) {\n      return;\n    }\n    const starCount = prefersReducedMotion ? 24 : 80;\n    const stars = [];\n    for (let i = 0; i < starCount; i += 1) {\n      const star = doc.createElement('span');\n      star.className = 'star';\n      star.style.left = `${Math.random() * 100}%`;\n      star.style.top = `${Math.random() * 100}%`;\n      star.style.opacity = (0.4 + Math.random() * 0.55).toFixed(2);\n      starContainer.appendChild(star);\n      stars.push(star);\n    }\n    let latestPointerEvent = null;\n    let rafId = null;\n    const update = () => {\n      if (!latestPointerEvent) {\n        rafId = null;\n        return;\n      }\n      const {\n        clientX,\n        clientY\n      } = latestPointerEvent;\n      cursor.style.opacity = '1';\n      cursor.style.transform = `translate(${clientX}px, ${clientY}px) scale(1)`;\n      if (!prefersReducedMotion) {\n        stars.forEach(star => {\n          const rect = star.getBoundingClientRect();\n          const starX = rect.left + rect.width / 2;\n          const starY = rect.top + rect.height / 2;\n          const distX = (clientX - starX) * 0.09;\n          const distY = (clientY - starY) * 0.09;\n          star.style.transform = `translate(${distX}px, ${distY}px)`;\n          const opacity = Math.max(0.18, 1 - (Math.abs(distX) + Math.abs(distY)) / 90);\n          star.style.opacity = opacity.toFixed(2);\n        });\n      }\n      rafId = null;\n    };\n    const scheduleUpdate = event => {\n      latestPointerEvent = event;\n      if (rafId === null) {\n        rafId = window.requestAnimationFrame(update);\n      }\n    };\n    doc.addEventListener('pointermove', scheduleUpdate, {\n      passive: true\n    });\n    doc.addEventListener('pointerleave', () => {\n      latestPointerEvent = null;\n      cursor.style.opacity = '0';\n    });\n  }\n  function initSearchModal() {\n    searchModal = doc.getElementById('search-modal');\n    if (!searchModal) {\n      return;\n    }\n    searchModalInput = searchModal.querySelector('.search-modal__input');\n    searchModal.addEventListener('mousedown', event => {\n      if (event.target === searchModal) {\n        closeSearchModal();\n      }\n    });\n    doc.addEventListener('keydown', event => {\n      const key = event.key.toLowerCase();\n      if ((event.ctrlKey || event.metaKey) && key === 'k') {\n        const active = doc.activeElement;\n        const isEditable = active && (active.tagName === 'INPUT' || active.tagName === 'TEXTAREA' || active.isContentEditable);\n        if (isEditable) {\n          return;\n        }\n        event.preventDefault();\n        window.dispatchEvent(new CustomEvent('open-search'));\n      }\n      if (key === 'escape' && searchModal.classList.contains('is-visible')) {\n        window.dispatchEvent(new CustomEvent('close-search'));\n      }\n    });\n    const suggestions = searchModal.querySelectorAll('[data-suggestion]');\n    suggestions.forEach(button => {\n      button.addEventListener('click', () => {\n        if (!searchModalInput) {\n          return;\n        }\n        searchModalInput.value = button.getAttribute('data-suggestion');\n        searchModalInput.dispatchEvent(new Event('input'));\n        searchModalInput.focus();\n      });\n    });\n  }\n  function openSearchModal() {\n    if (!searchModal) {\n      return;\n    }\n    previouslyFocused = doc.activeElement;\n    window.searchAutocomplete?.reset();\n    window.dispatchEvent(new CustomEvent('openSearchModal'));\n    searchModal.removeAttribute('hidden');\n    searchModal.setAttribute('aria-hidden', 'false');\n    requestAnimationFrame(() => {\n      searchModal.classList.add('is-visible');\n      searchModalInput?.focus({\n        preventScroll: true\n      });\n    });\n  }\n  function initScrollProgress() {\n    const progressBar = doc.querySelector('[data-scroll-progress]');\n    if (!progressBar) {\n      return;\n    }\n    const update = () => {\n      const scrollTop = window.pageYOffset || doc.documentElement.scrollTop || 0;\n      const documentHeight = doc.documentElement.scrollHeight - window.innerHeight;\n      const progress = documentHeight > 0 ? scrollTop / documentHeight * 100 : 0;\n      progressBar.style.width = `${progress}%`;\n      progressBar.setAttribute('aria-valuenow', progress.toFixed(0));\n      progressBar.setAttribute('aria-valuetext', `${Math.round(progress)}%`);\n    };\n    const schedule = () => window.requestAnimationFrame(update);\n    window.addEventListener('scroll', schedule, {\n      passive: true\n    });\n    window.addEventListener('resize', schedule);\n    update();\n  }\n  function initBackToTop() {\n    const backToTopBtn = doc.getElementById('back-to-top');\n    if (!backToTopBtn) {\n      return;\n    }\n    const toggleVisibility = () => {\n      const shouldShow = window.pageYOffset > 400;\n      backToTopBtn.classList.toggle('is-visible', shouldShow);\n      backToTopBtn.setAttribute('aria-hidden', (!shouldShow).toString());\n      backToTopBtn.setAttribute('tabindex', shouldShow ? '0' : '-1');\n    };\n    backToTopBtn.addEventListener('click', () => {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    });\n    const schedule = () => window.requestAnimationFrame(toggleVisibility);\n    window.addEventListener('scroll', schedule, {\n      passive: true\n    });\n    toggleVisibility();\n  }\n  function closeSearchModal() {\n    if (!searchModal) {\n      return;\n    }\n    searchModal.classList.remove('is-visible');\n    searchModalInput?.blur();\n    window.dispatchEvent(new CustomEvent('closeSearchModal'));\n    searchModal.setAttribute('aria-hidden', 'true');\n    window.setTimeout(() => {\n      if (!searchModal.classList.contains('is-visible')) {\n        searchModal.setAttribute('hidden', '');\n      }\n    }, 200);\n    if (previouslyFocused && typeof previouslyFocused.focus === 'function') {\n      previouslyFocused.focus({\n        preventScroll: true\n      });\n    }\n  }\n  window.openSearchModal = openSearchModal;\n  window.closeSearchModal = closeSearchModal;\n  document.addEventListener('DOMContentLoaded', () => {\n    if (doc.body) {\n      doc.body.classList.add('reveal-ready');\n    }\n    initNavigation();\n    window.requestAnimationFrame(() => {\n      initRevealAnimations();\n    });\n    const deferStarfield = () => window.requestAnimationFrame(initStarfield);\n    if ('requestIdleCallback' in window) {\n      requestIdleCallback(deferStarfield, {\n        timeout: 1200\n      });\n    } else {\n      setTimeout(deferStarfield, 120);\n    }\n    initSearchModal();\n    initScrollProgress();\n    initBackToTop();\n  });\n  window.addEventListener('open-search', openSearchModal);\n  window.addEventListener('close-search', closeSearchModal);\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///58\n\n}");

/***/ }),

/***/ 971:
/***/ (() => {

eval("{// Theme Handler - CSP-compliant dark mode management\n(function () {\n  'use strict';\n\n  // Initialize theme management\n  function initTheme() {\n    const body = document.getElementById('app-body');\n    if (!body) return;\n\n    // Get saved theme or default to dark\n    const savedTheme = localStorage.getItem('darkMode');\n    const isDarkMode = savedTheme === 'true' || savedTheme === null;\n\n    // Apply initial theme\n    document.documentElement.classList.toggle('dark', isDarkMode);\n    body.classList.toggle('dark', isDarkMode);\n\n    // Store the theme state for Alpine.js components\n    window.themeState = {\n      darkMode: isDarkMode,\n      toggle: function () {\n        this.darkMode = !this.darkMode;\n        localStorage.setItem('darkMode', this.darkMode);\n        document.documentElement.classList.toggle('dark', this.darkMode);\n        body.classList.toggle('dark', this.darkMode);\n\n        // Dispatch custom event for other components\n        document.dispatchEvent(new CustomEvent('theme-changed', {\n          detail: {\n            darkMode: this.darkMode\n          }\n        }));\n      }\n    };\n  }\n\n  // Initialize when DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initTheme);\n  } else {\n    initTheme();\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcxLmpzIiwibmFtZXMiOlsiaW5pdFRoZW1lIiwiYm9keSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzYXZlZFRoZW1lIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImlzRGFya01vZGUiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJ3aW5kb3ciLCJ0aGVtZVN0YXRlIiwiZGFya01vZGUiLCJzZXRJdGVtIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jlc3QvLi9zdGF0aWMvanMvY29yZS90aGVtZS1oYW5kbGVyLmpzPzRjZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlbWUgSGFuZGxlciAtIENTUC1jb21wbGlhbnQgZGFyayBtb2RlIG1hbmFnZW1lbnRcclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgdGhlbWUgbWFuYWdlbWVudFxyXG4gICAgZnVuY3Rpb24gaW5pdFRoZW1lKCkge1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwLWJvZHknKTtcclxuICAgICAgICBpZiAoIWJvZHkpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gR2V0IHNhdmVkIHRoZW1lIG9yIGRlZmF1bHQgdG8gZGFya1xyXG4gICAgICAgIGNvbnN0IHNhdmVkVGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGFya01vZGUnKTtcclxuICAgICAgICBjb25zdCBpc0RhcmtNb2RlID0gc2F2ZWRUaGVtZSA9PT0gJ3RydWUnIHx8IHNhdmVkVGhlbWUgPT09IG51bGw7XHJcblxyXG4gICAgICAgIC8vIEFwcGx5IGluaXRpYWwgdGhlbWVcclxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyaycsIGlzRGFya01vZGUpO1xyXG4gICAgICAgIGJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyaycsIGlzRGFya01vZGUpO1xyXG5cclxuICAgICAgICAvLyBTdG9yZSB0aGUgdGhlbWUgc3RhdGUgZm9yIEFscGluZS5qcyBjb21wb25lbnRzXHJcbiAgICAgICAgd2luZG93LnRoZW1lU3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGRhcmtNb2RlOiBpc0RhcmtNb2RlLFxyXG4gICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXJrTW9kZSA9ICF0aGlzLmRhcmtNb2RlO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RhcmtNb2RlJywgdGhpcy5kYXJrTW9kZSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyaycsIHRoaXMuZGFya01vZGUpO1xyXG4gICAgICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrJywgdGhpcy5kYXJrTW9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggY3VzdG9tIGV2ZW50IGZvciBvdGhlciBjb21wb25lbnRzXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgndGhlbWUtY2hhbmdlZCcsIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHsgZGFya01vZGU6IHRoaXMuZGFya01vZGUgfVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHdoZW4gRE9NIGlzIHJlYWR5XHJcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXRUaGVtZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGluaXRUaGVtZSgpO1xyXG4gICAgfVxyXG59KSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxDQUFDLFlBQVc7RUFDUixZQUFZOztFQUVaO0VBQ0EsU0FBU0EsU0FBU0EsQ0FBQSxFQUFHO0lBQ2pCLE1BQU1DLElBQUksR0FBR0MsUUFBUSxDQUFDQyxjQUFjLENBQUMsVUFBVSxDQUFDO0lBQ2hELElBQUksQ0FBQ0YsSUFBSSxFQUFFOztJQUVYO0lBQ0EsTUFBTUcsVUFBVSxHQUFHQyxZQUFZLENBQUNDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbkQsTUFBTUMsVUFBVSxHQUFHSCxVQUFVLEtBQUssTUFBTSxJQUFJQSxVQUFVLEtBQUssSUFBSTs7SUFFL0Q7SUFDQUYsUUFBUSxDQUFDTSxlQUFlLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE1BQU0sRUFBRUgsVUFBVSxDQUFDO0lBQzdETixJQUFJLENBQUNRLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE1BQU0sRUFBRUgsVUFBVSxDQUFDOztJQUV6QztJQUNBSSxNQUFNLENBQUNDLFVBQVUsR0FBRztNQUNoQkMsUUFBUSxFQUFFTixVQUFVO01BQ3BCRyxNQUFNLEVBQUUsU0FBQUEsQ0FBQSxFQUFXO1FBQ2YsSUFBSSxDQUFDRyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUNBLFFBQVE7UUFDOUJSLFlBQVksQ0FBQ1MsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUNELFFBQVEsQ0FBQztRQUMvQ1gsUUFBUSxDQUFDTSxlQUFlLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUNHLFFBQVEsQ0FBQztRQUNoRVosSUFBSSxDQUFDUSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDRyxRQUFRLENBQUM7O1FBRTVDO1FBQ0FYLFFBQVEsQ0FBQ2EsYUFBYSxDQUFDLElBQUlDLFdBQVcsQ0FBQyxlQUFlLEVBQUU7VUFDcERDLE1BQU0sRUFBRTtZQUFFSixRQUFRLEVBQUUsSUFBSSxDQUFDQTtVQUFTO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO01BQ1A7SUFDSixDQUFDO0VBQ0w7O0VBRUE7RUFDQSxJQUFJWCxRQUFRLENBQUNnQixVQUFVLEtBQUssU0FBUyxFQUFFO0lBQ25DaEIsUUFBUSxDQUFDaUIsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUVuQixTQUFTLENBQUM7RUFDNUQsQ0FBQyxNQUFNO0lBQ0hBLFNBQVMsQ0FBQyxDQUFDO0VBQ2Y7QUFDSixDQUFDLEVBQUUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///971\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			114: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkbest"] = self["webpackChunkbest"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__(971);
/******/ 	var __webpack_exports__ = __webpack_require__(58);
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;