/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 271:
/***/ ((module) => {

eval("{/**\r\n * Privacy-Compliant Analytics System\r\n * ====================================\r\n *\r\n * GDPR/KVKK compliant frontend analytics tracking\r\n * Features:\r\n * - No personal data collection\r\n * - Session-based anonymous tracking\r\n * - User journey tracking\r\n * - Conversion funnel analysis\r\n * - A/B testing support\r\n * - Opt-out capability\r\n */\n\nclass PrivacyAnalytics {\n  constructor() {\n    this.isOptedOut = localStorage.getItem('analytics_opt_out') === 'true';\n    this.sessionId = this.getOrCreateSessionId();\n    this.currentJourneyId = null;\n    this.currentTest = {};\n\n    // GDPR consent status\n    this.gdprConsent = localStorage.getItem('gdpr_consent') === 'true';\n\n    // Initialize if user hasn't opted out\n    if (!this.isOptedOut) {\n      this.init();\n    }\n  }\n  init() {\n    console.log('PrivacyAnalytics initialized');\n\n    // Track page view automatically\n    this.trackPageView();\n\n    // Set up event listeners\n    this.setupEventListeners();\n\n    // Initialize journey tracking\n    this.startJourney('site_visit');\n\n    // Track performance metrics\n    this.trackPerformanceMetrics();\n  }\n  getOrCreateSessionId() {\n    let sessionId = sessionStorage.getItem('analytics_session_id');\n    if (!sessionId) {\n      // Generate anonymous session ID\n      sessionId = 'anon_' + this.generateRandomId();\n      sessionStorage.setItem('analytics_session_id', sessionId);\n    }\n    return sessionId;\n  }\n  generateRandomId() {\n    return Math.random().toString(36).substr(2, 16) + Date.now().toString(36);\n  }\n\n  // GDPR Compliance Methods\n  // ======================\n\n  optOut() {\n    localStorage.setItem('analytics_opt_out', 'true');\n    this.isOptedOut = true;\n    console.log('Analytics tracking opted out');\n  }\n  optIn() {\n    localStorage.removeItem('analytics_opt_out');\n    this.isOptedOut = false;\n    console.log('Analytics tracking opted in');\n    this.init();\n  }\n  setGDPRConsent(consent) {\n    this.gdprConsent = consent;\n    localStorage.setItem('gdpr_consent', consent.toString());\n\n    // Send consent status to backend\n    this.sendEvent('gdpr_consent', {\n      consent: consent,\n      timestamp: new Date().toISOString()\n    });\n  }\n  getPrivacyInfo() {\n    return {\n      isOptedOut: this.isOptedOut,\n      gdprConsent: this.gdprConsent,\n      sessionId: this.sessionId,\n      dataCollected: ['Anonymous session identifiers', 'Page paths and titles', 'Click events and interactions', 'Performance timing data', 'Device type (mobile/desktop)', 'Browser family (aggregated)'],\n      dataNotCollected: ['Personal identification', 'Email addresses', 'Precise location', 'Cross-site tracking', 'Sensitive categories']\n    };\n  }\n\n  // Core Tracking Methods\n  // ====================\n\n  trackPageView(path = null, title = null) {\n    if (this.isOptedOut) return;\n    const data = {\n      path: path || window.location.pathname,\n      title: title || document.title,\n      referrer: this.getSanitizedReferrer(),\n      timestamp: new Date().toISOString()\n    };\n    this.sendToAPI('/api/analytics/track-event/', {\n      event_name: 'page_view',\n      event_data: data\n    });\n  }\n  trackEvent(eventName, eventData = {}) {\n    if (this.isOptedOut) return;\n\n    // Sanitize event data\n    const sanitizedData = this.sanitizeEventData(eventData);\n    this.sendToAPI('/api/analytics/track-event/', {\n      event_name: eventName,\n      event_data: {\n        ...sanitizedData,\n        timestamp: new Date().toISOString(),\n        page_path: window.location.pathname\n      }\n    });\n  }\n  trackConversion(conversionType, conversionValue = null) {\n    if (this.isOptedOut) return;\n    this.sendToAPI('/api/analytics/track-conversion/', {\n      conversion_type: conversionType,\n      conversion_value: conversionValue\n    });\n  }\n\n  // User Journey Tracking\n  // ====================\n\n  startJourney(journeyType) {\n    if (this.isOptedOut) return;\n    this.sendToAPI('/api/analytics/track-journey/', {\n      step_name: `journey_start_${journeyType}`,\n      journey_id: this.currentJourneyId\n    }).then(response => {\n      if (response.success) {\n        this.currentJourneyId = response.journey_id;\n      }\n    });\n  }\n  trackJourneyStep(stepName) {\n    if (this.isOptedOut) return;\n    this.sendToAPI('/api/analytics/track-journey/', {\n      step_name: stepName,\n      journey_id: this.currentJourneyId\n    });\n  }\n\n  // Conversion Funnel Tracking\n  // =========================\n\n  trackFunnelStep(funnelName, stepName, stepOrder) {\n    if (this.isOptedOut) return;\n    this.sendToAPI('/api/analytics/track-funnel/', {\n      funnel_name: funnelName,\n      step_name: stepName,\n      step_order: stepOrder\n    });\n\n    // Also track as journey step\n    this.trackJourneyStep(`${funnelName}_${stepName}`);\n  }\n\n  // Contact Form Funnel (4-step implementation)\n  trackContactFunnel(step) {\n    const funnelSteps = {\n      'view_contact': {\n        name: 'View Contact Page',\n        order: 1\n      },\n      'start_form': {\n        name: 'Start Filling Form',\n        order: 2\n      },\n      'complete_form': {\n        name: 'Complete Form',\n        order: 3\n      },\n      'submit_form': {\n        name: 'Submit Form',\n        order: 4\n      }\n    };\n    if (funnelSteps[step]) {\n      this.trackFunnelStep('contact', funnelSteps[step].name, funnelSteps[step].order);\n\n      // Track conversion on final step\n      if (step === 'submit_form') {\n        this.trackConversion('contact_form_submission');\n      }\n    }\n  }\n\n  // A/B Testing\n  // ===========\n\n  getABTestVariant(testName, variants = ['A', 'B']) {\n    if (this.isOptedOut) {\n      return variants[0]; // Return default variant\n    }\n\n    // Check if already assigned\n    if (this.currentTest[testName]) {\n      return this.currentTest[testName];\n    }\n    return this.sendToAPI('/api/analytics/get-ab-variant/', {\n      test_name: testName,\n      variants: variants\n    }, 'GET').then(response => {\n      if (response.success) {\n        this.currentTest[testName] = response.variant;\n        return response.variant;\n      }\n      return variants[0];\n    });\n  }\n  trackABTestConversion(testName, conversionType = 'conversion') {\n    if (this.isOptedOut) return;\n    this.sendToAPI('/api/analytics/track-ab-conversion/', {\n      test_name: testName,\n      conversion_type: conversionType\n    });\n  }\n\n  // CTA Button A/B Test Implementation\n  async runCTAButtonTest() {\n    try {\n      const variant = await this.getABTestVariant('cta_button_style', ['default', 'bright', 'minimal']);\n\n      // Apply variant styling\n      const ctaButtons = document.querySelectorAll('.cta-button, .btn-primary');\n      ctaButtons.forEach(button => {\n        switch (variant) {\n          case 'bright':\n            button.classList.add('cta-variant-bright');\n            break;\n          case 'minimal':\n            button.classList.add('cta-variant-minimal');\n            break;\n          default:\n            button.classList.add('cta-variant-default');\n        }\n\n        // Track clicks on CTA buttons\n        button.addEventListener('click', () => {\n          this.trackABTestConversion('cta_button_style', 'click');\n          this.trackEvent('cta_click', {\n            variant: variant,\n            button_text: button.textContent.trim(),\n            button_location: this.getElementLocation(button)\n          });\n        });\n      });\n      return variant;\n    } catch (error) {\n      console.error('A/B test error:', error);\n      return 'default';\n    }\n  }\n\n  // Event Listeners Setup\n  // ====================\n\n  setupEventListeners() {\n    // Track form interactions\n    document.addEventListener('focusin', e => {\n      if (e.target.matches('input, textarea, select')) {\n        this.trackEvent('form_field_focus', {\n          field_type: e.target.type || e.target.tagName.toLowerCase(),\n          field_name: e.target.name || 'unnamed',\n          form_id: e.target.closest('form')?.id || 'no_form'\n        });\n      }\n    });\n\n    // Track form submissions\n    document.addEventListener('submit', e => {\n      const form = e.target;\n      if (form.tagName === 'FORM') {\n        this.trackEvent('form_submission', {\n          form_id: form.id || 'unnamed_form',\n          form_action: form.action || 'no_action',\n          field_count: form.querySelectorAll('input, textarea, select').length\n        });\n\n        // Contact form specific tracking\n        if (form.id === 'contact-form' || form.classList.contains('contact-form')) {\n          this.trackContactFunnel('submit_form');\n        }\n      }\n    });\n\n    // Track important link clicks\n    document.addEventListener('click', e => {\n      const link = e.target.closest('a');\n      if (link) {\n        this.trackEvent('link_click', {\n          link_text: link.textContent.trim(),\n          link_href: link.href,\n          link_target: link.target || '_self',\n          is_external: !link.href.startsWith(window.location.origin)\n        });\n      }\n    });\n\n    // Track scroll depth\n    let maxScroll = 0;\n    window.addEventListener('scroll', this.throttle(() => {\n      const scrollPercentage = Math.round(window.scrollY / (document.body.scrollHeight - window.innerHeight) * 100);\n      if (scrollPercentage > maxScroll && scrollPercentage % 25 === 0) {\n        maxScroll = scrollPercentage;\n        this.trackEvent('scroll_depth', {\n          percentage: scrollPercentage,\n          page_height: document.body.scrollHeight,\n          viewport_height: window.innerHeight\n        });\n      }\n    }, 1000));\n\n    // Track page visibility\n    document.addEventListener('visibilitychange', () => {\n      this.trackEvent('page_visibility', {\n        visibility_state: document.visibilityState,\n        hidden: document.hidden\n      });\n    });\n  }\n\n  // Performance Tracking\n  // ===================\n\n  trackPerformanceMetrics() {\n    // Track Core Web Vitals using existing performance.min.js\n    if (window.performanceTracker) {\n      // Performance tracking is handled by the existing system\n      return;\n    }\n\n    // Fallback performance tracking\n    window.addEventListener('load', () => {\n      setTimeout(() => {\n        const navigation = performance.getEntriesByType('navigation')[0];\n        if (navigation) {\n          this.trackEvent('performance_metrics', {\n            load_time: Math.round(navigation.loadEventEnd - navigation.fetchStart),\n            dom_content_loaded: Math.round(navigation.domContentLoadedEventEnd - navigation.fetchStart),\n            first_byte: Math.round(navigation.responseStart - navigation.fetchStart)\n          });\n        }\n      }, 1000);\n    });\n  }\n\n  // Utility Methods\n  // ==============\n\n  getSanitizedReferrer() {\n    const referrer = document.referrer;\n    if (!referrer) return 'direct';\n    if (referrer.includes('google.com')) return 'search';\n    if (referrer.includes('facebook.com') || referrer.includes('twitter.com')) return 'social';\n    if (referrer.startsWith(window.location.origin)) return 'internal';\n    return 'external';\n  }\n  sanitizeEventData(data) {\n    const sanitized = {};\n    const sensitiveKeys = ['password', 'email', 'phone', 'credit', 'ssn'];\n    for (const [key, value] of Object.entries(data)) {\n      // Skip sensitive data\n      if (sensitiveKeys.some(sensitive => key.toLowerCase().includes(sensitive))) {\n        continue;\n      }\n\n      // Truncate long strings\n      if (typeof value === 'string' && value.length > 200) {\n        sanitized[key] = value.substring(0, 200) + '...';\n      } else {\n        sanitized[key] = value;\n      }\n    }\n    return sanitized;\n  }\n  getElementLocation(element) {\n    const rect = element.getBoundingClientRect();\n    return {\n      x: Math.round(rect.left),\n      y: Math.round(rect.top),\n      width: Math.round(rect.width),\n      height: Math.round(rect.height)\n    };\n  }\n  throttle(func, limit) {\n    let inThrottle;\n    return function () {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n  async sendToAPI(endpoint, data, method = 'POST') {\n    try {\n      const response = await fetch(endpoint, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': this.getCSRFToken()\n        },\n        body: method === 'POST' ? JSON.stringify(data) : null\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Analytics API error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  getCSRFToken() {\n    return document.querySelector('[name=csrfmiddlewaretoken]')?.value || document.querySelector('meta[name=csrf-token]')?.getAttribute('content') || '';\n  }\n\n  // Public API for manual tracking\n  // =============================\n\n  // Contact form specific methods\n  startContactForm() {\n    this.trackContactFunnel('start_form');\n  }\n  completeContactForm() {\n    this.trackContactFunnel('complete_form');\n  }\n\n  // Manual event tracking\n  track(eventName, eventData = {}) {\n    return this.trackEvent(eventName, eventData);\n  }\n\n  // Manual conversion tracking\n  convert(conversionType, value = null) {\n    return this.trackConversion(conversionType, value);\n  }\n}\n\n// Global instance\nwindow.privacyAnalytics = new PrivacyAnalytics();\n\n// Expose GDPR compliance methods globally\nwindow.analyticsOptOut = () => window.privacyAnalytics.optOut();\nwindow.analyticsOptIn = () => window.privacyAnalytics.optIn();\nwindow.setAnalyticsGDPRConsent = consent => window.privacyAnalytics.setGDPRConsent(consent);\nwindow.getAnalyticsPrivacyInfo = () => window.privacyAnalytics.getPrivacyInfo();\n\n// Initialize A/B tests\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Run CTA button A/B test\n  window.privacyAnalytics.runCTAButtonTest();\n\n  // Track contact page visit\n  if (window.location.pathname.includes('/contact')) {\n    window.privacyAnalytics.trackContactFunnel('view_contact');\n  }\n});\n\n// Export for module systems\nif ( true && module.exports) {\n  module.exports = PrivacyAnalytics;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///271\n\n}");

/***/ }),

/***/ 779:
/***/ (() => {

eval("{class PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      lcp: null,\n      fid: null,\n      cls: null,\n      fcp: null,\n      ttfb: null,\n      domContentLoaded: null,\n      loadComplete: null\n    }, this.observers = new Map(), this.networkInfo = null, this.isRecording = !0, this.reportingEndpoint = \"/api/performance/\", this.init();\n  }\n  init() {\n    this.setupCoreWebVitals(), this.setupResourceMonitoring(), this.setupNetworkMonitoring(), this.setupMemoryMonitoring(), this.setupServiceWorkerIntegration(), \"loading\" === document.readyState ? document.addEventListener(\"DOMContentLoaded\", () => this.onDOMReady()) : this.onDOMReady(), this.setupReporting();\n  }\n  setupCoreWebVitals() {\n    this.observeLCP(), this.observeFID(), this.observeCLS(), this.observeFCP(), this.measureTTFB();\n  }\n  observeLCP() {\n    if (\"PerformanceObserver\" in window) try {\n      const e = new PerformanceObserver(e => {\n        const t = e.getEntries(),\n          r = t[t.length - 1];\n        this.metrics.lcp = Math.round(r.startTime), this.metrics.lcp > 2500 && this.reportMetric(\"lcp_slow\", this.metrics.lcp);\n      });\n      e.observe({\n        type: \"largest-contentful-paint\",\n        buffered: !0\n      }), this.observers.set(\"lcp\", e);\n    } catch (e) {\n      console.warn(\"LCP measurement not supported:\", e);\n    }\n  }\n  observeFID() {\n    if (\"PerformanceObserver\" in window) try {\n      const e = new PerformanceObserver(e => {\n        e.getEntries().forEach(e => {\n          this.metrics.fid = Math.round(e.processingStart - e.startTime), this.metrics.fid > 100 && this.reportMetric(\"fid_slow\", this.metrics.fid);\n        });\n      });\n      e.observe({\n        type: \"first-input\",\n        buffered: !0\n      }), this.observers.set(\"fid\", e);\n    } catch (e) {\n      console.warn(\"FID measurement not supported:\", e);\n    }\n  }\n  observeCLS() {\n    if (\"PerformanceObserver\" in window) try {\n      let e = 0,\n        t = [];\n      const r = new PerformanceObserver(r => {\n        r.getEntries().forEach(r => {\n          r.hadRecentInput || (t.push(r), e += r.value);\n        }), this.metrics.cls = Math.round(1e3 * e) / 1e3, this.metrics.cls > .1 && (this.reportMetric(\"cls_high\", this.metrics.cls), this.analyzeCLSCauses(t));\n      });\n      r.observe({\n        type: \"layout-shift\",\n        buffered: !0\n      }), this.observers.set(\"cls\", r);\n    } catch (e) {\n      console.warn(\"CLS measurement not supported:\", e);\n    }\n  }\n  observeFCP() {\n    if (\"PerformanceObserver\" in window) try {\n      const e = new PerformanceObserver(e => {\n        const t = e.getEntries(),\n          r = t[t.length - 1];\n        this.metrics.fcp = Math.round(r.startTime);\n      });\n      e.observe({\n        type: \"paint\",\n        buffered: !0\n      }), this.observers.set(\"fcp\", e);\n    } catch (e) {\n      console.warn(\"FCP measurement not supported:\", e);\n    }\n  }\n  measureTTFB() {\n    if (\"performance\" in window && \"getEntriesByType\" in performance) {\n      const e = performance.getEntriesByType(\"navigation\")[0];\n      e && (this.metrics.ttfb = Math.round(e.responseStart - e.requestStart), this.metrics.ttfb > 600 && this.reportMetric(\"ttfb_slow\", this.metrics.ttfb));\n    }\n  }\n  setupResourceMonitoring() {\n    if (\"PerformanceObserver\" in window) try {\n      const e = new PerformanceObserver(e => {\n        e.getEntries().forEach(e => {\n          this.analyzeResourcePerformance(e);\n        });\n      });\n      e.observe({\n        type: \"resource\",\n        buffered: !0\n      }), this.observers.set(\"resource\", e);\n    } catch (e) {\n      console.warn(\"Resource monitoring not supported:\", e);\n    }\n  }\n  analyzeResourcePerformance(e) {\n    const t = e.responseEnd - e.requestStart,\n      r = e.transferSize || e.decodedBodySize || 0;\n    \"img\" === e.initiatorType && t > 2e3 && this.reportMetric(\"slow_image\", {\n      url: e.name,\n      duration: Math.round(t),\n      size: r\n    }), \"script\" === e.initiatorType && t > 3e3 && this.reportMetric(\"slow_script\", {\n      url: e.name,\n      duration: Math.round(t),\n      size: r\n    }), \"link\" === e.initiatorType && e.name.includes(\".css\") && t > 2e3 && this.reportMetric(\"slow_css\", {\n      url: e.name,\n      duration: Math.round(t),\n      size: r\n    }), r > 1048576 && this.reportMetric(\"large_resource\", {\n      url: e.name,\n      size: r,\n      type: e.initiatorType\n    });\n  }\n  setupNetworkMonitoring() {\n    \"connection\" in navigator && (this.networkInfo = {\n      effectiveType: navigator.connection.effectiveType,\n      downlink: navigator.connection.downlink,\n      rtt: navigator.connection.rtt,\n      saveData: navigator.connection.saveData\n    }, navigator.connection.addEventListener(\"change\", () => {\n      this.onNetworkChange();\n    }), this.adaptToConnection()), window.addEventListener(\"online\", () => this.onNetworkOnline()), window.addEventListener(\"offline\", () => this.onNetworkOffline());\n  }\n  onNetworkChange() {\n    const e = {\n      effectiveType: navigator.connection.effectiveType,\n      downlink: navigator.connection.downlink,\n      rtt: navigator.connection.rtt,\n      saveData: navigator.connection.saveData\n    };\n    this.networkInfo.effectiveType !== e.effectiveType && this.reportMetric(\"network_change\", {\n      from: this.networkInfo.effectiveType,\n      to: e.effectiveType\n    }), this.networkInfo = e, this.adaptToConnection();\n  }\n  adaptToConnection() {\n    if (!this.networkInfo) return;\n    const {\n      effectiveType: e,\n      saveData: t\n    } = this.networkInfo;\n    \"2g\" === e || \"slow-2g\" === e || t ? this.enableDataSaverMode() : \"4g\" === e && this.enableHighQualityMode();\n  }\n  enableDataSaverMode() {\n    document.body.classList.add(\"reduce-motion\");\n    document.querySelectorAll(\"img[data-src]\").forEach(e => {\n      e.dataset.srcLow && (e.dataset.src = e.dataset.srcLow);\n    });\n    document.querySelectorAll(\"video[autoplay]\").forEach(e => {\n      e.removeAttribute(\"autoplay\"), e.pause();\n    }), this.reportMetric(\"data_saver_enabled\", !0);\n  }\n  enableHighQualityMode() {\n    document.body.classList.remove(\"reduce-motion\");\n    document.querySelectorAll(\"img[data-src]\").forEach(e => {\n      e.dataset.srcHigh && (e.dataset.src = e.dataset.srcHigh);\n    }), document.body.classList.add(\"enhanced-animations\");\n  }\n  onNetworkOnline() {\n    this.reportMetric(\"network_online\", Date.now()), \"serviceWorker\" in navigator && navigator.serviceWorker.controller && navigator.serviceWorker.controller.postMessage({\n      type: \"SYNC_WHEN_ONLINE\"\n    });\n  }\n  onNetworkOffline() {\n    this.reportMetric(\"network_offline\", Date.now()), this.showOfflineIndicator();\n  }\n  setupMemoryMonitoring() {\n    \"memory\" in performance && setInterval(() => {\n      const e = performance.memory,\n        t = {\n          used: Math.round(e.usedJSHeapSize / 1024 / 1024),\n          total: Math.round(e.totalJSHeapSize / 1024 / 1024),\n          limit: Math.round(e.jsHeapSizeLimit / 1024 / 1024)\n        };\n      t.used / t.limit > .8 && (this.reportMetric(\"high_memory_usage\", t), this.triggerMemoryCleanup());\n    }, 3e4);\n  }\n  triggerMemoryCleanup() {\n    this.observers.forEach((e, t) => {\n      \"lcp\" !== t && \"fid\" !== t && \"cls\" !== t && (e.disconnect(), this.observers.delete(t));\n    }), \"caches\" in window && caches.keys().then(e => {\n      e.forEach(e => {\n        (e.includes(\"old\") || e.includes(\"temp\")) && caches.delete(e);\n      });\n    }), window.gc && window.gc();\n  }\n  setupServiceWorkerIntegration() {\n    \"serviceWorker\" in navigator && navigator.serviceWorker.addEventListener(\"message\", e => {\n      const {\n        type: t,\n        data: r\n      } = e.data;\n      switch (t) {\n        case \"CACHE_PERFORMANCE\":\n          this.reportMetric(\"cache_hit_rate\", r);\n          break;\n        case \"OFFLINE_FALLBACK\":\n          this.reportMetric(\"offline_fallback_used\", r);\n          break;\n        case \"UPDATE_AVAILABLE\":\n          this.handleServiceWorkerUpdate();\n      }\n    });\n  }\n  handleServiceWorkerUpdate() {\n    window.showToast && window.showToast(\"A new version is available\", \"info\", {\n      autoDismiss: !1,\n      actions: [{\n        text: \"Reload\",\n        handler: () => window.location.reload()\n      }, {\n        text: \"Later\",\n        handler: () => {}\n      }]\n    });\n  }\n  onDOMReady() {\n    this.metrics.domContentLoaded = performance.now(), this.setupLazyLoading(), this.optimizeCriticalResources(), this.setupInteractionMonitoring();\n  }\n  setupLazyLoading() {\n    if (window.__imgLazyOwner && \"performance\" !== window.__imgLazyOwner) return;\n    if (window.__imgLazyInitialized) return;\n    window.__imgLazyOwner = \"performance\";\n    window.__imgLazyInitialized = !0;\n    if (!(\"IntersectionObserver\" in window)) {\n      document.querySelectorAll(\"img[data-src]\").forEach(e => {\n        this.loadImage(e);\n      });\n      document.querySelectorAll(\"[data-lazy-content]\").forEach(e => {\n        this.loadDeferredContent(e);\n      });\n      return;\n    }\n    const e = new IntersectionObserver((e, t) => {\n      e.forEach(e => {\n        if (e.isIntersecting) {\n          const r = e.target;\n          this.loadImage(r), t.unobserve(r);\n        }\n      });\n    }, {\n      rootMargin: \"50px 0px\",\n      threshold: .1\n    });\n    document.querySelectorAll(\"img[data-src]\").forEach(t => {\n      t.classList.add(\"lazy\"), e.observe(t);\n    });\n    const t = new IntersectionObserver(e => {\n      e.forEach(e => {\n        if (e.isIntersecting) {\n          const r = e.target;\n          this.loadDeferredContent(r), t.unobserve(r);\n        }\n      });\n    }, {\n      rootMargin: \"100px 0px\",\n      threshold: .1\n    });\n    document.querySelectorAll(\"[data-lazy-content]\").forEach(e => {\n      t.observe(e);\n    });\n  }\n  loadImage(e) {\n    const t = performance.now();\n    let r = e.dataset.src;\n    this.networkInfo?.saveData || \"2g\" === this.networkInfo?.effectiveType ? r = e.dataset.srcLow || r : window.devicePixelRatio > 2 && (r = e.dataset.srcHigh || r);\n    const o = new Image();\n    o.onload = () => {\n      const o = performance.now() - t;\n      e.src = r, e.classList.remove(\"lazy\"), e.classList.add(\"loaded\"), e.getAttribute(\"data-original-html\") || e.setAttribute(\"data-original-html\", e.outerHTML), o > 2e3 && this.reportMetric(\"slow_image_load\", {\n        src: r,\n        loadTime: Math.round(o)\n      });\n    }, o.onerror = () => {\n      e.classList.add(\"error\"), e.src = e.dataset.fallback || \"/static/images/placeholder.svg\", this.reportMetric(\"image_load_error\", {\n        src: r,\n        fallback: e.dataset.fallback\n      });\n    }, o.src = r;\n  }\n  loadDeferredContent(e) {\n    switch (e.dataset.lazyContent) {\n      case \"widget\":\n        this.loadWidget(e);\n        break;\n      case \"chart\":\n        this.loadChart(e);\n        break;\n      case \"social\":\n        this.loadSocialEmbed(e);\n        break;\n      default:\n        this.loadGenericContent(e);\n    }\n  }\n  optimizeCriticalResources() {\n    this.preloadCriticalResources(), this.optimizeFonts(), this.optimizeThirdPartyScripts();\n  }\n  preloadCriticalResources() {\n    [{\n      href: \"/static/css/components.css\",\n      as: \"style\"\n    }, {\n      href: \"/static/js/ui-enhancements.js\",\n      as: \"script\"\n    }].forEach(e => {\n      const t = document.createElement(\"link\");\n      t.rel = \"preload\", t.href = e.href, t.as = e.as, \"script\" === e.as && (t.crossOrigin = \"anonymous\"), document.head.appendChild(t);\n    });\n  }\n  optimizeFonts() {\n    document.querySelectorAll('@font-face, link[rel=\"stylesheet\"][href*=\"fonts\"]');\n    [\"/static/fonts/primary-font.woff2\"].forEach(e => {\n      const t = document.createElement(\"link\");\n      t.rel = \"preload\", t.href = e, t.as = \"font\", t.type = \"font/woff2\", t.crossOrigin = \"anonymous\", document.head.appendChild(t);\n    });\n  }\n  optimizeThirdPartyScripts() {\n    document.querySelectorAll(\"script[data-defer]\").forEach(e => {\n      \"interaction\" === e.dataset.defer ? this.loadOnInteraction(e) : \"idle\" === e.dataset.defer && this.loadOnIdle(e);\n    });\n  }\n  loadOnInteraction(e) {\n    const t = [\"mousedown\", \"touchstart\", \"keydown\", \"scroll\"],\n      r = () => {\n        e.src = e.dataset.src, t.forEach(e => {\n          document.removeEventListener(e, r, {\n            passive: !0\n          });\n        });\n      };\n    t.forEach(e => {\n      document.addEventListener(e, r, {\n        passive: !0\n      });\n    });\n  }\n  loadOnIdle(e) {\n    \"requestIdleCallback\" in window ? requestIdleCallback(() => {\n      e.src = e.dataset.src;\n    }) : setTimeout(() => {\n      e.src = e.dataset.src;\n    }, 2e3);\n  }\n  setupInteractionMonitoring() {\n    [\"click\", \"scroll\", \"keydown\", \"mousemove\"].forEach(e => {\n      document.addEventListener(e, e => {\n        this.measureInteractionPerformance(e);\n      }, {\n        passive: !0\n      });\n    });\n  }\n  measureInteractionPerformance(e) {\n    const t = performance.now();\n    requestAnimationFrame(() => {\n      const r = performance.now() - t;\n      r > 100 && this.reportMetric(\"slow_interaction\", {\n        type: e.type,\n        responseTime: Math.round(r),\n        target: e.target.tagName.toLowerCase()\n      });\n    });\n  }\n  setupReporting() {\n    setInterval(() => {\n      this.reportCurrentMetrics();\n    }, 3e4), window.addEventListener(\"beforeunload\", () => {\n      this.reportFinalMetrics();\n    }), document.addEventListener(\"visibilitychange\", () => {\n      \"hidden\" === document.visibilityState && this.reportFinalMetrics();\n    });\n  }\n  reportMetric(e, t) {\n    if (!this.isRecording) return;\n    const r = {\n      name: e,\n      value: t,\n      timestamp: Date.now(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      networkInfo: this.networkInfo,\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight\n      }\n    };\n    this.sendMetric(r), \"localhost\" === window.location.hostname || window.location.hostname;\n  }\n  sendMetric(e) {\n    const t = this.getCSRFToken();\n    if (navigator.sendBeacon && t) {\n      const r = new FormData();\n      r.append(\"csrfmiddlewaretoken\", t), r.append(\"data\", JSON.stringify(e)), navigator.sendBeacon(this.reportingEndpoint, r);\n    } else fetch(this.reportingEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": t || \"\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      },\n      body: JSON.stringify(e)\n    }).catch(e => {\n      console.warn(\"Failed to send performance metric:\", e);\n    });\n  }\n  getCSRFToken() {\n    const e = document.querySelector('meta[name=\"csrf-token\"]');\n    if (e) return e.getAttribute(\"content\");\n    const t = document.cookie.match(/csrftoken=([^;]+)/);\n    if (t) return t[1];\n    const r = document.querySelector('input[name=\"csrfmiddlewaretoken\"]');\n    return r ? r.value : null;\n  }\n  reportCurrentMetrics() {\n    Object.values(this.metrics).some(e => null !== e) && this.reportMetric(\"core_vitals\", {\n      ...this.metrics\n    });\n  }\n  reportFinalMetrics() {\n    this.metrics.loadComplete = performance.now(), this.reportMetric(\"page_complete\", {\n      metrics: this.metrics,\n      timing: this.getNavigationTiming(),\n      resources: this.getResourceSummary()\n    });\n  }\n  getNavigationTiming() {\n    if (\"performance\" in window && \"getEntriesByType\" in performance) {\n      const e = performance.getEntriesByType(\"navigation\")[0];\n      if (e) return {\n        dns: Math.round(e.domainLookupEnd - e.domainLookupStart),\n        connection: Math.round(e.connectEnd - e.connectStart),\n        request: Math.round(e.responseStart - e.requestStart),\n        response: Math.round(e.responseEnd - e.responseStart),\n        dom: Math.round(e.domContentLoadedEventEnd - e.domContentLoadedEventStart),\n        load: Math.round(e.loadEventEnd - e.loadEventStart)\n      };\n    }\n    return null;\n  }\n  getResourceSummary() {\n    if (\"performance\" in window && \"getEntriesByType\" in performance) {\n      const e = performance.getEntriesByType(\"resource\"),\n        t = {\n          total: e.length,\n          scripts: 0,\n          styles: 0,\n          images: 0,\n          fonts: 0,\n          other: 0,\n          totalSize: 0\n        };\n      return e.forEach(e => {\n        const r = e.transferSize || e.decodedBodySize || 0;\n        switch (t.totalSize += r, e.initiatorType) {\n          case \"script\":\n            t.scripts++;\n            break;\n          case \"link\":\n            e.name.includes(\".css\") ? t.styles++ : t.other++;\n            break;\n          case \"img\":\n            t.images++;\n            break;\n          default:\n            e.name.includes(\"font\") || e.name.includes(\".woff\") ? t.fonts++ : t.other++;\n        }\n      }), t;\n    }\n    return null;\n  }\n  analyzeCLSCauses(e) {\n    e.forEach(e => {\n      e.sources.forEach(e => {\n        this.reportMetric(\"cls_source\", {\n          element: e.node?.tagName || \"unknown\",\n          previousRect: e.previousRect,\n          currentRect: e.currentRect\n        });\n      });\n    });\n  }\n  showOfflineIndicator() {\n    window.showToast && window.showToast(\"You are currently offline\", \"warning\", {\n      duration: 0,\n      actions: [{\n        text: \"Dismiss\",\n        handler: () => {}\n      }]\n    });\n  }\n  getMetrics() {\n    return {\n      ...this.metrics\n    };\n  }\n  getNetworkInfo() {\n    return {\n      ...this.networkInfo\n    };\n  }\n  startRecording() {\n    this.isRecording = !0;\n  }\n  stopRecording() {\n    this.isRecording = !1;\n  }\n  clearMetrics() {\n    Object.keys(this.metrics).forEach(e => {\n      this.metrics[e] = null;\n    });\n  }\n  disconnect() {\n    this.observers.forEach(e => {\n      e.disconnect();\n    }), this.observers.clear(), this.isRecording = !1;\n  }\n}\nwindow.__imgLazyOwner = \"performance\";\nconst performanceMonitor = new PerformanceMonitor();\nwindow.performanceMonitor = performanceMonitor, window.performanceUtils = {\n  measure: (e, t = \"function\") => {\n    const r = performance.now(),\n      o = e(),\n      n = performance.now();\n    return Math.round(n - r), performanceMonitor.reportMetric(\"function_timing\", {\n      name: t,\n      duration: Math.round(n - r)\n    }), o;\n  },\n  measureAsync: async (e, t = \"async function\") => {\n    const r = performance.now(),\n      o = await e(),\n      n = performance.now();\n    return Math.round(n - r), performanceMonitor.reportMetric(\"async_function_timing\", {\n      name: t,\n      duration: Math.round(n - r)\n    }), o;\n  },\n  getPerformanceState: () => ({\n    metrics: performanceMonitor.getMetrics(),\n    network: performanceMonitor.getNetworkInfo(),\n    memory: performance.memory ? {\n      used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),\n      total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),\n      limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)\n    } : null\n  })\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///779\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__(271);
/******/ 	var __webpack_exports__ = __webpack_require__(779);
/******/ 	
/******/ })()
;