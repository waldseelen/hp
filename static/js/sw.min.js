const CACHE_NAME="portfolio-v1.0.0",urlsToCache=["/","/offline/","/static/css/custom.css","/static/js/main.js","/static/js/pwa.js","/blog/","/tools/","/contact/"];async function syncContactForm(){try{const e=await openIndexedDB(),t=await getOfflineForms(e);for(const n of t)try{(await fetch("/contact/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n.data)})).ok&&await deleteOfflineForm(e,n.id)}catch(e){console.error("Failed to sync form:",e)}}catch(e){console.error("Background sync failed:",e)}}function openIndexedDB(){return new Promise((e,t)=>{const n=indexedDB.open("PortfolioOfflineDB",1);n.onerror=()=>t(n.error),n.onsuccess=()=>e(n.result),n.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains("forms")||t.createObjectStore("forms",{keyPath:"id",autoIncrement:!0})}})}function getOfflineForms(e){return new Promise((t,n)=>{const o=e.transaction(["forms"],"readonly").objectStore("forms").getAll();o.onerror=()=>n(o.error),o.onsuccess=()=>t(o.result)})}function deleteOfflineForm(e,t){return new Promise((n,o)=>{const s=e.transaction(["forms"],"readwrite").objectStore("forms").delete(t);s.onerror=()=>o(s.error),s.onsuccess=()=>n()})}self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE_NAME).then(e=>e.addAll(urlsToCache))),self.skipWaiting()}),self.addEventListener("fetch",e=>{e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(t=>{if(!t||200!==t.status||"basic"!==t.type)return t;const n=t.clone();return caches.open(CACHE_NAME).then(t=>{t.put(e.request,n)}),t})).catch(()=>{if("document"===e.request.destination)return caches.match("/offline/")||caches.match("/")}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return caches.delete(e)})))),self.clients.claim()}),self.addEventListener("sync",e=>{"contact-form"===e.tag&&e.waitUntil(syncContactForm())});
//# sourceMappingURL=sw.min.js.map