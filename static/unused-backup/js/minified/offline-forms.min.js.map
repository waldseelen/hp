{"version":3,"file":"offline-forms.min.js","names":["OfflineFormsManager","constructor","this","isOnline","navigator","onLine","init","bindEvents","checkOnlineStatus","registerForNotifications","window","addEventListener","handleOnline","handleOffline","document","event","handleFormSubmit","serviceWorker","handleServiceWorkerMessage","showConnectionStatus","triggerBackgroundSync","status","existing","querySelector","remove","statusElement","createElement","className","innerHTML","setTimeout","parentNode","body","appendChild","form","target","classList","contains","dataset","offlineSync","preventDefault","formData","FormData","submitButton","originalText","textContent","setFormState","disabled","response","fetch","action","location","href","method","headers","ok","Error","json","offline","showMessage","reset","error","state","add","message","type","querySelectorAll","forEach","el","messageElement","ServiceWorkerRegistration","prototype","registration","ready","sync","register","notification","data","close","payload"],"sources":["0"],"sourcesContent":["/**\r\n * OFFLINE FORMS - Background Sync Support\r\n * ======================================\r\n * \r\n * Handles offline form submissions with background sync support.\r\n * Works with service worker to queue failed submissions and retry\r\n * when connectivity is restored.\r\n */\r\n\r\nclass OfflineFormsManager {\r\n    constructor() {\r\n        this.isOnline = navigator.onLine;\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.bindEvents();\r\n        this.checkOnlineStatus();\r\n        this.registerForNotifications();\r\n    }\r\n\r\n    bindEvents() {\r\n        // Online/offline status changes\r\n        window.addEventListener('online', () => this.handleOnline());\r\n        window.addEventListener('offline', () => this.handleOffline());\r\n\r\n        // Form submissions\r\n        document.addEventListener('submit', (event) => this.handleFormSubmit(event));\r\n\r\n        // Service worker messages\r\n        if ('serviceWorker' in navigator) {\r\n            navigator.serviceWorker.addEventListener('message', (event) => {\r\n                this.handleServiceWorkerMessage(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnline() {\r\n        this.isOnline = true;\r\n        this.showConnectionStatus('online');\r\n        this.triggerBackgroundSync();\r\n    }\r\n\r\n    handleOffline() {\r\n        this.isOnline = false;\r\n        this.showConnectionStatus('offline');\r\n    }\r\n\r\n    showConnectionStatus(status) {\r\n        // Remove existing status indicators\r\n        const existing = document.querySelector('.connection-status');\r\n        if (existing) existing.remove();\r\n\r\n        // Create status indicator\r\n        const statusElement = document.createElement('div');\r\n        statusElement.className = `connection-status connection-status--${status}`;\r\n        \r\n        if (status === 'offline') {\r\n            statusElement.innerHTML = `\r\n                <div class=\"connection-status__content\">\r\n                    <svg width=\"16\" height=\"16\" fill=\"currentColor\">\r\n                        <path d=\"M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zM7 11V9h2v2H7zm0-8v6h2V3H7z\"/>\r\n                    </svg>\r\n                    <span>You're offline. Forms will be saved and submitted when connection is restored.</span>\r\n                </div>\r\n            `;\r\n        } else {\r\n            statusElement.innerHTML = `\r\n                <div class=\"connection-status__content\">\r\n                    <svg width=\"16\" height=\"16\" fill=\"currentColor\">\r\n                        <path d=\"M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zM6.5 12L2 7.5l1.4-1.4L6.5 9.2l4.1-4.1L12 6.5 6.5 12z\"/>\r\n                    </svg>\r\n                    <span>Connection restored! Submitting queued forms...</span>\r\n                </div>\r\n            `;\r\n            // Auto-hide online status after 3 seconds\r\n            setTimeout(() => {\r\n                if (statusElement.parentNode) {\r\n                    statusElement.remove();\r\n                }\r\n            }, 3000);\r\n        }\r\n\r\n        document.body.appendChild(statusElement);\r\n    }\r\n\r\n    async handleFormSubmit(event) {\r\n        const form = event.target;\r\n        \r\n        // Only handle forms with offline-sync class or data attribute\r\n        if (!form.classList.contains('offline-sync') && !form.dataset.offlineSync) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        const formData = new FormData(form);\r\n        const submitButton = form.querySelector('[type=\"submit\"]');\r\n        const originalText = submitButton.textContent;\r\n\r\n        try {\r\n            // Show loading state\r\n            this.setFormState(form, 'loading');\r\n            submitButton.textContent = 'Submitting...';\r\n            submitButton.disabled = true;\r\n\r\n            // Attempt submission\r\n            const response = await fetch(form.action || window.location.href, {\r\n                method: form.method || 'POST',\r\n                body: formData,\r\n                headers: {\r\n                    'X-Requested-With': 'XMLHttpRequest',\r\n                }\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                \r\n                if (result.offline) {\r\n                    // Form was queued for background sync\r\n                    this.showMessage('Form saved! It will be submitted when you\\'re back online.', 'info');\r\n                    this.setFormState(form, 'queued');\r\n                } else {\r\n                    // Form submitted successfully\r\n                    this.showMessage('Form submitted successfully!', 'success');\r\n                    this.setFormState(form, 'success');\r\n                    form.reset();\r\n                }\r\n            } else {\r\n                throw new Error(`HTTP ${response.status}`);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Form submission error:', error);\r\n            \r\n            if (!this.isOnline) {\r\n                this.showMessage('You\\'re offline. Form will be submitted when connection is restored.', 'info');\r\n                this.setFormState(form, 'queued');\r\n            } else {\r\n                this.showMessage('Submission failed. Please try again.', 'error');\r\n                this.setFormState(form, 'error');\r\n            }\r\n        } finally {\r\n            submitButton.textContent = originalText;\r\n            submitButton.disabled = false;\r\n        }\r\n    }\r\n\r\n    setFormState(form, state) {\r\n        form.classList.remove('form-loading', 'form-success', 'form-error', 'form-queued');\r\n        form.classList.add(`form-${state}`);\r\n    }\r\n\r\n    showMessage(message, type = 'info') {\r\n        // Remove existing messages\r\n        const existing = document.querySelectorAll('.form-message');\r\n        existing.forEach(el => el.remove());\r\n\r\n        // Create message element\r\n        const messageElement = document.createElement('div');\r\n        messageElement.className = `form-message form-message--${type}`;\r\n        messageElement.innerHTML = `\r\n            <div class=\"form-message__content\">\r\n                <span>${message}</span>\r\n                <button class=\"form-message__close\" onclick=\"this.parentElement.parentElement.remove()\">\r\n                    <svg width=\"14\" height=\"14\" fill=\"currentColor\">\r\n                        <path d=\"M14 1.41L12.59 0 7 5.59 1.41 0 0 1.41 5.59 7 0 12.59 1.41 14 7 8.41 12.59 14 14 12.59 8.41 7z\"/>\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n        `;\r\n\r\n        document.body.appendChild(messageElement);\r\n\r\n        // Auto-remove after 5 seconds\r\n        setTimeout(() => {\r\n            if (messageElement.parentNode) {\r\n                messageElement.remove();\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    checkOnlineStatus() {\r\n        // Initial status check\r\n        if (!this.isOnline) {\r\n            this.showConnectionStatus('offline');\r\n        }\r\n    }\r\n\r\n    async triggerBackgroundSync() {\r\n        if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {\r\n            try {\r\n                const registration = await navigator.serviceWorker.ready;\r\n                await registration.sync.register('form-sync');\r\n                console.log('Background sync registered for forms');\r\n            } catch (error) {\r\n                console.error('Failed to register background sync:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async registerForNotifications() {\r\n        if ('serviceWorker' in navigator && 'Notification' in window) {\r\n            const registration = await navigator.serviceWorker.ready;\r\n            \r\n            // Listen for form sync success notifications\r\n            registration.addEventListener('notificationclick', (event) => {\r\n                if (event.notification.data?.type === 'form-success') {\r\n                    event.notification.close();\r\n                    // Optionally redirect user somewhere\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleServiceWorkerMessage(event) {\r\n        const { type, payload } = event.data || {};\r\n        \r\n        switch (type) {\r\n            case 'form-sync-success':\r\n                this.showMessage('Queued form submitted successfully!', 'success');\r\n                break;\r\n            case 'form-sync-failed':\r\n                this.showMessage('Failed to submit queued form. Will retry later.', 'warning');\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new OfflineFormsManager();\r\n});\r\n\r\n// Auto-enable for contact forms\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const contactForms = document.querySelectorAll('form[action*=\"/contact/\"]');\r\n    contactForms.forEach(form => {\r\n        form.classList.add('offline-sync');\r\n    });\r\n});"],"mappings":"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","ignoreList":[]}