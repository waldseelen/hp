{"version":3,"file":"i18n.min.js","names":["translationCache","currentLanguage","fallbackLanguage","initI18n","language","translations","htmlLang","document","documentElement","lang","split","gettext","text","params","interpolateString","getTranslation","_","ngettext","singular","plural","count","replace","match","key","hasOwnProperty","async","loadTranslations","response","fetch","ok","Error","json","Object","assign","error","changeLanguage","event","CustomEvent","detail","dispatchEvent","getCurrentLanguage","hasTranslation","gettext_noop","N_","lazy_gettext","addEventListener","translationScript","querySelector","JSON","parse","textContent","catch","window","i18n","init","module","exports"],"sources":["0"],"sourcesContent":["/**\r\n * JavaScript Internationalization System\r\n * Provides gettext-like functionality for client-side translations\r\n */\r\n\r\n// Translation cache\r\nlet translationCache = {};\r\nlet currentLanguage = 'en';\r\nlet fallbackLanguage = 'en';\r\n\r\n/**\r\n * Initialize the i18n system\r\n * @param {string} language - Current language code\r\n * @param {Object} translations - Translation object\r\n */\r\nfunction initI18n(language = 'en', translations = {}) {\r\n    currentLanguage = language;\r\n    translationCache = translations;\r\n    \r\n    // Detect language from HTML lang attribute if not provided\r\n    if (!language) {\r\n        const htmlLang = document.documentElement.lang || 'en';\r\n        currentLanguage = htmlLang.split('-')[0]; // Take just the language part\r\n    }\r\n    \r\n    console.log(`[i18n] Initialized with language: ${currentLanguage}`);\r\n}\r\n\r\n/**\r\n * Get translated string (main translation function)\r\n * @param {string} text - Text to translate\r\n * @param {Object} params - Parameters for string interpolation\r\n * @returns {string} Translated text\r\n */\r\nfunction gettext(text, params = {}) {\r\n    // Get translation from cache\r\n    const translation = getTranslation(text);\r\n    \r\n    // Perform parameter substitution\r\n    return interpolateString(translation, params);\r\n}\r\n\r\n/**\r\n * Alias for gettext (shorter syntax)\r\n */\r\nconst _ = gettext;\r\n\r\n/**\r\n * Pluralization support\r\n * @param {string} singular - Singular form\r\n * @param {string} plural - Plural form  \r\n * @param {number} count - Number to determine plural form\r\n * @param {Object} params - Parameters for string interpolation\r\n * @returns {string} Translated text in appropriate plural form\r\n */\r\nfunction ngettext(singular, plural, count, params = {}) {\r\n    const text = count === 1 ? singular : plural;\r\n    const translation = getTranslation(text);\r\n    \r\n    // Add count to parameters\r\n    const allParams = { ...params, count };\r\n    return interpolateString(translation, allParams);\r\n}\r\n\r\n/**\r\n * Get translation from cache with fallback\r\n * @param {string} text - Text to translate\r\n * @returns {string} Translated text or original text if not found\r\n */\r\nfunction getTranslation(text) {\r\n    // Try current language\r\n    if (translationCache[currentLanguage] && translationCache[currentLanguage][text]) {\r\n        return translationCache[currentLanguage][text];\r\n    }\r\n    \r\n    // Try fallback language\r\n    if (currentLanguage !== fallbackLanguage && \r\n        translationCache[fallbackLanguage] && \r\n        translationCache[fallbackLanguage][text]) {\r\n        return translationCache[fallbackLanguage][text];\r\n    }\r\n    \r\n    // Return original text if no translation found\r\n    return text;\r\n}\r\n\r\n/**\r\n * String interpolation for parameters\r\n * @param {string} text - Text with placeholders\r\n * @param {Object} params - Parameters to substitute\r\n * @returns {string} Text with parameters substituted\r\n */\r\nfunction interpolateString(text, params) {\r\n    return text.replace(/\\{(\\w+)\\}/g, (match, key) => {\r\n        return params.hasOwnProperty(key) ? params[key] : match;\r\n    });\r\n}\r\n\r\n/**\r\n * Load translations from server\r\n * @param {string} language - Language code to load\r\n * @returns {Promise} Promise that resolves when translations are loaded\r\n */\r\nasync function loadTranslations(language) {\r\n    try {\r\n        const response = await fetch(`/static/js/translations/${language}.json`);\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to load translations for ${language}`);\r\n        }\r\n        \r\n        const translations = await response.json();\r\n        \r\n        // Merge with existing cache\r\n        if (!translationCache[language]) {\r\n            translationCache[language] = {};\r\n        }\r\n        Object.assign(translationCache[language], translations);\r\n        \r\n        console.log(`[i18n] Loaded translations for ${language}`);\r\n        return translations;\r\n    } catch (error) {\r\n        console.warn(`[i18n] Failed to load translations for ${language}:`, error);\r\n        return {};\r\n    }\r\n}\r\n\r\n/**\r\n * Change current language and reload translations\r\n * @param {string} language - New language code\r\n * @returns {Promise} Promise that resolves when language is changed\r\n */\r\nasync function changeLanguage(language) {\r\n    currentLanguage = language;\r\n    \r\n    // Load translations if not cached\r\n    if (!translationCache[language]) {\r\n        await loadTranslations(language);\r\n    }\r\n    \r\n    // Dispatch language change event\r\n    const event = new CustomEvent('language-changed', {\r\n        detail: { language, translations: translationCache[language] }\r\n    });\r\n    document.dispatchEvent(event);\r\n    \r\n    console.log(`[i18n] Language changed to: ${language}`);\r\n}\r\n\r\n/**\r\n * Get current language\r\n * @returns {string} Current language code\r\n */\r\nfunction getCurrentLanguage() {\r\n    return currentLanguage;\r\n}\r\n\r\n/**\r\n * Check if text has translation\r\n * @param {string} text - Text to check\r\n * @returns {boolean} True if translation exists\r\n */\r\nfunction hasTranslation(text) {\r\n    return !!(translationCache[currentLanguage] && translationCache[currentLanguage][text]);\r\n}\r\n\r\n/**\r\n * Mark text for translation (no-op function for extraction tools)\r\n * @param {string} text - Text to mark\r\n * @returns {string} Original text\r\n */\r\nfunction gettext_noop(text) {\r\n    return text;\r\n}\r\n\r\n// Aliases\r\nconst N_ = gettext_noop;\r\nconst lazy_gettext = gettext_noop;\r\n\r\n// DOM content loaded initialization\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Auto-initialize with HTML lang attribute\r\n    const htmlLang = document.documentElement.lang || 'en';\r\n    const language = htmlLang.split('-')[0];\r\n    \r\n    // Try to get embedded translations from the page\r\n    const translationScript = document.querySelector('script[type=\"application/json\"][data-translations]');\r\n    let translations = {};\r\n    \r\n    if (translationScript) {\r\n        try {\r\n            translations = JSON.parse(translationScript.textContent);\r\n        } catch (error) {\r\n            console.warn('[i18n] Failed to parse embedded translations:', error);\r\n        }\r\n    }\r\n    \r\n    initI18n(language, translations);\r\n    \r\n    // Load additional translations if needed\r\n    if (!translations[language]) {\r\n        loadTranslations(language).catch(() => {\r\n            // Fallback - continue without translations\r\n        });\r\n    }\r\n});\r\n\r\n// Export functions for global use\r\nwindow.gettext = gettext;\r\nwindow._ = _;\r\nwindow.ngettext = ngettext;\r\nwindow.gettext_noop = gettext_noop;\r\nwindow.N_ = N_;\r\nwindow.lazy_gettext = lazy_gettext;\r\nwindow.i18n = {\r\n    init: initI18n,\r\n    gettext,\r\n    ngettext,\r\n    changeLanguage,\r\n    getCurrentLanguage,\r\n    loadTranslations,\r\n    hasTranslation,\r\n    _,\r\n    N_\r\n};\r\n\r\n// Export for module systems\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = {\r\n        gettext,\r\n        ngettext,\r\n        gettext_noop,\r\n        initI18n,\r\n        changeLanguage,\r\n        getCurrentLanguage,\r\n        loadTranslations,\r\n        hasTranslation,\r\n        _,\r\n        N_\r\n    };\r\n}"],"mappings":"AAMA,IAAIA,iBAAmB,CAAC,EACpBC,gBAAkB,KAClBC,iBAAmB,KAOvB,SAASC,SAASC,EAAW,KAAMC,EAAe,CAAC,GAK/C,GAJAJ,gBAAkBG,EAClBJ,iBAAmBK,GAGdD,EAAU,CACX,MAAME,EAAWC,SAASC,gBAAgBC,MAAQ,KAClDR,gBAAkBK,EAASI,MAAM,KAAK,EAC1C,CAGJ,CAQA,SAASC,QAAQC,EAAMC,EAAS,CAAC,GAK7B,OAAOC,kBAHaC,eAAeH,GAGGC,EAC1C,CAKA,MAAMG,EAAIL,QAUV,SAASM,SAASC,EAAUC,EAAQC,EAAOP,EAAS,CAAC,GAMjD,OAAOC,kBAJaC,eADG,IAAVK,EAAcF,EAAWC,GAIpB,IAAKN,EAAQO,SAEnC,CAOA,SAASL,eAAeH,GAEpB,OAAIZ,iBAAiBC,kBAAoBD,iBAAiBC,iBAAiBW,GAChEZ,iBAAiBC,iBAAiBW,GAIzCX,kBAAoBC,kBACpBF,iBAAiBE,mBACjBF,iBAAiBE,kBAAkBU,GAC5BZ,iBAAiBE,kBAAkBU,GAIvCA,CACX,CAQA,SAASE,kBAAkBF,EAAMC,GAC7B,OAAOD,EAAKS,QAAQ,aAAc,CAACC,EAAOC,IAC/BV,EAAOW,eAAeD,GAAOV,EAAOU,GAAOD,EAE1D,CAOAG,eAAeC,iBAAiBtB,GAC5B,IACI,MAAMuB,QAAiBC,MAAM,2BAA2BxB,UACxD,IAAKuB,EAASE,GACV,MAAM,IAAIC,MAAM,mCAAmC1B,KAGvD,MAAMC,QAAqBsB,EAASI,OASpC,OANK/B,iBAAiBI,KAClBJ,iBAAiBI,GAAY,CAAC,GAElC4B,OAAOC,OAAOjC,iBAAiBI,GAAWC,GAGnCA,CACX,CAAE,MAAO6B,GAEL,MAAO,CAAC,CACZ,CACJ,CAOAT,eAAeU,eAAe/B,GAC1BH,gBAAkBG,EAGbJ,iBAAiBI,UACZsB,iBAAiBtB,GAI3B,MAAMgC,EAAQ,IAAIC,YAAY,mBAAoB,CAC9CC,OAAQ,CAAElC,WAAUC,aAAcL,iBAAiBI,MAEvDG,SAASgC,cAAcH,EAG3B,CAMA,SAASI,qBACL,OAAOvC,eACX,CAOA,SAASwC,eAAe7B,GACpB,SAAUZ,iBAAiBC,mBAAoBD,iBAAiBC,iBAAiBW,GACrF,CAOA,SAAS8B,aAAa9B,GAClB,OAAOA,CACX,CAGA,MAAM+B,GAAKD,aACLE,aAAeF,aAGrBnC,SAASsC,iBAAiB,mBAAoB,KAE1C,MACMzC,GADWG,SAASC,gBAAgBC,MAAQ,MACxBC,MAAM,KAAK,GAG/BoC,EAAoBvC,SAASwC,cAAc,sDACjD,IAAI1C,EAAe,CAAC,EAEpB,GAAIyC,EACA,IACIzC,EAAe2C,KAAKC,MAAMH,EAAkBI,YAChD,CAAE,MAAOhB,GAET,CAGJ/B,SAASC,EAAUC,GAGdA,EAAaD,IACdsB,iBAAiBtB,GAAU+C,MAAM,UAOzCC,OAAOzC,QAAUA,QACjByC,OAAOpC,EAAIA,EACXoC,OAAOnC,SAAWA,SAClBmC,OAAOV,aAAeA,aACtBU,OAAOT,GAAKA,GACZS,OAAOR,aAAeA,aACtBQ,OAAOC,KAAO,CACVC,KAAMnD,SACNQ,gBACAM,kBACAkB,8BACAK,sCACAd,kCACAe,8BACAzB,IACA2B,OAIkB,oBAAXY,QAA0BA,OAAOC,UACxCD,OAAOC,QAAU,CACb7C,gBACAM,kBACAyB,0BACAvC,kBACAgC,8BACAK,sCACAd,kCACAe,8BACAzB,IACA2B","ignoreList":[]}