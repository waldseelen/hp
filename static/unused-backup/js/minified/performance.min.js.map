{"version":3,"file":"performance.min.js","names":["PerformanceMonitor","constructor","this","metrics","lcp","fid","cls","fcp","ttfb","domContentLoaded","loadComplete","observers","Map","networkInfo","isRecording","reportingEndpoint","init","setupCoreWebVitals","setupResourceMonitoring","setupNetworkMonitoring","setupMemoryMonitoring","setupServiceWorkerIntegration","document","readyState","addEventListener","onDOMReady","setupReporting","observeLCP","observeFID","observeCLS","observeFCP","measureTTFB","window","observer","PerformanceObserver","list","entries","getEntries","lastEntry","length","Math","round","startTime","reportMetric","observe","type","buffered","set","e","forEach","entry","processingStart","clsValue","clsEntries","hadRecentInput","push","value","analyzeCLSCauses","performance","navigation","getEntriesByType","responseStart","requestStart","analyzeResourcePerformance","duration","responseEnd","size","transferSize","decodedBodySize","initiatorType","url","name","includes","navigator","effectiveType","connection","downlink","rtt","saveData","onNetworkChange","adaptToConnection","onNetworkOnline","onNetworkOffline","newInfo","from","to","enableDataSaverMode","enableHighQualityMode","body","classList","add","querySelectorAll","img","dataset","srcLow","src","video","removeAttribute","pause","remove","srcHigh","Date","now","serviceWorker","controller","postMessage","showOfflineIndicator","setInterval","memory","memoryInfo","used","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","triggerMemoryCleanup","key","disconnect","delete","caches","keys","then","cacheNames","cacheName","gc","event","data","handleServiceWorkerUpdate","showToast","autoDismiss","actions","text","handler","location","reload","setupLazyLoading","optimizeCriticalResources","setupInteractionMonitoring","__imgLazyOwner","imageObserver","IntersectionObserver","isIntersecting","target","loadImage","unobserve","rootMargin","threshold","contentObserver","element","loadDeferredContent","devicePixelRatio","newImg","Image","onload","loadTime","getAttribute","setAttribute","outerHTML","onerror","fallback","lazyContent","loadWidget","loadChart","loadSocialEmbed","loadGenericContent","preloadCriticalResources","optimizeFonts","optimizeThirdPartyScripts","href","as","resource","link","createElement","rel","crossOrigin","head","appendChild","fontUrl","script","defer","loadOnInteraction","loadOnIdle","events","loadScript","removeEventListener","passive","requestIdleCallback","setTimeout","eventType","measureInteractionPerformance","requestAnimationFrame","responseTime","tagName","toLowerCase","reportCurrentMetrics","reportFinalMetrics","visibilityState","metric","metric_type","additional_data","timestamp","viewport","width","innerWidth","height","innerHeight","sendMetric","hostname","sendBeacon","JSON","stringify","fetch","method","headers","performanceUtils","getCSRFToken","catch","error","Object","values","some","v","timing","getNavigationTiming","resources","getResourceSummary","dns","domainLookupEnd","domainLookupStart","connectEnd","connectStart","request","response","dom","domContentLoadedEventEnd","domContentLoadedEventStart","load","loadEventEnd","loadEventStart","summary","scripts","styles","images","fonts","other","totalSize","sources","source","node","previousRect","currentRect","getMetrics","getNetworkInfo","startRecording","stopRecording","clearMetrics","clear","performanceMonitor","measure","fn","start","result","end","measureAsync","async","cookies","cookie","split","trim","startsWith","substring","metaTag","querySelector","getPerformanceState","network"],"sources":["0"],"sourcesContent":["/**\r\n * Performance Monitoring Module\r\n * Advanced performance optimization and monitoring for the portfolio site\r\n * \r\n * Features:\r\n * - Core Web Vitals monitoring (LCP, FID, CLS)\r\n * - Resource loading optimization\r\n * - Image lazy loading with intersection observer\r\n * - Network connection monitoring\r\n * - Cache management and optimization\r\n * - Performance analytics and reporting\r\n * - Memory usage monitoring\r\n * - Bundle size analysis\r\n * - Service Worker integration\r\n */\r\n\r\nclass PerformanceMonitor {\r\n    constructor() {\r\n        this.metrics = {\r\n            lcp: null,\r\n            fid: null,\r\n            cls: null,\r\n            fcp: null,\r\n            ttfb: null,\r\n            domContentLoaded: null,\r\n            loadComplete: null\r\n        };\r\n        \r\n        this.observers = new Map();\r\n        this.networkInfo = null;\r\n        this.isRecording = true;\r\n        this.reportingEndpoint = '/api/performance/';\r\n        \r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        // Initialize performance monitoring\r\n        this.setupCoreWebVitals();\r\n        this.setupResourceMonitoring();\r\n        this.setupNetworkMonitoring();\r\n        this.setupMemoryMonitoring();\r\n        this.setupServiceWorkerIntegration();\r\n        \r\n        // Start monitoring when page loads\r\n        if (document.readyState === 'loading') {\r\n            document.addEventListener('DOMContentLoaded', () => this.onDOMReady());\r\n        } else {\r\n            this.onDOMReady();\r\n        }\r\n        \r\n        // Setup reporting\r\n        this.setupReporting();\r\n        \r\n        console.log('🚀 Performance Monitor initialized');\r\n    }\r\n    \r\n    setupCoreWebVitals() {\r\n        // Largest Contentful Paint (LCP)\r\n        this.observeLCP();\r\n        \r\n        // First Input Delay (FID)\r\n        this.observeFID();\r\n        \r\n        // Cumulative Layout Shift (CLS)\r\n        this.observeCLS();\r\n        \r\n        // First Contentful Paint (FCP)\r\n        this.observeFCP();\r\n        \r\n        // Time to First Byte (TTFB)\r\n        this.measureTTFB();\r\n    }\r\n    \r\n    observeLCP() {\r\n        if ('PerformanceObserver' in window) {\r\n            try {\r\n                const observer = new PerformanceObserver((list) => {\r\n                    const entries = list.getEntries();\r\n                    const lastEntry = entries[entries.length - 1];\r\n                    this.metrics.lcp = Math.round(lastEntry.startTime);\r\n                    \r\n                    // Report LCP if it's significant\r\n                    if (this.metrics.lcp > 2500) {\r\n                        this.reportMetric('lcp_slow', this.metrics.lcp);\r\n                    }\r\n                });\r\n                \r\n                observer.observe({ type: 'largest-contentful-paint', buffered: true });\r\n                this.observers.set('lcp', observer);\r\n            } catch (e) {\r\n                console.warn('LCP measurement not supported:', e);\r\n            }\r\n        }\r\n    }\r\n    \r\n    observeFID() {\r\n        if ('PerformanceObserver' in window) {\r\n            try {\r\n                const observer = new PerformanceObserver((list) => {\r\n                    const entries = list.getEntries();\r\n                    entries.forEach((entry) => {\r\n                        this.metrics.fid = Math.round(entry.processingStart - entry.startTime);\r\n                        \r\n                        // Report slow FID\r\n                        if (this.metrics.fid > 100) {\r\n                            this.reportMetric('fid_slow', this.metrics.fid);\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                observer.observe({ type: 'first-input', buffered: true });\r\n                this.observers.set('fid', observer);\r\n            } catch (e) {\r\n                console.warn('FID measurement not supported:', e);\r\n            }\r\n        }\r\n    }\r\n    \r\n    observeCLS() {\r\n        if ('PerformanceObserver' in window) {\r\n            try {\r\n                let clsValue = 0;\r\n                let clsEntries = [];\r\n                \r\n                const observer = new PerformanceObserver((list) => {\r\n                    const entries = list.getEntries();\r\n                    entries.forEach((entry) => {\r\n                        if (!entry.hadRecentInput) {\r\n                            clsEntries.push(entry);\r\n                            clsValue += entry.value;\r\n                        }\r\n                    });\r\n                    \r\n                    this.metrics.cls = Math.round(clsValue * 1000) / 1000;\r\n                    \r\n                    // Report high CLS\r\n                    if (this.metrics.cls > 0.1) {\r\n                        this.reportMetric('cls_high', this.metrics.cls);\r\n                        this.analyzeCLSCauses(clsEntries);\r\n                    }\r\n                });\r\n                \r\n                observer.observe({ type: 'layout-shift', buffered: true });\r\n                this.observers.set('cls', observer);\r\n            } catch (e) {\r\n                console.warn('CLS measurement not supported:', e);\r\n            }\r\n        }\r\n    }\r\n    \r\n    observeFCP() {\r\n        if ('PerformanceObserver' in window) {\r\n            try {\r\n                const observer = new PerformanceObserver((list) => {\r\n                    const entries = list.getEntries();\r\n                    const lastEntry = entries[entries.length - 1];\r\n                    this.metrics.fcp = Math.round(lastEntry.startTime);\r\n                });\r\n                \r\n                observer.observe({ type: 'paint', buffered: true });\r\n                this.observers.set('fcp', observer);\r\n            } catch (e) {\r\n                console.warn('FCP measurement not supported:', e);\r\n            }\r\n        }\r\n    }\r\n    \r\n    measureTTFB() {\r\n        if ('performance' in window && 'getEntriesByType' in performance) {\r\n            const navigation = performance.getEntriesByType('navigation')[0];\r\n            if (navigation) {\r\n                this.metrics.ttfb = Math.round(navigation.responseStart - navigation.requestStart);\r\n                \r\n                // Report slow TTFB\r\n                if (this.metrics.ttfb > 600) {\r\n                    this.reportMetric('ttfb_slow', this.metrics.ttfb);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    setupResourceMonitoring() {\r\n        if ('PerformanceObserver' in window) {\r\n            try {\r\n                const observer = new PerformanceObserver((list) => {\r\n                    const entries = list.getEntries();\r\n                    entries.forEach((entry) => {\r\n                        this.analyzeResourcePerformance(entry);\r\n                    });\r\n                });\r\n                \r\n                observer.observe({ type: 'resource', buffered: true });\r\n                this.observers.set('resource', observer);\r\n            } catch (e) {\r\n                console.warn('Resource monitoring not supported:', e);\r\n            }\r\n        }\r\n    }\r\n    \r\n    analyzeResourcePerformance(entry) {\r\n        const duration = entry.responseEnd - entry.requestStart;\r\n        const size = entry.transferSize || entry.decodedBodySize || 0;\r\n        \r\n        // Analyze different resource types\r\n        if (entry.initiatorType === 'img' && duration > 2000) {\r\n            this.reportMetric('slow_image', {\r\n                url: entry.name,\r\n                duration: Math.round(duration),\r\n                size: size\r\n            });\r\n        }\r\n        \r\n        if (entry.initiatorType === 'script' && duration > 3000) {\r\n            this.reportMetric('slow_script', {\r\n                url: entry.name,\r\n                duration: Math.round(duration),\r\n                size: size\r\n            });\r\n        }\r\n        \r\n        if (entry.initiatorType === 'link' && entry.name.includes('.css') && duration > 2000) {\r\n            this.reportMetric('slow_css', {\r\n                url: entry.name,\r\n                duration: Math.round(duration),\r\n                size: size\r\n            });\r\n        }\r\n        \r\n        // Monitor large resources\r\n        if (size > 1024 * 1024) { // 1MB\r\n            this.reportMetric('large_resource', {\r\n                url: entry.name,\r\n                size: size,\r\n                type: entry.initiatorType\r\n            });\r\n        }\r\n    }\r\n    \r\n    setupNetworkMonitoring() {\r\n        // Monitor network connection\r\n        if ('connection' in navigator) {\r\n            this.networkInfo = {\r\n                effectiveType: navigator.connection.effectiveType,\r\n                downlink: navigator.connection.downlink,\r\n                rtt: navigator.connection.rtt,\r\n                saveData: navigator.connection.saveData\r\n            };\r\n            \r\n            // Listen for network changes\r\n            navigator.connection.addEventListener('change', () => {\r\n                this.onNetworkChange();\r\n            });\r\n            \r\n            // Adapt based on connection quality\r\n            this.adaptToConnection();\r\n        }\r\n        \r\n        // Monitor online/offline status\r\n        window.addEventListener('online', () => this.onNetworkOnline());\r\n        window.addEventListener('offline', () => this.onNetworkOffline());\r\n    }\r\n    \r\n    onNetworkChange() {\r\n        const newInfo = {\r\n            effectiveType: navigator.connection.effectiveType,\r\n            downlink: navigator.connection.downlink,\r\n            rtt: navigator.connection.rtt,\r\n            saveData: navigator.connection.saveData\r\n        };\r\n        \r\n        // Report significant connection changes\r\n        if (this.networkInfo.effectiveType !== newInfo.effectiveType) {\r\n            this.reportMetric('network_change', {\r\n                from: this.networkInfo.effectiveType,\r\n                to: newInfo.effectiveType\r\n            });\r\n        }\r\n        \r\n        this.networkInfo = newInfo;\r\n        this.adaptToConnection();\r\n    }\r\n    \r\n    adaptToConnection() {\r\n        if (!this.networkInfo) return;\r\n        \r\n        const { effectiveType, saveData } = this.networkInfo;\r\n        \r\n        // Reduce quality for slow connections\r\n        if (effectiveType === '2g' || effectiveType === 'slow-2g' || saveData) {\r\n            this.enableDataSaverMode();\r\n        } else if (effectiveType === '4g') {\r\n            this.enableHighQualityMode();\r\n        }\r\n    }\r\n    \r\n    enableDataSaverMode() {\r\n        // Disable non-essential animations\r\n        document.body.classList.add('reduce-motion');\r\n        \r\n        // Reduce image quality\r\n        const images = document.querySelectorAll('img[data-src]');\r\n        images.forEach(img => {\r\n            if (img.dataset.srcLow) {\r\n                img.dataset.src = img.dataset.srcLow;\r\n            }\r\n        });\r\n        \r\n        // Disable auto-playing content\r\n        const videos = document.querySelectorAll('video[autoplay]');\r\n        videos.forEach(video => {\r\n            video.removeAttribute('autoplay');\r\n            video.pause();\r\n        });\r\n        \r\n        this.reportMetric('data_saver_enabled', true);\r\n    }\r\n    \r\n    enableHighQualityMode() {\r\n        // Enable high quality features\r\n        document.body.classList.remove('reduce-motion');\r\n        \r\n        // Use high quality images\r\n        const images = document.querySelectorAll('img[data-src]');\r\n        images.forEach(img => {\r\n            if (img.dataset.srcHigh) {\r\n                img.dataset.src = img.dataset.srcHigh;\r\n            }\r\n        });\r\n        \r\n        // Enable enhanced animations\r\n        document.body.classList.add('enhanced-animations');\r\n    }\r\n    \r\n    onNetworkOnline() {\r\n        this.reportMetric('network_online', Date.now());\r\n        \r\n        // Sync any pending data\r\n        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\r\n            navigator.serviceWorker.controller.postMessage({\r\n                type: 'SYNC_WHEN_ONLINE'\r\n            });\r\n        }\r\n    }\r\n    \r\n    onNetworkOffline() {\r\n        this.reportMetric('network_offline', Date.now());\r\n        \r\n        // Show offline indicator\r\n        this.showOfflineIndicator();\r\n    }\r\n    \r\n    setupMemoryMonitoring() {\r\n        if ('memory' in performance) {\r\n            // Monitor memory usage periodically\r\n            setInterval(() => {\r\n                const memory = performance.memory;\r\n                const memoryInfo = {\r\n                    used: Math.round(memory.usedJSHeapSize / 1024 / 1024),\r\n                    total: Math.round(memory.totalJSHeapSize / 1024 / 1024),\r\n                    limit: Math.round(memory.jsHeapSizeLimit / 1024 / 1024)\r\n                };\r\n                \r\n                // Warn about high memory usage\r\n                const usage = memoryInfo.used / memoryInfo.limit;\r\n                if (usage > 0.8) {\r\n                    this.reportMetric('high_memory_usage', memoryInfo);\r\n                    this.triggerMemoryCleanup();\r\n                }\r\n            }, 30000); // Check every 30 seconds\r\n        }\r\n    }\r\n    \r\n    triggerMemoryCleanup() {\r\n        // Clear unnecessary observers\r\n        this.observers.forEach((observer, key) => {\r\n            if (key !== 'lcp' && key !== 'fid' && key !== 'cls') {\r\n                observer.disconnect();\r\n                this.observers.delete(key);\r\n            }\r\n        });\r\n        \r\n        // Clear caches if possible\r\n        if ('caches' in window) {\r\n            caches.keys().then(cacheNames => {\r\n                cacheNames.forEach(cacheName => {\r\n                    if (cacheName.includes('old') || cacheName.includes('temp')) {\r\n                        caches.delete(cacheName);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        \r\n        // Force garbage collection if available\r\n        if (window.gc) {\r\n            window.gc();\r\n        }\r\n    }\r\n    \r\n    setupServiceWorkerIntegration() {\r\n        if ('serviceWorker' in navigator) {\r\n            navigator.serviceWorker.addEventListener('message', (event) => {\r\n                const { type, data } = event.data;\r\n                \r\n                switch (type) {\r\n                    case 'CACHE_PERFORMANCE':\r\n                        this.reportMetric('cache_hit_rate', data);\r\n                        break;\r\n                    case 'OFFLINE_FALLBACK':\r\n                        this.reportMetric('offline_fallback_used', data);\r\n                        break;\r\n                    case 'UPDATE_AVAILABLE':\r\n                        this.handleServiceWorkerUpdate();\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    handleServiceWorkerUpdate() {\r\n        // Show update notification\r\n        if (window.showToast) {\r\n            window.showToast(\r\n                'A new version is available',\r\n                'info',\r\n                {\r\n                    autoDismiss: false,\r\n                    actions: [{\r\n                        text: 'Reload',\r\n                        handler: () => window.location.reload()\r\n                    }, {\r\n                        text: 'Later',\r\n                        handler: () => {}\r\n                    }]\r\n                }\r\n            );\r\n        }\r\n    }\r\n    \r\n    onDOMReady() {\r\n        // Measure DOM metrics\r\n        this.metrics.domContentLoaded = performance.now();\r\n        \r\n        // Setup intersection observers for lazy loading\r\n        this.setupLazyLoading();\r\n        \r\n        // Initialize critical performance optimizations\r\n        this.optimizeCriticalResources();\r\n        \r\n        // Start monitoring user interactions\r\n        this.setupInteractionMonitoring();\r\n    }\r\n    \r\n    setupLazyLoading() {\r\n        // Global guard to prevent duplicate lazy loading initialization\r\n        if (window.__imgLazyOwner) return;\r\n        window.__imgLazyOwner = 'performance';\r\n        \r\n        if ('IntersectionObserver' in window) {\r\n            // Lazy load images\r\n            const imageObserver = new IntersectionObserver((entries, observer) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        const img = entry.target;\r\n                        this.loadImage(img);\r\n                        observer.unobserve(img);\r\n                    }\r\n                });\r\n            }, {\r\n                rootMargin: '50px 0px',\r\n                threshold: 0.1\r\n            });\r\n            \r\n            // Observe all images with data-src\r\n            document.querySelectorAll('img[data-src]').forEach(img => {\r\n                img.classList.add('lazy');\r\n                imageObserver.observe(img);\r\n            });\r\n            \r\n            // Lazy load other content\r\n            const contentObserver = new IntersectionObserver((entries) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        const element = entry.target;\r\n                        this.loadDeferredContent(element);\r\n                        contentObserver.unobserve(element);\r\n                    }\r\n                });\r\n            }, {\r\n                rootMargin: '100px 0px',\r\n                threshold: 0.1\r\n            });\r\n            \r\n            document.querySelectorAll('[data-lazy-content]').forEach(element => {\r\n                contentObserver.observe(element);\r\n            });\r\n        }\r\n    }\r\n    \r\n    loadImage(img) {\r\n        const startTime = performance.now();\r\n        \r\n        // Choose appropriate image source based on device capabilities\r\n        let src = img.dataset.src;\r\n        \r\n        if (this.networkInfo?.saveData || this.networkInfo?.effectiveType === '2g') {\r\n            src = img.dataset.srcLow || src;\r\n        } else if (window.devicePixelRatio > 2) {\r\n            src = img.dataset.srcHigh || src;\r\n        }\r\n        \r\n        // Create a new image element to preload\r\n        const newImg = new Image();\r\n        \r\n        newImg.onload = () => {\r\n            const loadTime = performance.now() - startTime;\r\n            \r\n            img.src = src;\r\n            img.classList.remove('lazy');\r\n            img.classList.add('loaded');\r\n            \r\n            // Store original HTML for consistency with main.js loading functions\r\n            if (!img.getAttribute('data-original-html')) {\r\n                img.setAttribute('data-original-html', img.outerHTML);\r\n            }\r\n            \r\n            // Report image load performance\r\n            if (loadTime > 2000) {\r\n                this.reportMetric('slow_image_load', {\r\n                    src: src,\r\n                    loadTime: Math.round(loadTime)\r\n                });\r\n            }\r\n        };\r\n        \r\n        newImg.onerror = () => {\r\n            img.classList.add('error');\r\n            img.src = img.dataset.fallback || '/static/images/placeholder.svg';\r\n            \r\n            this.reportMetric('image_load_error', {\r\n                src: src,\r\n                fallback: img.dataset.fallback\r\n            });\r\n        };\r\n        \r\n        newImg.src = src;\r\n    }\r\n    \r\n    loadDeferredContent(element) {\r\n        const contentType = element.dataset.lazyContent;\r\n        \r\n        switch (contentType) {\r\n            case 'widget':\r\n                this.loadWidget(element);\r\n                break;\r\n            case 'chart':\r\n                this.loadChart(element);\r\n                break;\r\n            case 'social':\r\n                this.loadSocialEmbed(element);\r\n                break;\r\n            default:\r\n                this.loadGenericContent(element);\r\n        }\r\n    }\r\n    \r\n    optimizeCriticalResources() {\r\n        // Preload critical resources\r\n        this.preloadCriticalResources();\r\n        \r\n        // Optimize font loading\r\n        this.optimizeFonts();\r\n        \r\n        // Optimize third-party scripts\r\n        this.optimizeThirdPartyScripts();\r\n    }\r\n    \r\n    preloadCriticalResources() {\r\n        const criticalResources = [\r\n            { href: '/static/css/components.css', as: 'style' },\r\n            { href: '/static/js/ui-enhancements.js', as: 'script' },\r\n            // Add more critical resources as needed\r\n        ];\r\n        \r\n        criticalResources.forEach(resource => {\r\n            const link = document.createElement('link');\r\n            link.rel = 'preload';\r\n            link.href = resource.href;\r\n            link.as = resource.as;\r\n            \r\n            if (resource.as === 'script') {\r\n                link.crossOrigin = 'anonymous';\r\n            }\r\n            \r\n            document.head.appendChild(link);\r\n        });\r\n    }\r\n    \r\n    optimizeFonts() {\r\n        // Use font-display: swap for web fonts\r\n        const fontFaces = document.querySelectorAll('@font-face, link[rel=\"stylesheet\"][href*=\"fonts\"]');\r\n        \r\n        // Preload critical fonts\r\n        const criticalFonts = [\r\n            '/static/fonts/primary-font.woff2',\r\n            // Add other critical fonts\r\n        ];\r\n        \r\n        criticalFonts.forEach(fontUrl => {\r\n            const link = document.createElement('link');\r\n            link.rel = 'preload';\r\n            link.href = fontUrl;\r\n            link.as = 'font';\r\n            link.type = 'font/woff2';\r\n            link.crossOrigin = 'anonymous';\r\n            document.head.appendChild(link);\r\n        });\r\n    }\r\n    \r\n    optimizeThirdPartyScripts() {\r\n        // Load third-party scripts with optimal timing\r\n        const thirdPartyScripts = document.querySelectorAll('script[data-defer]');\r\n        \r\n        thirdPartyScripts.forEach(script => {\r\n            if (script.dataset.defer === 'interaction') {\r\n                this.loadOnInteraction(script);\r\n            } else if (script.dataset.defer === 'idle') {\r\n                this.loadOnIdle(script);\r\n            }\r\n        });\r\n    }\r\n    \r\n    loadOnInteraction(script) {\r\n        const events = ['mousedown', 'touchstart', 'keydown', 'scroll'];\r\n        \r\n        const loadScript = () => {\r\n            script.src = script.dataset.src;\r\n            events.forEach(event => {\r\n                document.removeEventListener(event, loadScript, { passive: true });\r\n            });\r\n        };\r\n        \r\n        events.forEach(event => {\r\n            document.addEventListener(event, loadScript, { passive: true });\r\n        });\r\n    }\r\n    \r\n    loadOnIdle(script) {\r\n        if ('requestIdleCallback' in window) {\r\n            requestIdleCallback(() => {\r\n                script.src = script.dataset.src;\r\n            });\r\n        } else {\r\n            setTimeout(() => {\r\n                script.src = script.dataset.src;\r\n            }, 2000);\r\n        }\r\n    }\r\n    \r\n    setupInteractionMonitoring() {\r\n        // Monitor user interactions for performance impact\r\n        const interactionEvents = ['click', 'scroll', 'keydown', 'mousemove'];\r\n        \r\n        interactionEvents.forEach(eventType => {\r\n            document.addEventListener(eventType, (event) => {\r\n                this.measureInteractionPerformance(event);\r\n            }, { passive: true });\r\n        });\r\n    }\r\n    \r\n    measureInteractionPerformance(event) {\r\n        const startTime = performance.now();\r\n        \r\n        // Measure interaction response time\r\n        requestAnimationFrame(() => {\r\n            const responseTime = performance.now() - startTime;\r\n            \r\n            if (responseTime > 100) {\r\n                this.reportMetric('slow_interaction', {\r\n                    type: event.type,\r\n                    responseTime: Math.round(responseTime),\r\n                    target: event.target.tagName.toLowerCase()\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    setupReporting() {\r\n        // Report metrics periodically\r\n        setInterval(() => {\r\n            this.reportCurrentMetrics();\r\n        }, 30000);\r\n        \r\n        // Report on page unload\r\n        window.addEventListener('beforeunload', () => {\r\n            this.reportFinalMetrics();\r\n        });\r\n        \r\n        // Report on visibility change\r\n        document.addEventListener('visibilitychange', () => {\r\n            if (document.visibilityState === 'hidden') {\r\n                this.reportFinalMetrics();\r\n            }\r\n        });\r\n    }\r\n    \r\n    reportMetric(name, value) {\r\n        if (!this.isRecording) return;\r\n        \r\n        const metric = {\r\n            metric_type: name,\r\n            value: value,\r\n            url: window.location.href,\r\n            additional_data: {\r\n                timestamp: Date.now(),\r\n                networkInfo: this.networkInfo,\r\n                viewport: {\r\n                    width: window.innerWidth,\r\n                    height: window.innerHeight\r\n                }\r\n            }\r\n        };\r\n        \r\n        // Send to analytics endpoint (implement based on your needs)\r\n        this.sendMetric(metric);\r\n        \r\n        // Log to console in development\r\n        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\r\n            console.log('📊 Performance Metric:', metric);\r\n        }\r\n    }\r\n    \r\n    sendMetric(metric) {\r\n        // Use sendBeacon for reliable delivery\r\n        if (navigator.sendBeacon) {\r\n            const data = JSON.stringify(metric);\r\n            navigator.sendBeacon(this.reportingEndpoint, data);\r\n        } else {\r\n            // Fallback to fetch\r\n            fetch(this.reportingEndpoint, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRFToken': window.performanceUtils.getCSRFToken()\r\n                },\r\n                body: JSON.stringify(metric)\r\n            }).catch(error => {\r\n                console.warn('Failed to send performance metric:', error);\r\n            });\r\n        }\r\n    }\r\n    \r\n    reportCurrentMetrics() {\r\n        if (Object.values(this.metrics).some(v => v !== null)) {\r\n            this.reportMetric('core_vitals', { ...this.metrics });\r\n        }\r\n    }\r\n    \r\n    reportFinalMetrics() {\r\n        // Calculate final load time\r\n        this.metrics.loadComplete = performance.now();\r\n        \r\n        // Report final metrics\r\n        this.reportMetric('page_complete', {\r\n            metrics: this.metrics,\r\n            timing: this.getNavigationTiming(),\r\n            resources: this.getResourceSummary()\r\n        });\r\n    }\r\n    \r\n    getNavigationTiming() {\r\n        if ('performance' in window && 'getEntriesByType' in performance) {\r\n            const navigation = performance.getEntriesByType('navigation')[0];\r\n            if (navigation) {\r\n                return {\r\n                    dns: Math.round(navigation.domainLookupEnd - navigation.domainLookupStart),\r\n                    connection: Math.round(navigation.connectEnd - navigation.connectStart),\r\n                    request: Math.round(navigation.responseStart - navigation.requestStart),\r\n                    response: Math.round(navigation.responseEnd - navigation.responseStart),\r\n                    dom: Math.round(navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart),\r\n                    load: Math.round(navigation.loadEventEnd - navigation.loadEventStart)\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    getResourceSummary() {\r\n        if ('performance' in window && 'getEntriesByType' in performance) {\r\n            const resources = performance.getEntriesByType('resource');\r\n            const summary = {\r\n                total: resources.length,\r\n                scripts: 0,\r\n                styles: 0,\r\n                images: 0,\r\n                fonts: 0,\r\n                other: 0,\r\n                totalSize: 0\r\n            };\r\n            \r\n            resources.forEach(resource => {\r\n                const size = resource.transferSize || resource.decodedBodySize || 0;\r\n                summary.totalSize += size;\r\n                \r\n                switch (resource.initiatorType) {\r\n                    case 'script':\r\n                        summary.scripts++;\r\n                        break;\r\n                    case 'link':\r\n                        if (resource.name.includes('.css')) {\r\n                            summary.styles++;\r\n                        } else {\r\n                            summary.other++;\r\n                        }\r\n                        break;\r\n                    case 'img':\r\n                        summary.images++;\r\n                        break;\r\n                    default:\r\n                        if (resource.name.includes('font') || resource.name.includes('.woff')) {\r\n                            summary.fonts++;\r\n                        } else {\r\n                            summary.other++;\r\n                        }\r\n                }\r\n            });\r\n            \r\n            return summary;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    analyzeCLSCauses(entries) {\r\n        // Analyze what's causing layout shifts\r\n        entries.forEach(entry => {\r\n            entry.sources.forEach(source => {\r\n                this.reportMetric('cls_source', {\r\n                    element: source.node?.tagName || 'unknown',\r\n                    previousRect: source.previousRect,\r\n                    currentRect: source.currentRect\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    showOfflineIndicator() {\r\n        // Show offline status to user\r\n        if (window.showToast) {\r\n            window.showToast('You are currently offline', 'warning', {\r\n                duration: 0,\r\n                actions: [{\r\n                    text: 'Dismiss',\r\n                    handler: () => {}\r\n                }]\r\n            });\r\n        }\r\n    }\r\n    \r\n    // Public API methods\r\n    getMetrics() {\r\n        return { ...this.metrics };\r\n    }\r\n    \r\n    getNetworkInfo() {\r\n        return { ...this.networkInfo };\r\n    }\r\n    \r\n    startRecording() {\r\n        this.isRecording = true;\r\n    }\r\n    \r\n    stopRecording() {\r\n        this.isRecording = false;\r\n    }\r\n    \r\n    clearMetrics() {\r\n        Object.keys(this.metrics).forEach(key => {\r\n            this.metrics[key] = null;\r\n        });\r\n    }\r\n    \r\n    disconnect() {\r\n        // Clean up all observers\r\n        this.observers.forEach(observer => {\r\n            observer.disconnect();\r\n        });\r\n        this.observers.clear();\r\n        \r\n        this.isRecording = false;\r\n        console.log('📊 Performance Monitor disconnected');\r\n    }\r\n}\r\n\r\n// Initialize performance monitor\r\nconst performanceMonitor = new PerformanceMonitor();\r\n\r\n// Export for global access\r\nwindow.performanceMonitor = performanceMonitor;\r\n\r\n// Expose utilities\r\nwindow.performanceUtils = {\r\n    // Measure function execution time\r\n    measure: (fn, name = 'function') => {\r\n        const start = performance.now();\r\n        const result = fn();\r\n        const end = performance.now();\r\n        \r\n        console.log(`⏱️ ${name} took ${Math.round(end - start)}ms`);\r\n        performanceMonitor.reportMetric('function_timing', {\r\n            name: name,\r\n            duration: Math.round(end - start)\r\n        });\r\n        \r\n        return result;\r\n    },\r\n    \r\n    // Measure async function execution time\r\n    measureAsync: async (fn, name = 'async function') => {\r\n        const start = performance.now();\r\n        const result = await fn();\r\n        const end = performance.now();\r\n        \r\n        console.log(`⏱️ ${name} took ${Math.round(end - start)}ms`);\r\n        performanceMonitor.reportMetric('async_function_timing', {\r\n            name: name,\r\n            duration: Math.round(end - start)\r\n        });\r\n        \r\n        return result;\r\n    },\r\n    \r\n    // Get CSRF token helper\r\n    getCSRFToken: () => {\r\n        const name = 'csrftoken';\r\n        const cookies = document.cookie.split(';');\r\n        for (let cookie of cookies) {\r\n            cookie = cookie.trim();\r\n            if (cookie.startsWith(name + '=')) {\r\n                return cookie.substring(name.length + 1);\r\n            }\r\n        }\r\n        // Fallback: try to get from meta tag\r\n        const metaTag = document.querySelector('meta[name=\"csrf-token\"]');\r\n        return metaTag ? metaTag.getAttribute('content') : '';\r\n    },\r\n    \r\n    // Get current performance state\r\n    getPerformanceState: () => {\r\n        return {\r\n            metrics: performanceMonitor.getMetrics(),\r\n            network: performanceMonitor.getNetworkInfo(),\r\n            memory: performance.memory ? {\r\n                used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),\r\n                total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),\r\n                limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)\r\n            } : null\r\n        };\r\n    }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]}