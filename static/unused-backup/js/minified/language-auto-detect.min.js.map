{"version":3,"file":"language-auto-detect.min.js","names":["LanguageAutoDetect","constructor","this","supportedLanguages","defaultLanguage","currentLanguage","getCurrentLanguage","init","hasLanguagePreference","autoDetectLanguage","setupLanguageSwitcher","setupPagePersistence","browserLanguages","navigator","languages","language","userLanguage","lang","languageCode","split","toLowerCase","includes","setLanguagePreference","switchToLanguage","currentPath","window","location","pathname","currentSearch","search","document","addEventListener","e","handleLanguageSwitch","detail","showFeedback","showLanguageSwitchFeedback","newUrl","buildLanguageUrl","event","CustomEvent","from","to","url","dispatchEvent","href","baseUrl","origin","path","searchParams","URLSearchParams","set","newSearch","toString","indicator","getElementById","createElement","id","className","body","appendChild","languageName","textContent","gettext","style","opacity","transform","setTimeout","updateLanguageSwitcherState","querySelectorAll","forEach","switcher","getAttribute","classList","add","setAttribute","remove","removeAttribute","urlLang","get","htmlLang","documentElement","storedLang","localStorage","getItem","setItem","gtag","from_language","to_language","updateLanguageDependentContent","dir","element","getLanguagePreference","current","stored","browser","supported","languageAutoDetect"],"sources":["0"],"sourcesContent":["/**\r\n * Language Auto-Detection and UX Optimization\r\n * Automatically detects user's preferred language and improves language switching UX\r\n */\r\n\r\nclass LanguageAutoDetect {\r\n    constructor() {\r\n        this.supportedLanguages = ['tr', 'en'];\r\n        this.defaultLanguage = 'en';\r\n        this.currentLanguage = this.getCurrentLanguage();\r\n        \r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * Initialize the language auto-detection system\r\n     */\r\n    init() {\r\n        // Auto-detect language on first visit\r\n        if (!this.hasLanguagePreference()) {\r\n            this.autoDetectLanguage();\r\n        }\r\n\r\n        // Setup language switching UX\r\n        this.setupLanguageSwitcher();\r\n        \r\n        // Setup page persistence for language changes\r\n        this.setupPagePersistence();\r\n        \r\n        console.log('[Language] Auto-detection initialized');\r\n    }\r\n\r\n    /**\r\n     * Auto-detect user's preferred language from browser settings\r\n     */\r\n    autoDetectLanguage() {\r\n        // Get browser languages in order of preference\r\n        const browserLanguages = navigator.languages || [navigator.language || navigator.userLanguage];\r\n        \r\n        // Find the first supported language\r\n        for (const lang of browserLanguages) {\r\n            const languageCode = lang.split('-')[0].toLowerCase();\r\n            \r\n            if (this.supportedLanguages.includes(languageCode)) {\r\n                console.log(`[Language] Auto-detected: ${languageCode} from browser preferences`);\r\n                this.setLanguagePreference(languageCode);\r\n                \r\n                // Only redirect if we're on a different language\r\n                if (this.currentLanguage !== languageCode) {\r\n                    this.switchToLanguage(languageCode, false); // No reload, just switch\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Fallback to default language\r\n        console.log(`[Language] Using default language: ${this.defaultLanguage}`);\r\n        this.setLanguagePreference(this.defaultLanguage);\r\n    }\r\n\r\n    /**\r\n     * Setup enhanced language switcher UX\r\n     * NOTE: Disabled to avoid conflict with language-manager.js\r\n     */\r\n    setupLanguageSwitcher() {\r\n        // Language switching is handled by language-manager.js\r\n        // This method is kept for future enhancements\r\n        console.log('[Language Auto-detect] Language switching delegated to language-manager.js');\r\n    }\r\n\r\n    /**\r\n     * Setup page persistence - keep user on same page when switching languages\r\n     */\r\n    setupPagePersistence() {\r\n        // Store current page info for language switches\r\n        this.currentPath = window.location.pathname;\r\n        this.currentSearch = window.location.search;\r\n        \r\n        // Listen for language change events\r\n        document.addEventListener('language-switched', (e) => {\r\n            this.handleLanguageSwitch(e.detail);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Switch to a specific language with UX improvements\r\n     */\r\n    switchToLanguage(language, showFeedback = true) {\r\n        if (!this.supportedLanguages.includes(language)) {\r\n            console.warn(`[Language] Unsupported language: ${language}`);\r\n            return;\r\n        }\r\n\r\n        // Store language preference\r\n        this.setLanguagePreference(language);\r\n        \r\n        // Show loading feedback if requested\r\n        if (showFeedback) {\r\n            this.showLanguageSwitchFeedback(language);\r\n        }\r\n\r\n        // Build new URL preserving current page\r\n        const newUrl = this.buildLanguageUrl(language);\r\n        \r\n        // Dispatch custom event\r\n        const event = new CustomEvent('language-switched', {\r\n            detail: { \r\n                from: this.currentLanguage, \r\n                to: language, \r\n                url: newUrl \r\n            }\r\n        });\r\n        document.dispatchEvent(event);\r\n        \r\n        // Navigate to new language version\r\n        window.location.href = newUrl;\r\n    }\r\n\r\n    /**\r\n     * Build URL for language switch while preserving current page\r\n     */\r\n    buildLanguageUrl(language) {\r\n        const baseUrl = window.location.origin;\r\n        let path = this.currentPath;\r\n        let search = this.currentSearch;\r\n\r\n        // Remove existing language parameter\r\n        const searchParams = new URLSearchParams(search);\r\n        searchParams.set('lang', language);\r\n        \r\n        // Build final URL\r\n        const newSearch = searchParams.toString();\r\n        return `${baseUrl}${path}${newSearch ? '?' + newSearch : ''}`;\r\n    }\r\n\r\n    /**\r\n     * Show user feedback during language switch\r\n     */\r\n    showLanguageSwitchFeedback(language) {\r\n        // Create or update language switch indicator\r\n        let indicator = document.getElementById('language-switch-indicator');\r\n        \r\n        if (!indicator) {\r\n            indicator = document.createElement('div');\r\n            indicator.id = 'language-switch-indicator';\r\n            indicator.className = 'fixed top-4 right-4 bg-primary-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-all duration-300';\r\n            document.body.appendChild(indicator);\r\n        }\r\n\r\n        const languageName = language === 'tr' ? 'Türkçe' : 'English';\r\n        indicator.textContent = `${gettext ? gettext('Switching to') : 'Switching to'} ${languageName}...`;\r\n        indicator.style.opacity = '1';\r\n        indicator.style.transform = 'translateX(0)';\r\n\r\n        // Hide after delay\r\n        setTimeout(() => {\r\n            if (indicator) {\r\n                indicator.style.opacity = '0';\r\n                indicator.style.transform = 'translateX(100%)';\r\n            }\r\n        }, 1500);\r\n    }\r\n\r\n    /**\r\n     * Update language switcher visual state\r\n     */\r\n    updateLanguageSwitcherState() {\r\n        const languageSwitchers = document.querySelectorAll('[data-language-switch]');\r\n        \r\n        languageSwitchers.forEach(switcher => {\r\n            const switcherLanguage = switcher.getAttribute('data-language-switch');\r\n            \r\n            if (switcherLanguage === this.currentLanguage) {\r\n                switcher.classList.add('active', 'font-semibold');\r\n                switcher.setAttribute('aria-current', 'true');\r\n            } else {\r\n                switcher.classList.remove('active', 'font-semibold');\r\n                switcher.removeAttribute('aria-current');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get current language from URL, localStorage, or default\r\n     */\r\n    getCurrentLanguage() {\r\n        // Check URL parameter first\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const urlLang = urlParams.get('lang');\r\n        \r\n        if (urlLang && this.supportedLanguages.includes(urlLang)) {\r\n            return urlLang;\r\n        }\r\n\r\n        // Check HTML lang attribute\r\n        const htmlLang = document.documentElement.lang;\r\n        if (htmlLang && this.supportedLanguages.includes(htmlLang.split('-')[0])) {\r\n            return htmlLang.split('-')[0];\r\n        }\r\n\r\n        // Check localStorage\r\n        const storedLang = localStorage.getItem('preferred-language');\r\n        if (storedLang && this.supportedLanguages.includes(storedLang)) {\r\n            return storedLang;\r\n        }\r\n\r\n        return this.defaultLanguage;\r\n    }\r\n\r\n    /**\r\n     * Check if user has a language preference set\r\n     */\r\n    hasLanguagePreference() {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const urlLang = urlParams.get('lang');\r\n        const storedLang = localStorage.getItem('preferred-language');\r\n        \r\n        return !!(urlLang || storedLang);\r\n    }\r\n\r\n    /**\r\n     * Store language preference\r\n     */\r\n    setLanguagePreference(language) {\r\n        localStorage.setItem('preferred-language', language);\r\n        \r\n        // Update HTML lang attribute\r\n        document.documentElement.lang = language;\r\n        \r\n        this.currentLanguage = language;\r\n    }\r\n\r\n    /**\r\n     * Handle language switch event\r\n     */\r\n    handleLanguageSwitch(detail) {\r\n        console.log(`[Language] Switching from ${detail.from} to ${detail.to}`);\r\n        \r\n        // Update analytics if available\r\n        if (window.gtag) {\r\n            gtag('event', 'language_switch', {\r\n                'from_language': detail.from,\r\n                'to_language': detail.to\r\n            });\r\n        }\r\n        \r\n        // Update any language-dependent content immediately\r\n        this.updateLanguageDependentContent(detail.to);\r\n    }\r\n\r\n    /**\r\n     * Update content that depends on language immediately (before page reload)\r\n     */\r\n    updateLanguageDependentContent(language) {\r\n        // Update direction if needed (for RTL languages in future)\r\n        document.documentElement.dir = 'ltr'; // Default for tr and en\r\n        \r\n        // Update any immediate UI elements\r\n        const currentLangElements = document.querySelectorAll('[data-current-language]');\r\n        currentLangElements.forEach(element => {\r\n            element.textContent = language === 'tr' ? 'Türkçe' : 'English';\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get user's language preference\r\n     */\r\n    getLanguagePreference() {\r\n        return {\r\n            current: this.currentLanguage,\r\n            stored: localStorage.getItem('preferred-language'),\r\n            browser: navigator.language,\r\n            supported: this.supportedLanguages\r\n        };\r\n    }\r\n}\r\n\r\n// Initialize when DOM is ready\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    window.languageAutoDetect = new LanguageAutoDetect();\r\n});\r\n\r\n// Export for global access\r\nwindow.LanguageAutoDetect = LanguageAutoDetect;"],"mappings":"AAKA,MAAMA,mBACF,WAAAC,GACIC,KAAKC,mBAAqB,CAAC,KAAM,MACjCD,KAAKE,gBAAkB,KACvBF,KAAKG,gBAAkBH,KAAKI,qBAE5BJ,KAAKK,MACT,CAKA,IAAAA,GAESL,KAAKM,yBACNN,KAAKO,qBAITP,KAAKQ,wBAGLR,KAAKS,sBAGT,CAKA,kBAAAF,GAEI,MAAMG,EAAmBC,UAAUC,WAAa,CAACD,UAAUE,UAAYF,UAAUG,cAGjF,IAAK,MAAMC,KAAQL,EAAkB,CACjC,MAAMM,EAAeD,EAAKE,MAAM,KAAK,GAAGC,cAExC,GAAIlB,KAAKC,mBAAmBkB,SAASH,GAQjC,OANAhB,KAAKoB,sBAAsBJ,QAGvBhB,KAAKG,kBAAoBa,GACzBhB,KAAKqB,iBAAiBL,GAAc,GAIhD,CAIAhB,KAAKoB,sBAAsBpB,KAAKE,gBACpC,CAMA,qBAAAM,GAIA,CAKA,oBAAAC,GAEIT,KAAKsB,YAAcC,OAAOC,SAASC,SACnCzB,KAAK0B,cAAgBH,OAAOC,SAASG,OAGrCC,SAASC,iBAAiB,oBAAsBC,IAC5C9B,KAAK+B,qBAAqBD,EAAEE,SAEpC,CAKA,gBAAAX,CAAiBR,EAAUoB,GAAe,GACtC,IAAKjC,KAAKC,mBAAmBkB,SAASN,GAElC,OAIJb,KAAKoB,sBAAsBP,GAGvBoB,GACAjC,KAAKkC,2BAA2BrB,GAIpC,MAAMsB,EAASnC,KAAKoC,iBAAiBvB,GAG/BwB,EAAQ,IAAIC,YAAY,oBAAqB,CAC/CN,OAAQ,CACJO,KAAMvC,KAAKG,gBACXqC,GAAI3B,EACJ4B,IAAKN,KAGbP,SAASc,cAAcL,GAGvBd,OAAOC,SAASmB,KAAOR,CAC3B,CAKA,gBAAAC,CAAiBvB,GACb,MAAM+B,EAAUrB,OAAOC,SAASqB,OAChC,IAAIC,EAAO9C,KAAKsB,YACZK,EAAS3B,KAAK0B,cAGlB,MAAMqB,EAAe,IAAIC,gBAAgBrB,GACzCoB,EAAaE,IAAI,OAAQpC,GAGzB,MAAMqC,EAAYH,EAAaI,WAC/B,MAAO,GAAGP,IAAUE,IAAOI,EAAY,IAAMA,EAAY,IAC7D,CAKA,0BAAAhB,CAA2BrB,GAEvB,IAAIuC,EAAYxB,SAASyB,eAAe,6BAEnCD,IACDA,EAAYxB,SAAS0B,cAAc,OACnCF,EAAUG,GAAK,4BACfH,EAAUI,UAAY,gHACtB5B,SAAS6B,KAAKC,YAAYN,IAG9B,MAAMO,EAA4B,OAAb9C,EAAoB,SAAW,UACpDuC,EAAUQ,YAAc,GAAGC,QAAUA,QAAQ,gBAAkB,kBAAkBF,OACjFP,EAAUU,MAAMC,QAAU,IAC1BX,EAAUU,MAAME,UAAY,gBAG5BC,WAAW,KACHb,IACAA,EAAUU,MAAMC,QAAU,IAC1BX,EAAUU,MAAME,UAAY,qBAEjC,KACP,CAKA,2BAAAE,GAC8BtC,SAASuC,iBAAiB,0BAElCC,QAAQC,IACGA,EAASC,aAAa,0BAEtBtE,KAAKG,iBAC1BkE,EAASE,UAAUC,IAAI,SAAU,iBACjCH,EAASI,aAAa,eAAgB,UAEtCJ,EAASE,UAAUG,OAAO,SAAU,iBACpCL,EAASM,gBAAgB,kBAGrC,CAKA,kBAAAvE,GAEI,MACMwE,EADY,IAAI5B,gBAAgBzB,OAAOC,SAASG,QAC5BkD,IAAI,QAE9B,GAAID,GAAW5E,KAAKC,mBAAmBkB,SAASyD,GAC5C,OAAOA,EAIX,MAAME,EAAWlD,SAASmD,gBAAgBhE,KAC1C,GAAI+D,GAAY9E,KAAKC,mBAAmBkB,SAAS2D,EAAS7D,MAAM,KAAK,IACjE,OAAO6D,EAAS7D,MAAM,KAAK,GAI/B,MAAM+D,EAAaC,aAAaC,QAAQ,sBACxC,OAAIF,GAAchF,KAAKC,mBAAmBkB,SAAS6D,GACxCA,EAGJhF,KAAKE,eAChB,CAKA,qBAAAI,GACI,MACMsE,EADY,IAAI5B,gBAAgBzB,OAAOC,SAASG,QAC5BkD,IAAI,QACxBG,EAAaC,aAAaC,QAAQ,sBAExC,SAAUN,IAAWI,EACzB,CAKA,qBAAA5D,CAAsBP,GAClBoE,aAAaE,QAAQ,qBAAsBtE,GAG3Ce,SAASmD,gBAAgBhE,KAAOF,EAEhCb,KAAKG,gBAAkBU,CAC3B,CAKA,oBAAAkB,CAAqBC,GAIbT,OAAO6D,MACPA,KAAK,QAAS,kBAAmB,CAC7BC,cAAiBrD,EAAOO,KACxB+C,YAAetD,EAAOQ,KAK9BxC,KAAKuF,+BAA+BvD,EAAOQ,GAC/C,CAKA,8BAAA+C,CAA+B1E,GAE3Be,SAASmD,gBAAgBS,IAAM,MAGH5D,SAASuC,iBAAiB,2BAClCC,QAAQqB,IACxBA,EAAQ7B,YAA2B,OAAb/C,EAAoB,SAAW,WAE7D,CAKA,qBAAA6E,GACI,MAAO,CACHC,QAAS3F,KAAKG,gBACdyF,OAAQX,aAAaC,QAAQ,sBAC7BW,QAASlF,UAAUE,SACnBiF,UAAW9F,KAAKC,mBAExB,EAIJ2B,SAASC,iBAAiB,mBAAoB,KAC1CN,OAAOwE,mBAAqB,IAAIjG,qBAIpCyB,OAAOzB,mBAAqBA","ignoreList":[]}