{"version":3,"file":"pwa.min.js","names":["VERSION","PWAManager","constructor","this","version","swRegistration","pushSubscription","deferredPrompt","networkStatus","navigator","onLine","installAnalytics","prompted","installed","dismissed","notificationPermission","Notification","permission","performanceObserver","init","initializeServiceWorker","initializePushNotifications","initializePerformanceMonitoring","handleInstallPrompt","handleNetworkStatus","initializeStorageManagement","setupErrorHandling","serviceWorker","register","scope","updateViaCache","addEventListener","newWorker","installing","state","controller","showUpdateNotification","event","handleServiceWorkerMessage","setupUpdateCheck","error","logError","window","pushManager","getSubscription","syncPushSubscription","setupNotificationPermission","observeWebVitals","observeResourcePerformance","observeLongTasks","e","preventDefault","showInstallButton","hideInstallButton","logInstallEvent","subscribeToPushNotifications","topics","Error","requestPermission","vapidResponse","fetch","publicKey","json","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","response","method","headers","getCSRFToken","body","JSON","stringify","subscription","toJSON","user_agent","userAgent","url","location","href","ok","status","unsubscribeFromPushNotifications","endpoint","unsubscribe","showNotificationPrompt","permissions","query","name","then","result","hideNotificationPrompt","promptContainer","document","createElement","className","innerHTML","style","cssText","addNotificationPromptStyles","enableBtn","querySelector","dismissBtn","async","remove","localStorage","setItem","getItem","appendChild","setTimeout","prompt","PerformanceObserver","entryList","entries","getEntries","lastEntry","length","reportWebVital","startTime","observe","entryTypes","forEach","entry","processingStart","clsValue","hadRecentInput","value","responseStart","requestStart","duration","reportResourcePerformance","reportLongTask","metric","metric_type","viewport_size","innerWidth","innerHeight","connection_type","getConnectionType","device_type","getDeviceType","additional_data","resource_type","initiatorType","transfer_size","transferSize","encoded_size","encodedBodySize","decoded_size","decodedBodySize","start_time","attribution","installBtn","outcome","userChoice","styleInstallButton","btn","transform","boxShadow","notification","styleUpdateNotification","parentElement","id","textContent","head","showNetworkStatus","online","statusBar","syncOfflineData","registration","ready","Promise","all","sync","storage","estimate","Math","round","usage","quota","persist","monitorStorageUsage","setInterval","cleanupOldCache","oldCaches","caches","keys","filter","includes","map","cache","delete","hidden","update","message","filename","lineno","colno","stack","reason","promise","data","type","error_type","level","String","stack_trace","err","analytics","content","base64String","base64","repeat","replace","rawData","atob","Uint8Array","char","charCodeAt","connection","effectiveType","width","enableNotifications","disableNotifications","getInstallStatus","canInstall","isInstalled","wasPrompted","getNetworkStatus","getStorageInfo","readyState"],"sources":["0"],"sourcesContent":["/**\r\n * PWA.JS - Advanced Progressive Web App Management System\r\n * =====================================================================\r\n *\r\n * Comprehensive PWA management with enterprise-grade features including\r\n * push notifications, performance monitoring, advanced caching strategies,\r\n * and offline-first architecture.\r\n *\r\n * CORE PWA FEATURES:\r\n * • Service Worker lifecycle management with hot updates\r\n * • Push notification subscription and management\r\n * • Real-time performance monitoring and analytics\r\n * • Intelligent caching strategies (Cache-first, Network-first, SWR)\r\n * • Background sync with retry mechanisms\r\n * • App installation prompts with analytics\r\n * • Network status monitoring with adaptive loading\r\n * • Offline functionality with queue management\r\n *\r\n * PUSH NOTIFICATION SYSTEM:\r\n * • VAPID-based push subscription management\r\n * • Topic-based notification filtering\r\n * • Notification interaction tracking\r\n * • Rich notifications with actions and images\r\n * • Background message processing\r\n * • Notification permission optimization\r\n *\r\n * PERFORMANCE MONITORING:\r\n * • Core Web Vitals tracking (LCP, FID, CLS, INP, TTFB)\r\n * • Resource loading performance monitoring\r\n * • API response time tracking\r\n * • Error logging and reporting\r\n * • Memory usage optimization\r\n * • Battery usage considerations\r\n *\r\n * ADVANCED CACHING:\r\n * • Multi-tier cache hierarchy\r\n * • Intelligent cache invalidation\r\n * • Precaching strategies\r\n * • Dynamic content caching\r\n * • Cache compression and optimization\r\n * • Storage quota management\r\n *\r\n * @author Portfolio Site PWA Team\r\n * @version 2.0.0\r\n * @since 1.0.0\r\n * @pwa Manifest and service worker compliant\r\n */\r\n// Cache version constant - sync with SW\r\nconst VERSION = '1.1.0';\r\n\r\nclass PWAManager {\r\n    constructor() {\r\n        this.version = VERSION;\r\n        this.swRegistration = null;\r\n        this.pushSubscription = null;\r\n        this.deferredPrompt = null;\r\n        this.networkStatus = navigator.onLine;\r\n        this.installAnalytics = {\r\n            prompted: false,\r\n            installed: false,\r\n            dismissed: false\r\n        };\r\n        this.notificationPermission = Notification.permission;\r\n        this.performanceObserver = null;\r\n        \r\n        this.init();\r\n    }\r\n\r\n    async init() {\r\n        console.log('[PWA] Initializing Advanced PWA Manager v2.0.0');\r\n        \r\n        // Initialize core PWA features\r\n        await this.initializeServiceWorker();\r\n        await this.initializePushNotifications();\r\n        this.initializePerformanceMonitoring();\r\n        this.handleInstallPrompt();\r\n        this.handleNetworkStatus();\r\n        this.initializeStorageManagement();\r\n        this.setupErrorHandling();\r\n        \r\n        console.log('[PWA] PWA Manager fully initialized');\r\n    }\r\n\r\n    async initializeServiceWorker() {\r\n        if (!('serviceWorker' in navigator)) {\r\n            console.warn('[PWA] Service Worker not supported');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.swRegistration = await navigator.serviceWorker.register('/static/js/sw.js', {\r\n                scope: '/',\r\n                updateViaCache: 'none' // Always check for updates\r\n            });\r\n            \r\n            console.log('[PWA] Service Worker registered:', this.swRegistration.scope);\r\n            \r\n            // Handle SW updates\r\n            this.swRegistration.addEventListener('updatefound', () => {\r\n                console.log('[PWA] Service Worker update found');\r\n                const newWorker = this.swRegistration.installing;\r\n                \r\n                newWorker.addEventListener('statechange', () => {\r\n                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                        this.showUpdateNotification();\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Listen for SW messages\r\n            navigator.serviceWorker.addEventListener('message', (event) => {\r\n                this.handleServiceWorkerMessage(event);\r\n            });\r\n\r\n            // Check for updates every 10 minutes when page is visible\r\n            this.setupUpdateCheck();\r\n            \r\n        } catch (error) {\r\n            console.error('[PWA] Service Worker registration failed:', error);\r\n            this.logError('service_worker_registration', error);\r\n        }\r\n    }\r\n\r\n    async initializePushNotifications() {\r\n        if (!('PushManager' in window) || !('Notification' in window)) {\r\n            console.warn('[PWA] Push notifications not supported');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Get existing subscription\r\n            if (this.swRegistration) {\r\n                this.pushSubscription = await this.swRegistration.pushManager.getSubscription();\r\n                \r\n                if (this.pushSubscription) {\r\n                    console.log('[PWA] Existing push subscription found');\r\n                    await this.syncPushSubscription();\r\n                } else {\r\n                    console.log('[PWA] No existing push subscription');\r\n                }\r\n            }\r\n\r\n            // Setup notification permission handling\r\n            this.setupNotificationPermission();\r\n            \r\n        } catch (error) {\r\n            console.error('[PWA] Push notification initialization failed:', error);\r\n            this.logError('push_init', error);\r\n        }\r\n    }\r\n\r\n    initializePerformanceMonitoring() {\r\n        if (!('PerformanceObserver' in window)) {\r\n            console.warn('[PWA] Performance Observer not supported');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Core Web Vitals monitoring\r\n            this.observeWebVitals();\r\n            \r\n            // Resource performance monitoring\r\n            this.observeResourcePerformance();\r\n            \r\n            // Long task monitoring\r\n            this.observeLongTasks();\r\n            \r\n            console.log('[PWA] Performance monitoring initialized');\r\n        } catch (error) {\r\n            console.error('[PWA] Performance monitoring initialization failed:', error);\r\n        }\r\n    }\r\n\r\n    handleInstallPrompt() {\r\n        window.addEventListener('beforeinstallprompt', (e) => {\r\n            e.preventDefault();\r\n            this.deferredPrompt = e;\r\n            this.installAnalytics.prompted = true;\r\n            \r\n            console.log('[PWA] Install prompt available');\r\n            this.showInstallButton();\r\n        });\r\n\r\n        window.addEventListener('appinstalled', (e) => {\r\n            console.log('[PWA] App was installed');\r\n            this.installAnalytics.installed = true;\r\n            this.hideInstallButton();\r\n            this.logInstallEvent('installed');\r\n        });\r\n    }\r\n\r\n    // ==========================================================================\r\n    // PUSH NOTIFICATIONS MANAGEMENT\r\n    // ==========================================================================\r\n\r\n    async subscribeToPushNotifications(topics = []) {\r\n        if (!this.swRegistration) {\r\n            throw new Error('Service Worker not available');\r\n        }\r\n\r\n        try {\r\n            // Request permission\r\n            const permission = await Notification.requestPermission();\r\n            if (permission !== 'granted') {\r\n                throw new Error('Notification permission denied');\r\n            }\r\n\r\n            // Get VAPID public key from server\r\n            const vapidResponse = await fetch('/api/webpush/vapid-public-key/');\r\n            const { publicKey } = await vapidResponse.json();\r\n\r\n            // Subscribe to push notifications\r\n            this.pushSubscription = await this.swRegistration.pushManager.subscribe({\r\n                userVisibleOnly: true,\r\n                applicationServerKey: this.urlBase64ToUint8Array(publicKey)\r\n            });\r\n\r\n            // Send subscription to server\r\n            await this.syncPushSubscription(topics);\r\n\r\n            console.log('[PWA] Push notification subscription successful');\r\n            return this.pushSubscription;\r\n\r\n        } catch (error) {\r\n            console.error('[PWA] Push notification subscription failed:', error);\r\n            this.logError('push_subscription', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async syncPushSubscription(topics = []) {\r\n        if (!this.pushSubscription) return;\r\n\r\n        try {\r\n            const response = await fetch('/api/webpush/subscribe/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRFToken': this.getCSRFToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    subscription: this.pushSubscription.toJSON(),\r\n                    topics: topics,\r\n                    user_agent: navigator.userAgent,\r\n                    url: window.location.href\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Sync failed: ${response.status}`);\r\n            }\r\n\r\n            console.log('[PWA] Push subscription synced with server');\r\n        } catch (error) {\r\n            console.error('[PWA] Failed to sync push subscription:', error);\r\n            this.logError('push_sync', error);\r\n        }\r\n    }\r\n\r\n    async unsubscribeFromPushNotifications() {\r\n        if (!this.pushSubscription) return;\r\n\r\n        try {\r\n            // Capture endpoint before unsubscribing\r\n            const endpoint = this.pushSubscription.endpoint;\r\n            \r\n            await this.pushSubscription.unsubscribe();\r\n            this.pushSubscription = null;\r\n\r\n            // Notify server with endpoint in POST body\r\n            await fetch('/api/webpush/unsubscribe/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRFToken': this.getCSRFToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    endpoint: endpoint\r\n                })\r\n            });\r\n\r\n            console.log('[PWA] Unsubscribed from push notifications');\r\n        } catch (error) {\r\n            console.error('[PWA] Failed to unsubscribe:', error);\r\n            this.logError('push_unsubscribe', error);\r\n        }\r\n    }\r\n\r\n    setupNotificationPermission() {\r\n        // Show notification prompt button if permission is default\r\n        if (Notification.permission === 'default') {\r\n            this.showNotificationPrompt();\r\n        }\r\n\r\n        // Handle permission changes\r\n        if ('permissions' in navigator) {\r\n            navigator.permissions.query({ name: 'notifications' }).then((result) => {\r\n                result.addEventListener('change', () => {\r\n                    this.notificationPermission = result.state;\r\n                    if (result.state === 'granted') {\r\n                        this.hideNotificationPrompt();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    showNotificationPrompt() {\r\n        const promptContainer = document.createElement('div');\r\n        promptContainer.className = 'pwa-notification-prompt';\r\n        promptContainer.innerHTML = `\r\n            <div class=\"notification-prompt-content\">\r\n                <div class=\"prompt-icon\">🔔</div>\r\n                <div class=\"prompt-text\">\r\n                    <h4>Stay Updated</h4>\r\n                    <p>Get notified about new blog posts and portfolio updates</p>\r\n                </div>\r\n                <button class=\"enable-notifications-btn\">Enable Notifications</button>\r\n                <button class=\"dismiss-prompt-btn\">×</button>\r\n            </div>\r\n        `;\r\n\r\n        promptContainer.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            background: white;\r\n            border-radius: 12px;\r\n            box-shadow: 0 8px 25px rgba(0,0,0,0.15);\r\n            z-index: 1003;\r\n            max-width: 400px;\r\n            animation: slideDown 0.3s ease;\r\n        `;\r\n\r\n        this.addNotificationPromptStyles();\r\n\r\n        const enableBtn = promptContainer.querySelector('.enable-notifications-btn');\r\n        const dismissBtn = promptContainer.querySelector('.dismiss-prompt-btn');\r\n\r\n        enableBtn.addEventListener('click', async () => {\r\n            try {\r\n                await this.subscribeToPushNotifications(['blog_posts', 'portfolio_updates']);\r\n                promptContainer.remove();\r\n            } catch (error) {\r\n                console.error('[PWA] Failed to enable notifications:', error);\r\n            }\r\n        });\r\n\r\n        dismissBtn.addEventListener('click', () => {\r\n            promptContainer.remove();\r\n            localStorage.setItem('pwa_notification_prompt_dismissed', 'true');\r\n        });\r\n\r\n        // Don't show if previously dismissed\r\n        if (!localStorage.getItem('pwa_notification_prompt_dismissed')) {\r\n            document.body.appendChild(promptContainer);\r\n            setTimeout(() => promptContainer.remove(), 15000); // Auto-dismiss after 15s\r\n        }\r\n    }\r\n\r\n    hideNotificationPrompt() {\r\n        const prompt = document.querySelector('.pwa-notification-prompt');\r\n        if (prompt) prompt.remove();\r\n    }\r\n\r\n    // ==========================================================================\r\n    // PERFORMANCE MONITORING\r\n    // ==========================================================================\r\n\r\n    observeWebVitals() {\r\n        // Largest Contentful Paint (LCP)\r\n        const lcpObserver = new PerformanceObserver((entryList) => {\r\n            const entries = entryList.getEntries();\r\n            const lastEntry = entries[entries.length - 1];\r\n            this.reportWebVital('lcp', lastEntry.startTime);\r\n        });\r\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\r\n\r\n        // First Input Delay (FID)\r\n        const fidObserver = new PerformanceObserver((entryList) => {\r\n            const entries = entryList.getEntries();\r\n            entries.forEach((entry) => {\r\n                this.reportWebVital('fid', entry.processingStart - entry.startTime);\r\n            });\r\n        });\r\n        fidObserver.observe({ entryTypes: ['first-input'] });\r\n\r\n        // Cumulative Layout Shift (CLS)\r\n        let clsValue = 0;\r\n        const clsObserver = new PerformanceObserver((entryList) => {\r\n            const entries = entryList.getEntries();\r\n            entries.forEach((entry) => {\r\n                if (!entry.hadRecentInput) {\r\n                    clsValue += entry.value;\r\n                }\r\n            });\r\n            this.reportWebVital('cls', clsValue);\r\n        });\r\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n\r\n        // Time to First Byte (TTFB)\r\n        const navigationObserver = new PerformanceObserver((entryList) => {\r\n            const entries = entryList.getEntries();\r\n            entries.forEach((entry) => {\r\n                this.reportWebVital('ttfb', entry.responseStart - entry.requestStart);\r\n            });\r\n        });\r\n        navigationObserver.observe({ entryTypes: ['navigation'] });\r\n    }\r\n\r\n    observeResourcePerformance() {\r\n        const resourceObserver = new PerformanceObserver((entryList) => {\r\n            const entries = entryList.getEntries();\r\n            entries.forEach((entry) => {\r\n                if (entry.duration > 100) { // Only report slow resources\r\n                    this.reportResourcePerformance(entry);\r\n                }\r\n            });\r\n        });\r\n        resourceObserver.observe({ entryTypes: ['resource'] });\r\n    }\r\n\r\n    observeLongTasks() {\r\n        if ('PerformanceObserver' in window) {\r\n            const longTaskObserver = new PerformanceObserver((entryList) => {\r\n                const entries = entryList.getEntries();\r\n                entries.forEach((entry) => {\r\n                    this.reportLongTask(entry);\r\n                });\r\n            });\r\n            longTaskObserver.observe({ entryTypes: ['longtask'] });\r\n        }\r\n    }\r\n\r\n    async reportWebVital(metric, value) {\r\n        try {\r\n            await fetch('/api/performance/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRFToken': this.getCSRFToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    metric_type: metric,\r\n                    value: value,\r\n                    url: window.location.href,\r\n                    user_agent: navigator.userAgent,\r\n                    viewport_size: `${window.innerWidth}x${window.innerHeight}`,\r\n                    connection_type: this.getConnectionType(),\r\n                    device_type: this.getDeviceType()\r\n                })\r\n            });\r\n        } catch (error) {\r\n            console.error('[PWA] Failed to report web vital:', error);\r\n        }\r\n    }\r\n\r\n    async reportResourcePerformance(entry) {\r\n        try {\r\n            await fetch('/api/performance/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRFToken': this.getCSRFToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    metric_type: 'resource_load',\r\n                    value: entry.duration,\r\n                    url: entry.name,\r\n                    additional_data: {\r\n                        resource_type: entry.initiatorType,\r\n                        transfer_size: entry.transferSize,\r\n                        encoded_size: entry.encodedBodySize,\r\n                        decoded_size: entry.decodedBodySize\r\n                    }\r\n                })\r\n            });\r\n        } catch (error) {\r\n            console.error('[PWA] Failed to report resource performance:', error);\r\n        }\r\n    }\r\n\r\n    async reportLongTask(entry) {\r\n        try {\r\n            await fetch('/api/performance/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRFToken': this.getCSRFToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    metric_type: 'long_task',\r\n                    value: entry.duration,\r\n                    url: window.location.href,\r\n                    additional_data: {\r\n                        start_time: entry.startTime,\r\n                        attribution: entry.attribution\r\n                    }\r\n                })\r\n            });\r\n        } catch (error) {\r\n            console.error('[PWA] Failed to report long task:', error);\r\n        }\r\n    }\r\n\r\n    // ==========================================================================\r\n    // INSTALLATION AND UPDATES\r\n    // ==========================================================================\r\n\r\n    showInstallButton() {\r\n        if (document.querySelector('.pwa-install-btn')) return;\r\n\r\n        const installBtn = document.createElement('button');\r\n        installBtn.className = 'pwa-install-btn';\r\n        installBtn.innerHTML = `\r\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/>\r\n                <polyline points=\"7,10 12,15 17,10\"/>\r\n                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"/>\r\n            </svg>\r\n            Install App\r\n        `;\r\n        \r\n        installBtn.addEventListener('click', async () => {\r\n            if (!this.deferredPrompt) return;\r\n\r\n            try {\r\n                this.deferredPrompt.prompt();\r\n                const { outcome } = await this.deferredPrompt.userChoice;\r\n                \r\n                console.log(`[PWA] Install prompt result: ${outcome}`);\r\n                this.logInstallEvent(outcome);\r\n                \r\n                if (outcome === 'dismissed') {\r\n                    this.installAnalytics.dismissed = true;\r\n                }\r\n                \r\n                this.deferredPrompt = null;\r\n                this.hideInstallButton();\r\n            } catch (error) {\r\n                console.error('[PWA] Install prompt failed:', error);\r\n            }\r\n        });\r\n\r\n        this.styleInstallButton(installBtn);\r\n        document.body.appendChild(installBtn);\r\n    }\r\n\r\n    styleInstallButton(btn) {\r\n        btn.style.cssText = `\r\n            position: fixed;\r\n            bottom: 20px;\r\n            right: 20px;\r\n            background: linear-gradient(135deg, #4f46e5, #7c3aed);\r\n            color: white;\r\n            border: none;\r\n            padding: 12px 20px;\r\n            border-radius: 50px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);\r\n            z-index: 1000;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n            transition: all 0.2s ease;\r\n        `;\r\n\r\n        btn.addEventListener('mouseenter', () => {\r\n            btn.style.transform = 'translateY(-2px) scale(1.05)';\r\n            btn.style.boxShadow = '0 6px 20px rgba(79, 70, 229, 0.4)';\r\n        });\r\n\r\n        btn.addEventListener('mouseleave', () => {\r\n            btn.style.transform = 'translateY(0) scale(1)';\r\n            btn.style.boxShadow = '0 4px 15px rgba(79, 70, 229, 0.3)';\r\n        });\r\n    }\r\n\r\n    hideInstallButton() {\r\n        const installBtn = document.querySelector('.pwa-install-btn');\r\n        if (installBtn) installBtn.remove();\r\n    }\r\n\r\n    showUpdateNotification() {\r\n        const notification = document.createElement('div');\r\n        notification.className = 'pwa-update-notification';\r\n        notification.innerHTML = `\r\n            <div class=\"update-content\">\r\n                <div class=\"update-icon\">🔄</div>\r\n                <div class=\"update-text\">\r\n                    <strong>New update available!</strong>\r\n                    <p>Click to refresh and get the latest features</p>\r\n                </div>\r\n                <button class=\"update-btn\" onclick=\"window.location.reload()\">Update</button>\r\n                <button class=\"dismiss-btn\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\r\n            </div>\r\n        `;\r\n\r\n        this.styleUpdateNotification(notification);\r\n        document.body.appendChild(notification);\r\n\r\n        // Auto dismiss after 15 seconds\r\n        setTimeout(() => {\r\n            if (notification.parentElement) {\r\n                notification.remove();\r\n            }\r\n        }, 15000);\r\n    }\r\n\r\n    styleUpdateNotification(notification) {\r\n        notification.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            background: white;\r\n            border-radius: 12px;\r\n            box-shadow: 0 8px 25px rgba(0,0,0,0.15);\r\n            z-index: 1001;\r\n            max-width: 350px;\r\n            animation: slideIn 0.3s ease;\r\n        `;\r\n\r\n        if (!document.querySelector('#pwa-update-styles')) {\r\n            const style = document.createElement('style');\r\n            style.id = 'pwa-update-styles';\r\n            style.textContent = `\r\n                @keyframes slideIn {\r\n                    from { transform: translateX(100%); opacity: 0; }\r\n                    to { transform: translateX(0); opacity: 1; }\r\n                }\r\n                .update-content {\r\n                    padding: 20px;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 15px;\r\n                }\r\n                .update-icon {\r\n                    font-size: 24px;\r\n                    animation: rotate 2s linear infinite;\r\n                }\r\n                @keyframes rotate {\r\n                    from { transform: rotate(0deg); }\r\n                    to { transform: rotate(360deg); }\r\n                }\r\n                .update-text strong {\r\n                    color: #1f2937;\r\n                    font-size: 14px;\r\n                }\r\n                .update-text p {\r\n                    margin: 4px 0 0 0;\r\n                    color: #6b7280;\r\n                    font-size: 12px;\r\n                }\r\n                .update-btn {\r\n                    background: #4f46e5;\r\n                    color: white;\r\n                    border: none;\r\n                    padding: 8px 16px;\r\n                    border-radius: 6px;\r\n                    font-size: 12px;\r\n                    cursor: pointer;\r\n                    margin-left: auto;\r\n                    transition: background 0.2s;\r\n                }\r\n                .update-btn:hover {\r\n                    background: #4338ca;\r\n                }\r\n                .dismiss-btn {\r\n                    background: none;\r\n                    border: none;\r\n                    font-size: 20px;\r\n                    cursor: pointer;\r\n                    color: #9ca3af;\r\n                    margin-left: 8px;\r\n                    transition: color 0.2s;\r\n                }\r\n                .dismiss-btn:hover {\r\n                    color: #6b7280;\r\n                }\r\n            `;\r\n            document.head.appendChild(style);\r\n        }\r\n    }\r\n\r\n    // ==========================================================================\r\n    // NETWORK STATUS AND STORAGE MANAGEMENT\r\n    // ==========================================================================\r\n\r\n    handleNetworkStatus() {\r\n        const showNetworkStatus = (online) => {\r\n            this.networkStatus = online;\r\n            \r\n            const statusBar = document.querySelector('.network-status') || document.createElement('div');\r\n            statusBar.className = 'network-status';\r\n            statusBar.style.cssText = `\r\n                position: fixed;\r\n                top: 0;\r\n                left: 0;\r\n                right: 0;\r\n                padding: 12px 16px;\r\n                text-align: center;\r\n                font-size: 14px;\r\n                font-weight: 600;\r\n                z-index: 1002;\r\n                transition: transform 0.3s ease;\r\n                ${online ? \r\n                    'background: linear-gradient(135deg, #10b981, #059669); color: white; transform: translateY(-100%);' : \r\n                    'background: linear-gradient(135deg, #ef4444, #dc2626); color: white; transform: translateY(0);'\r\n                }\r\n            `;\r\n            \r\n            statusBar.innerHTML = online ? \r\n                '🟢 Back online - Syncing data...' : \r\n                '🔴 You\\'re offline - Using cached content';\r\n            \r\n            if (!document.querySelector('.network-status')) {\r\n                document.body.appendChild(statusBar);\r\n            }\r\n\r\n            if (online) {\r\n                this.syncOfflineData();\r\n                setTimeout(() => {\r\n                    statusBar.style.transform = 'translateY(-100%)';\r\n                    setTimeout(() => statusBar.remove(), 300);\r\n                }, 3000);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('online', () => showNetworkStatus(true));\r\n        window.addEventListener('offline', () => showNetworkStatus(false));\r\n        \r\n        // Initial status check\r\n        if (!navigator.onLine) {\r\n            showNetworkStatus(false);\r\n        }\r\n    }\r\n\r\n    async syncOfflineData() {\r\n        if (!('serviceWorker' in navigator) || !navigator.serviceWorker.controller) return;\r\n\r\n        try {\r\n            // Trigger background sync for different data types\r\n            const registration = await navigator.serviceWorker.ready;\r\n            \r\n            await Promise.all([\r\n                registration.sync.register('performance-metrics'),\r\n                registration.sync.register('error-logs'),\r\n                registration.sync.register('contact-form')\r\n            ]);\r\n            \r\n            console.log('[PWA] Background sync triggered for offline data');\r\n        } catch (error) {\r\n            console.error('[PWA] Background sync failed:', error);\r\n        }\r\n    }\r\n\r\n    async initializeStorageManagement() {\r\n        if (!('storage' in navigator) || !('estimate' in navigator.storage)) {\r\n            console.warn('[PWA] Storage API not supported');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const estimate = await navigator.storage.estimate();\r\n            const usedMB = Math.round(estimate.usage / 1024 / 1024);\r\n            const totalMB = Math.round(estimate.quota / 1024 / 1024);\r\n            \r\n            console.log(`[PWA] Storage: ${usedMB}MB used of ${totalMB}MB total`);\r\n            \r\n            // Request persistent storage\r\n            if ('persist' in navigator.storage) {\r\n                const persistent = await navigator.storage.persist();\r\n                console.log(`[PWA] Persistent storage: ${persistent ? 'granted' : 'denied'}`);\r\n            }\r\n            \r\n            // Monitor storage usage\r\n            this.monitorStorageUsage();\r\n        } catch (error) {\r\n            console.error('[PWA] Storage management initialization failed:', error);\r\n        }\r\n    }\r\n\r\n    async monitorStorageUsage() {\r\n        const checkStorage = async () => {\r\n            try {\r\n                const estimate = await navigator.storage.estimate();\r\n                const usagePercent = (estimate.usage / estimate.quota) * 100;\r\n                \r\n                if (usagePercent > 80) {\r\n                    console.warn(`[PWA] Storage usage high: ${usagePercent.toFixed(1)}%`);\r\n                    this.cleanupOldCache();\r\n                }\r\n            } catch (error) {\r\n                console.error('[PWA] Storage monitoring failed:', error);\r\n            }\r\n        };\r\n\r\n        // Check every 5 minutes\r\n        setInterval(checkStorage, 5 * 60 * 1000);\r\n    }\r\n\r\n    async cleanupOldCache() {\r\n        try {\r\n            const cacheNames = await caches.keys();\r\n            const oldCaches = cacheNames.filter(name => \r\n                !name.includes(`portfolio-v${this.version}`) && \r\n                name.includes('portfolio-')\r\n            );\r\n            \r\n            await Promise.all(oldCaches.map(cache => caches.delete(cache)));\r\n            console.log(`[PWA] Cleaned up ${oldCaches.length} old caches`);\r\n        } catch (error) {\r\n            console.error('[PWA] Cache cleanup failed:', error);\r\n        }\r\n    }\r\n\r\n    // ==========================================================================\r\n    // UTILITY METHODS\r\n    // ==========================================================================\r\n\r\n    setupUpdateCheck() {\r\n        // Check for updates when page becomes visible\r\n        document.addEventListener('visibilitychange', () => {\r\n            if (!document.hidden && this.swRegistration) {\r\n                this.swRegistration.update();\r\n            }\r\n        });\r\n\r\n        // Check for updates every 10 minutes\r\n        setInterval(() => {\r\n            if (this.swRegistration && !document.hidden) {\r\n                this.swRegistration.update();\r\n            }\r\n        }, 10 * 60 * 1000);\r\n    }\r\n\r\n    setupErrorHandling() {\r\n        window.addEventListener('error', (event) => {\r\n            this.logError('javascript_error', {\r\n                message: event.message,\r\n                filename: event.filename,\r\n                lineno: event.lineno,\r\n                colno: event.colno,\r\n                stack: event.error?.stack\r\n            });\r\n        });\r\n\r\n        window.addEventListener('unhandledrejection', (event) => {\r\n            this.logError('unhandled_promise_rejection', {\r\n                reason: event.reason,\r\n                promise: event.promise\r\n            });\r\n        });\r\n    }\r\n\r\n    handleServiceWorkerMessage(event) {\r\n        const { data } = event;\r\n        \r\n        switch (data.type) {\r\n            case 'CACHE_UPDATED':\r\n                console.log('[PWA] Cache updated:', data.payload);\r\n                break;\r\n            case 'BACKGROUND_SYNC_SUCCESS':\r\n                console.log('[PWA] Background sync successful:', data.payload);\r\n                break;\r\n            case 'BACKGROUND_SYNC_FAILED':\r\n                console.error('[PWA] Background sync failed:', data.payload);\r\n                break;\r\n            default:\r\n                console.log('[PWA] Unknown message from SW:', data);\r\n        }\r\n    }\r\n\r\n    addNotificationPromptStyles() {\r\n        if (!document.querySelector('#pwa-notification-styles')) {\r\n            const style = document.createElement('style');\r\n            style.id = 'pwa-notification-styles';\r\n            style.textContent = `\r\n                @keyframes slideDown {\r\n                    from { transform: translate(-50%, -100%); opacity: 0; }\r\n                    to { transform: translate(-50%, 0); opacity: 1; }\r\n                }\r\n                .notification-prompt-content {\r\n                    padding: 20px;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 15px;\r\n                    position: relative;\r\n                }\r\n                .prompt-icon {\r\n                    font-size: 24px;\r\n                    animation: pulse 2s infinite;\r\n                }\r\n                @keyframes pulse {\r\n                    0%, 100% { transform: scale(1); }\r\n                    50% { transform: scale(1.1); }\r\n                }\r\n                .prompt-text h4 {\r\n                    margin: 0 0 4px 0;\r\n                    color: #1f2937;\r\n                    font-size: 16px;\r\n                }\r\n                .prompt-text p {\r\n                    margin: 0;\r\n                    color: #6b7280;\r\n                    font-size: 14px;\r\n                }\r\n                .enable-notifications-btn {\r\n                    background: #4f46e5;\r\n                    color: white;\r\n                    border: none;\r\n                    padding: 10px 16px;\r\n                    border-radius: 6px;\r\n                    font-size: 14px;\r\n                    cursor: pointer;\r\n                    margin-left: auto;\r\n                    transition: background 0.2s;\r\n                }\r\n                .enable-notifications-btn:hover {\r\n                    background: #4338ca;\r\n                }\r\n                .dismiss-prompt-btn {\r\n                    position: absolute;\r\n                    top: 10px;\r\n                    right: 10px;\r\n                    background: none;\r\n                    border: none;\r\n                    font-size: 20px;\r\n                    cursor: pointer;\r\n                    color: #9ca3af;\r\n                    width: 24px;\r\n                    height: 24px;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n                .dismiss-prompt-btn:hover {\r\n                    color: #6b7280;\r\n                    background: #f3f4f6;\r\n                    border-radius: 50%;\r\n                }\r\n            `;\r\n            document.head.appendChild(style);\r\n        }\r\n    }\r\n\r\n    async logError(type, error) {\r\n        try {\r\n            await fetch('/api/errors/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRFToken': this.getCSRFToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    error_type: type,\r\n                    level: 'error',\r\n                    message: error.message || String(error),\r\n                    stack_trace: error.stack || '',\r\n                    url: window.location.href,\r\n                    user_agent: navigator.userAgent,\r\n                    additional_data: error\r\n                })\r\n            });\r\n        } catch (err) {\r\n            console.error('[PWA] Failed to log error:', err);\r\n        }\r\n    }\r\n\r\n    async logInstallEvent(outcome) {\r\n        try {\r\n            await fetch('/api/pwa/install/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRFToken': this.getCSRFToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    outcome: outcome,\r\n                    analytics: this.installAnalytics,\r\n                    user_agent: navigator.userAgent,\r\n                    url: window.location.href\r\n                })\r\n            });\r\n        } catch (error) {\r\n            console.error('[PWA] Failed to log install event:', error);\r\n        }\r\n    }\r\n\r\n    getCSRFToken() {\r\n        return document.querySelector('[name=csrfmiddlewaretoken]')?.value || \r\n               document.querySelector('meta[name=csrf-token]')?.content || '';\r\n    }\r\n\r\n    urlBase64ToUint8Array(base64String) {\r\n        const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n        const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\r\n        const rawData = window.atob(base64);\r\n        return new Uint8Array([...rawData].map(char => char.charCodeAt(0)));\r\n    }\r\n\r\n    getConnectionType() {\r\n        return navigator.connection?.effectiveType || 'unknown';\r\n    }\r\n\r\n    getDeviceType() {\r\n        const width = window.innerWidth;\r\n        if (width < 768) return 'mobile';\r\n        if (width < 1024) return 'tablet';\r\n        return 'desktop';\r\n    }\r\n\r\n    // Public API methods\r\n    async enableNotifications(topics = []) {\r\n        return await this.subscribeToPushNotifications(topics);\r\n    }\r\n\r\n    async disableNotifications() {\r\n        return await this.unsubscribeFromPushNotifications();\r\n    }\r\n\r\n    getInstallStatus() {\r\n        return {\r\n            canInstall: !!this.deferredPrompt,\r\n            isInstalled: this.installAnalytics.installed,\r\n            wasPrompted: this.installAnalytics.prompted\r\n        };\r\n    }\r\n\r\n    getNetworkStatus() {\r\n        return this.networkStatus;\r\n    }\r\n\r\n    async getStorageInfo() {\r\n        if ('storage' in navigator && 'estimate' in navigator.storage) {\r\n            return await navigator.storage.estimate();\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n// Initialize PWA when DOM is loaded\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        new PWAManager();\r\n    });\r\n} else {\r\n    new PWAManager();\r\n}"],"mappings":"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","ignoreList":[]}