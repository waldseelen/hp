name: Database Backup

on:
  schedule:
    # Daily backup at 2 AM UTC
    - cron: '0 2 * * *'

  # Manual backup trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to backup'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  RETENTION_DAYS: 30

jobs:
  backup-production:
    name: Backup Production Database
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.environment == 'production'

    environment:
      name: production-backup

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Configure AWS CLI (if using S3)
      if: env.AWS_S3_BUCKET != ''
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Run production database backup
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        BACKUP_DIR: /tmp/backups
        RETENTION_DAYS: ${{ env.RETENTION_DAYS }}
      run: |
        chmod +x scripts/backup-database.sh
        ./scripts/backup-database.sh

    - name: Upload backup artifact
      uses: actions/upload-artifact@v3
      with:
        name: production-database-backup-${{ github.run_id }}
        path: /tmp/backups/
        retention-days: 7

    - name: Notify backup completion
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Production database backup completed successfully"
        else
          echo "❌ Production database backup failed"
        fi

  backup-staging:
    name: Backup Staging Database
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging'

    environment:
      name: staging-backup

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Run staging database backup
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        BACKUP_DIR: /tmp/backups
        RETENTION_DAYS: 7  # Shorter retention for staging
      run: |
        chmod +x scripts/backup-database.sh
        ./scripts/backup-database.sh

    - name: Upload backup artifact
      uses: actions/upload-artifact@v3
      with:
        name: staging-database-backup-${{ github.run_id }}
        path: /tmp/backups/
        retention-days: 3

  backup-verification:
    name: Verify Backup Integrity
    runs-on: ubuntu-latest
    needs: [backup-production]
    if: always() && needs.backup-production.result == 'success'

    steps:
    - name: Download backup artifact
      uses: actions/download-artifact@v3
      with:
        name: production-database-backup-${{ github.run_id }}
        path: /tmp/backups

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Verify backup integrity
      run: |
        cd /tmp/backups

        # Find the latest backup file
        BACKUP_FILE=$(ls -t portfolio_backup_*.sql* 2>/dev/null | head -n1)

        if [ -z "$BACKUP_FILE" ]; then
          echo "❌ No backup file found"
          exit 1
        fi

        echo "Verifying backup file: $BACKUP_FILE"

        # Test backup integrity
        if [[ "$BACKUP_FILE" =~ \.gz$ ]]; then
          echo "Testing compressed backup..."
          if gzip -t "$BACKUP_FILE"; then
            echo "✅ Backup integrity verified (compressed)"
          else
            echo "❌ Backup integrity check failed (corrupted compressed file)"
            exit 1
          fi
        else
          echo "Testing uncompressed backup..."
          if [ -s "$BACKUP_FILE" ]; then
            echo "✅ Backup integrity verified (uncompressed)"
          else
            echo "❌ Backup integrity check failed (empty file)"
            exit 1
          fi
        fi

        # Get backup size
        BACKUP_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
        echo "Backup size: $BACKUP_SIZE"

        # Verify metadata file exists
        METADATA_FILE=$(echo "$BACKUP_FILE" | sed 's/\.sql.*/.meta/')
        if [ -f "$METADATA_FILE" ]; then
          echo "✅ Metadata file found: $METADATA_FILE"
          cat "$METADATA_FILE"
        else
          echo "⚠️ Metadata file not found"
        fi

  cleanup-old-artifacts:
    name: Cleanup Old Backup Artifacts
    runs-on: ubuntu-latest
    needs: [backup-production, backup-staging]
    if: always()

    steps:
    - name: Cleanup old backup artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });

          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 7); // Keep 7 days

          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.includes('database-backup-') &&
                new Date(artifact.created_at) < cutoffDate) {
              console.log(`Deleting old artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }

  notify-backup-status:
    name: Notify Backup Status
    runs-on: ubuntu-latest
    needs: [backup-production, backup-staging, backup-verification]
    if: always()

    steps:
    - name: Determine overall status
      id: status
      run: |
        if [ "${{ needs.backup-production.result }}" = "success" ] && \
           [ "${{ needs.backup-verification.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=Production database backup completed and verified successfully" >> $GITHUB_OUTPUT
        elif [ "${{ needs.backup-staging.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=Staging database backup completed successfully" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Database backup failed" >> $GITHUB_OUTPUT
        fi

    - name: Log backup status
      run: |
        if [ "${{ steps.status.outputs.status }}" = "success" ]; then
          echo "✅ ${{ steps.status.outputs.message }}"
        else
          echo "❌ ${{ steps.status.outputs.message }}"
        fi