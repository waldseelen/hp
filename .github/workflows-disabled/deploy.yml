name: Deploy to Railway

on:
  push:
    branches:
      - main        # Production deployment
      - develop     # Staging deployment

  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # Pre-deployment Checks
  # =============================================================================
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest

    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      should-deploy: ${{ steps.determine-env.outputs.should-deploy }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine deployment environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "environment=none" >> $GITHUB_OUTPUT
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      if: steps.determine-env.outputs.should-deploy == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      if: steps.determine-env.outputs.should-deploy == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run deployment checks
      if: steps.determine-env.outputs.should-deploy == 'true'
      run: |
        python manage.py check --deploy --settings=portfolio_site.settings.production

    - name: Test database migrations
      if: steps.determine-env.outputs.should-deploy == 'true'
      run: |
        python manage.py makemigrations --check --dry-run --settings=portfolio_site.settings.test

  # =============================================================================
  # Build Assets
  # =============================================================================
  build-assets:
    name: Build Production Assets
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build production assets
      run: npm run build:all

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          static/css/output.css
          static/js/
        retention-days: 1

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-assets]
    if: needs.pre-deploy-checks.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://portfolio-staging.railway.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: .

    - name: Deploy to Railway Staging
      uses: railwayapp/railway-action@v1
      with:
        api-token: ${{ secrets.RAILWAY_TOKEN }}
        project-id: ${{ secrets.RAILWAY_PROJECT_ID_STAGING }}
        environment: staging
        service: web

    - name: Wait for deployment
      run: |
        echo "Waiting for staging deployment to complete..."
        sleep 30

    - name: Health check staging
      run: |
        max_attempts=30
        attempt=1

        while [ $attempt -le $max_attempts ]; do
          if curl -f -s https://portfolio-staging.railway.app/health/ > /dev/null; then
            echo "✅ Staging health check passed"
            break
          fi

          echo "Attempt $attempt/$max_attempts: Staging not ready, waiting..."
          sleep 10
          attempt=$((attempt + 1))
        done

        if [ $attempt -gt $max_attempts ]; then
          echo "❌ Staging health check failed after $max_attempts attempts"
          exit 1
        fi

    - name: Run smoke tests on staging
      run: |
        echo "Running smoke tests on staging..."
        # Test main endpoints
        curl -f https://portfolio-staging.railway.app/ > /dev/null
        curl -f https://portfolio-staging.railway.app/health/ > /dev/null
        curl -f https://portfolio-staging.railway.app/blog/ > /dev/null
        echo "✅ Smoke tests passed"

  # =============================================================================
  # Deploy to Production
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-assets]
    if: needs.pre-deploy-checks.outputs.environment == 'production'
    environment:
      name: production
      url: https://portfolio.railway.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: .

    - name: Deploy to Railway Production
      uses: railwayapp/railway-action@v1
      with:
        api-token: ${{ secrets.RAILWAY_TOKEN }}
        project-id: ${{ secrets.RAILWAY_PROJECT_ID_PRODUCTION }}
        environment: production
        service: web

    - name: Wait for deployment
      run: |
        echo "Waiting for production deployment to complete..."
        sleep 60

    - name: Health check production
      run: |
        max_attempts=30
        attempt=1

        while [ $attempt -le $max_attempts ]; do
          if curl -f -s https://portfolio.railway.app/health/ > /dev/null; then
            echo "✅ Production health check passed"
            break
          fi

          echo "Attempt $attempt/$max_attempts: Production not ready, waiting..."
          sleep 10
          attempt=$((attempt + 1))
        done

        if [ $attempt -gt $max_attempts ]; then
          echo "❌ Production health check failed after $max_attempts attempts"
          exit 1
        fi

    - name: Run production smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Test main endpoints
        curl -f https://portfolio.railway.app/ > /dev/null
        curl -f https://portfolio.railway.app/health/ > /dev/null
        curl -f https://portfolio.railway.app/blog/ > /dev/null
        echo "✅ Production smoke tests passed"

    - name: Notify deployment success
      run: |
        echo "🚀 Production deployment completed successfully!"
        echo "URL: https://portfolio.railway.app"

  # =============================================================================
  # Post-deployment Tasks
  # =============================================================================
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
    - name: Cleanup artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name === 'build-artifacts') {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }

    - name: Update deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "✅ Production deployment successful"
        elif [ "${{ needs.deploy-staging.result }}" = "success" ]; then
          echo "✅ Staging deployment successful"
        fi