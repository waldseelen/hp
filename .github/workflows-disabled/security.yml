name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt

    - name: Run Bandit security scan
      run: |
        bandit -r apps/ portfolio_site/ -f json -o bandit-report.json || true
        bandit -r apps/ portfolio_site/ -f txt

    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let comment = '## üîí Security Scan Results\n\n';

          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const issueCount = banditReport.results ? banditReport.results.length : 0;

            if (issueCount === 0) {
              comment += '‚úÖ **Bandit Security Scan**: No security issues found\n';
            } else {
              comment += `‚ö†Ô∏è **Bandit Security Scan**: ${issueCount} potential security issues found\n`;
            }
          } catch (e) {
            comment += '‚ùå **Bandit Security Scan**: Failed to parse results\n';
          }

          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            const vulnCount = safetyReport.vulnerabilities ? safetyReport.vulnerabilities.length : 0;

            if (vulnCount === 0) {
              comment += '‚úÖ **Safety Vulnerability Scan**: No known vulnerabilities found\n';
            } else {
              comment += `‚ö†Ô∏è **Safety Vulnerability Scan**: ${vulnCount} known vulnerabilities found\n`;
            }
          } catch (e) {
            comment += '‚ùå **Safety Vulnerability Scan**: Failed to parse results\n';
          }

          comment += '\nüìã **View detailed reports in the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified