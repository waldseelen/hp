name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.14'
  NODE_VERSION: '20'

jobs:
  # ============================================================================
  # Pre-Deployment Checks
  # ============================================================================
  pre-deploy-checks:
    name: üîç Pre-Deployment Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run quick smoke tests
        run: |
          python manage.py check --deploy
          python manage.py migrate --check
        env:
          DJANGO_SETTINGS_MODULE: project.settings
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      - name: Verify search configuration
        run: |
          python -c "from apps.main.search_index import search_index_manager; print('‚úì SearchIndexManager initialized')"
        env:
          MEILISEARCH_MASTER_KEY: ${{ secrets.MEILI_MASTER_KEY }}
          MEILISEARCH_HOST: ${{ secrets.MEILI_HOST }}

  # ============================================================================
  # Build Assets
  # ============================================================================
  build-assets:
    name: üèóÔ∏è Build Static Assets
    runs-on: ubuntu-latest
    needs: pre-deploy-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Build frontend assets
        run: |
          npm run build
          npm run build:css

      - name: Collect Django static files
        run: |
          python manage.py collectstatic --noinput
        env:
          DJANGO_SETTINGS_MODULE: project.settings
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      - name: Upload static assets
        uses: actions/upload-artifact@v4
        with:
          name: static-assets
          path: staticfiles/
          retention-days: 7

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-assets]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.yoursite.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download static assets
        uses: actions/download-artifact@v4
        with:
          name: static-assets
          path: staticfiles/

      - name: Deploy to Railway (Staging)
        run: |
          echo "üöÇ Deploying to Railway staging environment..."
          # Add Railway deployment commands here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run post-deployment tasks
        run: |
          echo "Running migrations..."
          # Add migration commands for staging

          echo "Configuring search index..."
          # Add search index configuration

      - name: Verify staging deployment
        run: |
          sleep 30  # Wait for deployment
          curl -f https://staging.yoursite.com/health || exit 1
          curl -f https://staging.yoursite.com/api/search/stats/ || exit 1

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-assets]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') ||
      startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://yoursite.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download static assets
        uses: actions/download-artifact@v4
        with:
          name: static-assets
          path: staticfiles/

      - name: Deploy to Railway (Production)
        run: |
          echo "üöÇ Deploying to Railway production environment..."
          # Add Railway deployment commands here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run database migrations
        run: |
          echo "Running production migrations..."
          # Add migration commands

      - name: Configure search index
        run: |
          echo "Configuring MeiliSearch index..."
          # Add reindex commands if needed

      - name: Verify production deployment
        run: |
          sleep 60  # Wait for deployment
          curl -f https://yoursite.com/health || exit 1
          curl -f https://yoursite.com/api/search/stats/ || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "Version: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  # ============================================================================
  # Post-Deployment Tests
  # ============================================================================
  post-deploy-tests:
    name: üß™ Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test search functionality
        run: |
          echo "Testing search API..."

          # Test main search endpoint
          curl -f "https://yoursite.com/api/search/?q=test" || exit 1

          # Test suggestions
          curl -f "https://yoursite.com/api/search/suggest/?q=test" || exit 1

          # Test stats
          curl -f "https://yoursite.com/api/search/stats/" || exit 1

      - name: Test XSS prevention
        run: |
          echo "Testing XSS prevention..."
          # Send XSS payload and verify it's sanitized
          response=$(curl -s "https://yoursite.com/api/search/?q=<script>alert('xss')</script>")
          if echo "$response" | grep -q "<script>"; then
            echo "‚ùå XSS payload not sanitized!"
            exit 1
          fi
          echo "‚úÖ XSS prevention verified"

      - name: Test admin reindex
        run: |
          echo "Testing admin reindex functionality..."
          # Verify reindex endpoint is accessible
          curl -f "https://yoursite.com/admin/" || exit 1

      - name: Measure search performance
        run: |
          echo "Measuring search response time..."
          start_time=$(date +%s%N)
          curl -s "https://yoursite.com/api/search/?q=django" > /dev/null
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))

          echo "Search response time: ${duration}ms"

          if [ $duration -gt 500 ]; then
            echo "‚ö†Ô∏è Warning: Search response time > 500ms"
          else
            echo "‚úÖ Search performance acceptable"
          fi

  # ============================================================================
  # Rollback on Failure
  # ============================================================================
  rollback:
    name: üîÑ Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-tests]
    if: failure()

    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back deployment due to failure..."
          # Add rollback commands here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Notify rollback
        run: |
          echo "‚ùå Deployment failed and rolled back"
          echo "Check logs for details"
