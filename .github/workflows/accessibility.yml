name: Accessibility Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run accessibility tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  accessibility-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]
        node-version: [18]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: portfolio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        npm ci
        npm install -g @axe-core/cli

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/portfolio_test" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV

    - name: Run Django migrations
      run: |
        python manage.py collectstatic --noinput
        python manage.py migrate

    - name: Start Django development server
      run: |
        python manage.py runserver &
        sleep 10
        curl -f http://localhost:8000/ || exit 1
      env:
        DJANGO_SETTINGS_MODULE: portfolio_site.settings.development

    - name: Run accessibility test suite
      run: |
        npm run test:a11y:coverage
      env:
        CI: true

    - name: Run axe-core CLI accessibility scan
      run: |
        mkdir -p coverage/accessibility
        axe http://localhost:8000 --reporter json --output-file coverage/accessibility/axe-results.json --exit
        axe http://localhost:8000/contact/ --reporter json --output-file coverage/accessibility/axe-contact-results.json --exit
        axe http://localhost:8000/blog/ --reporter json --output-file coverage/accessibility/axe-blog-results.json --exit

    - name: Generate accessibility report
      run: |
        echo "## Accessibility Test Results" > accessibility-report.md
        echo "" >> accessibility-report.md
        echo "### Jest Test Results" >> accessibility-report.md
        echo "" >> accessibility-report.md

        if [ -f coverage/accessibility/lcov-report/index.html ]; then
          echo "‚úÖ Jest accessibility tests completed successfully" >> accessibility-report.md
        else
          echo "‚ùå Jest accessibility tests failed" >> accessibility-report.md
        fi

        echo "" >> accessibility-report.md
        echo "### Axe-core Scan Results" >> accessibility-report.md
        echo "" >> accessibility-report.md

        for file in coverage/accessibility/axe-*-results.json; do
          if [ -f "$file" ]; then
            violations=$(cat "$file" | jq '.violations | length')
            page=$(basename "$file" .json | sed 's/axe-//g' | sed 's/-results//g')
            if [ "$violations" -eq 0 ]; then
              echo "‚úÖ $page: No accessibility violations found" >> accessibility-report.md
            else
              echo "‚ùå $page: $violations accessibility violations found" >> accessibility-report.md
            fi
          fi
        done

    - name: Upload accessibility test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-test-results
        path: |
          coverage/accessibility/
          accessibility-report.md
        retention-days: 30

    - name: Comment PR with accessibility results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let report = '';
          try {
            report = fs.readFileSync('accessibility-report.md', 'utf8');
          } catch (error) {
            report = '‚ùå Failed to generate accessibility report';
          }

          const comment = `
          ## üåê Accessibility Test Results

          ${report}

          ### üìä Test Coverage
          - **Jest Accessibility Tests**: Comprehensive WCAG 2.1 AA testing
          - **Axe-core CLI Scans**: Automated accessibility violation detection
          - **Pages Tested**: Home, Contact, Blog

          ### üìù Next Steps
          ${report.includes('‚ùå') ?
            '‚ö†Ô∏è **Action Required**: Please review and fix accessibility violations before merging.' :
            '‚úÖ **All Clear**: No accessibility issues detected. Safe to merge!'}
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Fail on accessibility violations
      run: |
        # Check if any axe results contain violations
        violation_count=0
        for file in coverage/accessibility/axe-*-results.json; do
          if [ -f "$file" ]; then
            violations=$(cat "$file" | jq '.violations | length')
            violation_count=$((violation_count + violations))
          fi
        done

        if [ $violation_count -gt 0 ]; then
          echo "‚ùå Found $violation_count accessibility violations"
          echo "Please review the accessibility report and fix all violations before proceeding."
          exit 1
        else
          echo "‚úÖ No accessibility violations found"
        fi

  lighthouse-accessibility:
    runs-on: ubuntu-latest
    needs: accessibility-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g @lhci/cli@0.12.x

    - name: Set up Python and Django
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start Django server for Lighthouse
      run: |
        python manage.py collectstatic --noinput
        python manage.py migrate
        python manage.py runserver &
        sleep 10
      env:
        DJANGO_SETTINGS_MODULE: portfolio_site.settings.development
        SECRET_KEY: test-secret-key-for-lighthouse

    - name: Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-results
        path: .lighthouseci/
        retention-days: 30