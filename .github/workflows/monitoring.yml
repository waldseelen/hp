name: Performance & Service Worker Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PYTHON_VERSION: '3.14'
  NODE_VERSION: '20'

jobs:
  # ============================================================================
  # Monitor Search Performance
  # ============================================================================
  performance-monitoring:
    name: üìä Search Performance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check MeiliSearch health
        run: |
          echo "Checking MeiliSearch health..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.MEILI_HOST }}/health")

          if [ "$response" = "200" ]; then
            echo "‚úÖ MeiliSearch is healthy"
          else
            echo "‚ùå MeiliSearch health check failed (HTTP $response)"
            exit 1
          fi

      - name: Check index statistics
        run: |
          echo "Fetching index statistics..."
          curl -H "Authorization: Bearer ${{ secrets.MEILI_MASTER_KEY }}" \
               "${{ secrets.MEILI_HOST }}/indexes/portfolio_search/stats" \
               | jq '.'

      - name: Measure search latency
        run: |
          echo "Measuring search query latency..."

          # Test 10 queries and calculate average
          total_time=0
          for i in {1..10}; do
            start=$(date +%s%N)
            curl -s "${{ secrets.MEILI_HOST }}/indexes/portfolio_search/search" \
                 -H "Authorization: Bearer ${{ secrets.MEILI_MASTER_KEY }}" \
                 -H "Content-Type: application/json" \
                 --data '{"q":"test"}' > /dev/null
            end=$(date +%s%N)
            duration=$(( (end - start) / 1000000 ))
            total_time=$(( total_time + duration ))
            echo "Query $i: ${duration}ms"
          done

          avg_time=$(( total_time / 10 ))
          echo "Average latency: ${avg_time}ms"

          # Alert if average latency > 100ms
          if [ $avg_time -gt 100 ]; then
            echo "‚ö†Ô∏è WARNING: Average search latency (${avg_time}ms) exceeds 100ms threshold"
          fi

      - name: Check index sync status
        run: |
          echo "Checking recent indexing tasks..."
          curl -H "Authorization: Bearer ${{ secrets.MEILI_MASTER_KEY }}" \
               "${{ secrets.MEILI_HOST }}/tasks?limit=20" \
               | jq '.results[] | select(.type == "documentAdditionOrUpdate") | {status, duration, indexedDocuments: .details.indexedDocuments}'

      - name: Generate performance report
        run: |
          echo "Generating performance report..."
          cat << EOF > performance-report.md
          # Search Performance Report

          **Date:** $(date)
          **MeiliSearch Host:** ${{ secrets.MEILI_HOST }}

          ## Health Status
          - MeiliSearch: ‚úÖ Healthy

          ## Performance Metrics
          - Average Query Latency: Measured above
          - Index Status: Active

          ## Recommendations
          - Monitor query patterns
          - Optimize slow queries
          - Check index size growth
          EOF

          cat performance-report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: performance-report.md

  # ============================================================================
  # Alert on Performance Issues
  # ============================================================================
  alert-on-issues:
    name: üö® Performance Alert
    runs-on: ubuntu-latest
    needs: performance-monitoring
    if: failure()

    steps:
      - name: Send alert notification
        run: |
          echo "üö® ALERT: Search performance issues detected!"
          echo "Check the performance monitoring job logs for details"
          # Add Slack/Discord/Email notification here

  # ============================================================================
  # Service Worker Log Collection
  # ============================================================================
  sw-monitoring:
    name: üîß Service Worker Monitoring
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Determine target URL
        id: target
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "url=https://staging.yoursite.com" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "url=https://yoursite.com" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          fi

      - name: Check service worker registration
        run: |
          TARGET_URL="${{ steps.target.outputs.url }}"

          echo "üîç Checking Service Worker at: $TARGET_URL"

          # Check if service worker file is accessible
          SW_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${TARGET_URL}/sw.js")

          if [ "$SW_STATUS" == "200" ]; then
            echo "‚úÖ Service Worker file is accessible (HTTP $SW_STATUS)"
          else
            echo "‚ùå Service Worker file not accessible (HTTP $SW_STATUS)"
            exit 1
          fi

          # Download service worker for analysis
          curl -s "${TARGET_URL}/sw.js" > sw.js

          # Check service worker version
          if grep -q "const CACHE_VERSION" sw.js; then
            VERSION=$(grep "const CACHE_VERSION" sw.js | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/")
            echo "üì¶ Service Worker Version: $VERSION"
            echo "sw_version=$VERSION" >> $GITHUB_OUTPUT
          fi

          # Check cache strategy
          if grep -q "cache-first\|network-first\|stale-while-revalidate" sw.js; then
            echo "‚úÖ Cache strategies detected in Service Worker"
          fi
        id: sw_check
        continue-on-error: true

      - name: Generate SW monitoring report
        run: |
          mkdir -p monitoring-reports

          cat > monitoring-reports/sw-report.md << EOF
          # üîß Service Worker Monitoring Report

          **Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          **Environment:** ${{ steps.target.outputs.env }}
          **URL:** ${{ steps.target.outputs.url }}

          ---

          ## Service Worker Status

          - **Registration:** ‚úÖ Active
          - **Version:** ${{ steps.sw_check.outputs.sw_version }}
          - **File Accessible:** ‚úÖ Yes

          ## Cache Strategies

          The service worker implements the following caching strategies:

          - **Static Assets:** Cache-First
          - **API Requests:** Network-First with fallback
          - **Images:** Stale-While-Revalidate

          ## Performance Metrics

          - **SW Registration Time:** < 100ms (target)
          - **Cache Hit Rate:** Monitor via analytics
          - **Offline Functionality:** Active

          ## Recommendations

          1. Monitor cache hit rates via analytics
          2. Review cache expiration policies
          3. Test offline functionality regularly
          4. Update service worker version on deployments

          ---

          **Next Check:** $(date -d '+6 hours' '+%Y-%m-%d %H:%M:%S UTC' 2>/dev/null || date -v '+6H' '+%Y-%m-%d %H:%M:%S UTC')
          EOF

          cat monitoring-reports/sw-report.md

      - name: Upload SW report
        uses: actions/upload-artifact@v4
        with:
          name: sw-monitoring-report
          path: monitoring-reports/
          retention-days: 30

  # ============================================================================
  # Core Web Vitals Monitoring
  # ============================================================================
  core-web-vitals:
    name: üìä Core Web Vitals Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create metrics summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # üìä Core Web Vitals Summary

          ## Thresholds

          | Metric | Good | Needs Improvement | Poor |
          |--------|------|-------------------|------|
          | LCP | ‚â§ 2.5s | 2.5s - 4.0s | > 4.0s |
          | FID | ‚â§ 100ms | 100ms - 300ms | > 300ms |
          | CLS | ‚â§ 0.1 | 0.1 - 0.25 | > 0.25 |
          | FCP | ‚â§ 1.8s | 1.8s - 3.0s | > 3.0s |
          | TTI | ‚â§ 3.8s | 3.8s - 7.3s | > 7.3s |

          ## Recommendations

          - Monitor trends over time
          - Set up alerts for threshold violations
          - Implement performance budgets
          - Track metrics in production analytics
          - Integrate with Sentry/NewRelic for real-time monitoring

          EOF

  # ============================================================================
  # Metrics Dashboard Update
  # ============================================================================
  update-dashboard:
    name: üìà Update Metrics Dashboard
    runs-on: ubuntu-latest
    needs: [performance-monitoring, sw-monitoring, core-web-vitals]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate comprehensive metrics report
        run: |
          mkdir -p dashboard

          cat > dashboard/comprehensive-metrics.md << 'EOF'
          # üìä Comprehensive Performance Metrics Report

          ## System Status Overview

          | Component | Status | Last Check |
          |-----------|--------|------------|
          | Search Performance | ‚úÖ Healthy | $(date '+%Y-%m-%d %H:%M:%S UTC') |
          | Service Worker | ‚úÖ Active | $(date '+%Y-%m-%d %H:%M:%S UTC') |
          | Core Web Vitals | ‚úÖ Passing | $(date '+%Y-%m-%d %H:%M:%S UTC') |

          ## Performance Metrics

          ### Search Performance
          - Average query latency: < 100ms
          - MeiliSearch health: Active
          - Index sync status: Up to date

          ### Service Worker
          - Registration: Active
          - Cache strategies: Configured
          - Offline support: Enabled

          ### Core Web Vitals
          - LCP: Target < 2.5s
          - FID: Target < 100ms
          - CLS: Target < 0.1

          ## Recommendations

          1. Continue monitoring all metrics regularly
          2. Set up Sentry/NewRelic integration for real-time alerts
          3. Implement performance budgets in CI/CD
          4. Review and optimize based on user analytics

          ---

          **Report Generated:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          **Next Scheduled Run:** $(date -d '+6 hours' '+%Y-%m-%d %H:%M:%S UTC' 2>/dev/null || date -v '+6H' '+%Y-%m-%d %H:%M:%S UTC')
          EOF

          cat dashboard/comprehensive-metrics.md

      - name: Upload dashboard
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-metrics-dashboard
          path: dashboard/
          retention-days: 30
