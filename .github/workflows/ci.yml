name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django pytest-cov pytest-xdist
        pip install black isort flake8 mypy
        pip install bandit safety

    - name: Install Node.js dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" > .env
        echo "DEBUG=True" >> .env
        echo "DATABASE_URL=sqlite:///test_db.sqlite3" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env

    - name: Run Django system checks
      run: python manage.py check --settings=portfolio_site.settings.test

    - name: Run database migrations
      run: python manage.py migrate --settings=portfolio_site.settings.test

    - name: Collect static files
      run: python manage.py collectstatic --noinput --settings=portfolio_site.settings.test

    - name: Build CSS with Tailwind
      run: |
        if [ -f "package.json" ] && grep -q "build:css" package.json; then
          npm run build:css
        else
          echo "Skipping CSS build - script not found"
        fi

    - name: Run Python tests with coverage
      run: |
        if [ -f "pytest.ini" ] || [ -f "setup.cfg" ] || python -c "import pytest" 2>/dev/null; then
          pytest --cov=apps --cov-report=xml --cov-report=term-missing --cov-fail-under=60
        else
          echo "Running Django tests instead of pytest"
          python manage.py test --settings=portfolio_site.settings.test
        fi
      env:
        DJANGO_SETTINGS_MODULE: portfolio_site.settings.test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: hashFiles('coverage.xml') != ''
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt

    - name: Check code formatting with Black
      run: black --check --diff .

    - name: Check import sorting with isort
      run: isort --check-only --diff .

    - name: Lint with flake8
      run: flake8 .

    - name: Type check with mypy
      run: mypy apps/ portfolio_site/ --ignore-missing-imports
      continue-on-error: true

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt

    - name: Run Bandit security checks
      run: bandit -r apps/ portfolio_site/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety vulnerability checks
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  frontend:
    name: Frontend Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint JavaScript
      run: |
        if [ -f "package.json" ] && grep -q "lint:js" package.json; then
          npm run lint:js
        else
          echo "Skipping JS linting - script not found"
        fi
      continue-on-error: true

    - name: Lint CSS
      run: |
        if [ -f "package.json" ] && grep -q "lint:css" package.json; then
          npm run lint:css
        else
          echo "Skipping CSS linting - script not found"
        fi
      continue-on-error: true

    - name: Run JavaScript tests
      run: |
        if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
          npm run test
        else
          echo "Skipping JS tests - script not found"
        fi
      continue-on-error: true

    - name: Build production assets
      run: |
        if [ -f "package.json" ]; then
          if grep -q "build:css" package.json; then npm run build:css; fi
          if grep -q "build:components" package.json; then npm run build:components; fi
          if grep -q "build:all" package.json; then npm run build:all; fi
        else
          echo "Skipping asset build - package.json not found"
        fi

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: [test, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm ci

    - name: Create test environment
      run: |
        echo "SECRET_KEY=test-secret-key-for-lighthouse" > .env
        echo "DEBUG=False" >> .env
        echo "DATABASE_URL=sqlite:///lighthouse_db.sqlite3" >> .env

    - name: Setup Django for Lighthouse
      run: |
        python manage.py migrate --settings=portfolio_site.settings.test
        python manage.py collectstatic --noinput --settings=portfolio_site.settings.test
        if [ -f "package.json" ] && grep -q "build:all" package.json; then
          npm run build:all
        else
          echo "Skipping build:all - script not found"
        fi

    - name: Start Django server
      run: |
        python manage.py runserver 8000 --settings=portfolio_site.settings.test &
        sleep 10
      env:
        DJANGO_SETTINGS_MODULE: portfolio_site.settings.test

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: '.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, frontend]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.test.result }}" == "success" &&
              "${{ needs.code-quality.result }}" == "success" &&
              "${{ needs.security.result }}" == "success" &&
              "${{ needs.frontend.result }}" == "success" ]]; then
          echo "✅ All checks passed!"
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some checks failed"
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          exit 1
        fi

    - name: Update build badges
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Build status: ${{ env.BUILD_STATUS }}"
        # Badges will be updated automatically by GitHub Actions