name: Search Infrastructure Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/main/search_index.py'
      - 'apps/main/views/search_views.py'
      - 'apps/main/signals.py'
      - 'apps/main/management/commands/reindex_search.py'
      - 'tests/unit/test_search_index.py'
      - 'tests/integration/test_search_api.py'
      - 'tests/integration/test_admin_reindex.py'
      - 'requirements.txt'
      - '.github/workflows/search-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/main/search_index.py'
      - 'apps/main/views/search_views.py'
      - 'apps/main/signals.py'
      - 'tests/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.14'
  MEILI_MASTER_KEY: testkey123456789
  MEILI_HOST: http://localhost:7700
  DJANGO_SETTINGS_MODULE: project.settings

jobs:
  # ============================================================================
  # Lint and Code Quality Checks
  # ============================================================================
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt

      - name: Run flake8
        run: |
          flake8 apps/main/search_index.py \
                 apps/main/views/search_views.py \
                 apps/main/signals.py \
                 --max-line-length=120 \
                 --extend-ignore=E203,W503
        continue-on-error: true

      - name: Check code formatting (black)
        run: |
          black --check apps/main/search_index.py \
                        apps/main/views/search_views.py \
                        apps/main/signals.py
        continue-on-error: true

      - name: Check import sorting (isort)
        run: |
          isort --check-only apps/main/search_index.py \
                             apps/main/views/search_views.py \
                             apps/main/signals.py
        continue-on-error: true

  # ============================================================================
  # Unit Tests (No MeiliSearch required)
  # ============================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          pytest tests/unit/test_search_index.py \
                 -v \
                 -m unit \
                 --tb=short \
                 --cov=apps.main.search_index \
                 --cov-report=xml \
                 --cov-report=term-missing \
                 --junitxml=test-results-unit.xml
        env:
          DJANGO_SETTINGS_MODULE: project.settings
          MEILISEARCH_MASTER_KEY: ${{ env.MEILI_MASTER_KEY }}
          MEILISEARCH_HOST: ${{ env.MEILI_HOST }}

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-results-unit.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unit
          name: unit-tests
          fail_ci_if_error: false

  # ============================================================================
  # Integration Tests (Requires MeiliSearch)
  # ============================================================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      meilisearch:
        image: getmeili/meilisearch:v1.5
        env:
          MEILI_MASTER_KEY: testkey123456789
          MEILI_ENV: development
          MEILI_NO_ANALYTICS: true
        ports:
          - 7700:7700
        options: >-
          --health-cmd "curl -f http://localhost:7700/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MeiliSearch
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:7700/health; do sleep 2; done'
          echo "MeiliSearch is ready!"

      - name: Configure search index
        run: |
          python manage.py migrate --noinput
          python manage.py reindex_search --configure-only
        env:
          DJANGO_SETTINGS_MODULE: project.settings
          MEILISEARCH_MASTER_KEY: ${{ env.MEILI_MASTER_KEY }}
          MEILISEARCH_HOST: ${{ env.MEILI_HOST }}
          SECRET_KEY: test-secret-key-for-ci

      - name: Run integration tests
        run: |
          pytest tests/integration/test_search_api.py \
                 tests/integration/test_admin_reindex.py \
                 -v \
                 -m integration \
                 --tb=short \
                 --cov=apps.main.views.search_views \
                 --cov=apps.main.signals \
                 --cov-append \
                 --cov-report=xml \
                 --cov-report=term-missing \
                 --junitxml=test-results-integration.xml
        env:
          DJANGO_SETTINGS_MODULE: project.settings
          MEILISEARCH_MASTER_KEY: ${{ env.MEILI_MASTER_KEY }}
          MEILISEARCH_HOST: ${{ env.MEILI_HOST }}
          SECRET_KEY: test-secret-key-for-ci

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results-integration.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: integration
          name: integration-tests
          fail_ci_if_error: false

  # ============================================================================
  # Security Tests (XSS Prevention)
  # ============================================================================
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run security tests (XSS, sanitization)
        run: |
          pytest tests/unit/test_search_index.py::TestXSSPrevention \
                 tests/unit/test_search_index.py::TestContentSanitization \
                 -v \
                 -m security \
                 --tb=short \
                 --junitxml=test-results-security.xml
        env:
          DJANGO_SETTINGS_MODULE: project.settings
          MEILISEARCH_MASTER_KEY: ${{ env.MEILI_MASTER_KEY }}

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: test-results-security.xml

  # ============================================================================
  # Performance Tests
  # ============================================================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests

    services:
      meilisearch:
        image: getmeili/meilisearch:v1.5
        env:
          MEILI_MASTER_KEY: testkey123456789
          MEILI_ENV: development
        ports:
          - 7700:7700
        options: >-
          --health-cmd "curl -f http://localhost:7700/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MeiliSearch
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:7700/health; do sleep 2; done'

      - name: Run performance benchmarks
        run: |
          pytest tests/integration/test_admin_reindex.py::TestIndexingPerformance \
                 -v \
                 -m performance \
                 --tb=short \
                 --junitxml=test-results-performance.xml
        env:
          DJANGO_SETTINGS_MODULE: project.settings
          MEILISEARCH_MASTER_KEY: ${{ env.MEILI_MASTER_KEY }}
          MEILISEARCH_HOST: ${{ env.MEILI_HOST }}
          SECRET_KEY: test-secret-key-for-ci

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-results-performance.xml

  # ============================================================================
  # Test Summary Report
  # ============================================================================
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, performance-tests]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Display test summary
        run: |
          echo "==================================================="
          echo "           SEARCH TESTS SUMMARY REPORT            "
          echo "==================================================="
          echo ""
          echo "✅ Unit Tests: Completed"
          echo "✅ Integration Tests: Completed"
          echo "✅ Security Tests: Completed"
          echo "✅ Performance Tests: Completed"
          echo ""
          echo "Test results artifacts uploaded successfully!"
          echo "==================================================="

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: test-results/**/*.xml
          check_name: Search Tests Results
          comment_title: Search Infrastructure Test Results

  # ============================================================================
  # Build Status Badge
  # ============================================================================
  badge:
    name: 🏅 Update Status Badge
    runs-on: ubuntu-latest
    needs: test-summary
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Create status badge
        run: |
          echo "Test Status: ${{ needs.test-summary.result }}" > badge.txt

      - name: Upload badge
        uses: actions/upload-artifact@v4
        with:
          name: test-status-badge
          path: badge.txt
