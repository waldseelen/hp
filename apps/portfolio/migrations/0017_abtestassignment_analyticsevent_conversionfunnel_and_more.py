# Generated by Django 5.1 on 2025-09-20 11:40

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0016_admin_account_locked_until_admin_backup_codes_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ABTestAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(db_index=True, help_text='Name of the A/B test', max_length=100)),
                ('anonymous_id', models.CharField(db_index=True, help_text='Anonymous session identifier', max_length=50)),
                ('variant', models.CharField(help_text='Assigned variant (A, B, C, etc.)', max_length=50)),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the variant was assigned')),
                ('assignment_method', models.CharField(default='hash', help_text='Method used for assignment (hash, random)', max_length=20)),
                ('has_converted', models.BooleanField(default=False, help_text='Whether this user has converted')),
                ('converted_at', models.DateTimeField(blank=True, help_text='When the conversion occurred', null=True)),
                ('conversion_type', models.CharField(blank=True, help_text='Type of conversion', max_length=50)),
                ('conversion_value', models.FloatField(blank=True, help_text='Value of the conversion', null=True)),
                ('test_data', models.JSONField(blank=True, default=dict, help_text='Additional test-specific data')),
                ('gdpr_consent', models.BooleanField(default=False, help_text='GDPR consent for A/B testing')),
                ('expires_at', models.DateTimeField(help_text='When this test data expires')),
            ],
            options={
                'verbose_name': 'A/B Test Assignment',
                'verbose_name_plural': 'A/B Test Assignments',
                'ordering': ['-assigned_at'],
                'indexes': [models.Index(fields=['test_name', 'variant'], name='main_abtest_test_na_8c8557_idx'), models.Index(fields=['anonymous_id', 'test_name'], name='main_abtest_anonymo_46f4ad_idx'), models.Index(fields=['has_converted', 'test_name'], name='main_abtest_has_con_5590e4_idx'), models.Index(fields=['expires_at'], name='main_abtest_expires_2494d3_idx')],
                'unique_together': {('test_name', 'anonymous_id')},
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('page_view', 'Page View'), ('custom_event', 'Custom Event'), ('conversion', 'Conversion'), ('ab_test_assignment', 'A/B Test Assignment'), ('ab_test_conversion', 'A/B Test Conversion'), ('funnel_step', 'Funnel Step'), ('journey_step', 'Journey Step')], help_text='Type of analytics event', max_length=20)),
                ('event_name', models.CharField(blank=True, help_text='Custom event name', max_length=100)),
                ('anonymous_id', models.CharField(db_index=True, help_text='Anonymous session identifier (privacy-compliant)', max_length=50)),
                ('page_path', models.CharField(blank=True, help_text='Page path (sanitized)', max_length=500)),
                ('page_title', models.CharField(blank=True, help_text='Page title', max_length=200)),
                ('referrer_type', models.CharField(blank=True, help_text='Referrer type (search, social, external)', max_length=20)),
                ('device_type', models.CharField(blank=True, help_text='Device type (mobile, desktop, tablet)', max_length=20)),
                ('browser_family', models.CharField(blank=True, help_text='Browser family (Chrome, Firefox, Safari)', max_length=50)),
                ('os_family', models.CharField(blank=True, help_text='Operating system family', max_length=50)),
                ('event_data', models.JSONField(blank=True, default=dict, help_text='Additional event data (sanitized)')),
                ('gdpr_consent', models.BooleanField(default=False, help_text='Whether user has given GDPR consent for analytics')),
                ('ip_hash', models.CharField(blank=True, help_text='Hashed IP address (for geographic insights only)', max_length=64)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When the event occurred')),
                ('session_start', models.DateTimeField(blank=True, help_text='When the session started', null=True)),
                ('expires_at', models.DateTimeField(help_text='When this data should be automatically deleted')),
            ],
            options={
                'verbose_name': 'Analytics Event',
                'verbose_name_plural': 'Analytics Events',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp', 'event_type'], name='main_analyt_timesta_5e22f6_idx'), models.Index(fields=['anonymous_id', 'timestamp'], name='main_analyt_anonymo_5d8742_idx'), models.Index(fields=['event_type', 'event_name'], name='main_analyt_event_t_c98e2b_idx'), models.Index(fields=['page_path', 'timestamp'], name='main_analyt_page_pa_1acbbf_idx'), models.Index(fields=['expires_at'], name='main_analyt_expires_3d3e21_idx')],
            },
        ),
        migrations.CreateModel(
            name='ConversionFunnel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('funnel_id', models.CharField(help_text='Unique funnel identifier', max_length=100, unique=True)),
                ('anonymous_id', models.CharField(db_index=True, help_text='Anonymous session identifier', max_length=50)),
                ('funnel_name', models.CharField(db_index=True, help_text='Name of the funnel (signup, purchase, etc.)', max_length=50)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the funnel was entered')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last activity in this funnel')),
                ('current_step', models.CharField(blank=True, help_text='Current step in the funnel', max_length=100)),
                ('current_step_order', models.IntegerField(default=1, help_text='Order of current step')),
                ('is_completed', models.BooleanField(default=False, help_text='Whether the funnel was completed')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the funnel was completed', null=True)),
                ('time_to_complete', models.IntegerField(blank=True, help_text='Time to complete in seconds', null=True)),
                ('steps_completed', models.JSONField(default=list, help_text='List of completed steps with timing')),
                ('drop_off_step', models.CharField(blank=True, help_text='Step where user dropped off', max_length=100)),
                ('gdpr_consent', models.BooleanField(default=False, help_text='GDPR consent for funnel tracking')),
                ('expires_at', models.DateTimeField(help_text='When this funnel data expires')),
            ],
            options={
                'verbose_name': 'Conversion Funnel',
                'verbose_name_plural': 'Conversion Funnels',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['funnel_name', 'started_at'], name='main_conver_funnel__6f4a48_idx'), models.Index(fields=['anonymous_id', 'funnel_name'], name='main_conver_anonymo_e425b6_idx'), models.Index(fields=['is_completed', 'funnel_name'], name='main_conver_is_comp_637d82_idx'), models.Index(fields=['expires_at'], name='main_conver_expires_70c942_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserJourney',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('journey_id', models.CharField(help_text='Unique journey identifier', max_length=100, unique=True)),
                ('anonymous_id', models.CharField(db_index=True, help_text='Anonymous session identifier', max_length=50)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the journey started')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last activity in this journey')),
                ('current_step', models.CharField(blank=True, help_text='Current step in the journey', max_length=100)),
                ('total_steps', models.IntegerField(default=0, help_text='Total number of steps in this journey')),
                ('total_time_spent', models.IntegerField(default=0, help_text='Total time spent in seconds')),
                ('is_completed', models.BooleanField(default=False, help_text='Whether the journey reached completion')),
                ('completion_type', models.CharField(blank=True, help_text='How the journey was completed', max_length=50)),
                ('journey_path', models.JSONField(default=list, help_text='List of steps taken in this journey')),
                ('gdpr_consent', models.BooleanField(default=False, help_text='GDPR consent for journey tracking')),
                ('expires_at', models.DateTimeField(help_text='When this journey data expires')),
            ],
            options={
                'verbose_name': 'User Journey',
                'verbose_name_plural': 'User Journeys',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['anonymous_id', 'started_at'], name='main_userjo_anonymo_4bdec9_idx'), models.Index(fields=['is_completed', 'started_at'], name='main_userjo_is_comp_33310f_idx'), models.Index(fields=['current_step'], name='main_userjo_current_af015f_idx'), models.Index(fields=['expires_at'], name='main_userjo_expires_772461_idx')],
            },
        ),
    ]
