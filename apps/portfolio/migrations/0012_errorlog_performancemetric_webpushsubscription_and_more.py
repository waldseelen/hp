# Generated by Django 5.1 on 2025-09-08 01:53

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0011_remove_skill_certificates_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(choices=[('javascript', 'JavaScript Error'), ('python', 'Python Exception'), ('http', 'HTTP Error'), ('database', 'Database Error'), ('validation', 'Validation Error'), ('permission', 'Permission Error'), ('network', 'Network Error'), ('performance', 'Performance Issue'), ('security', 'Security Issue'), ('other', 'Other')], default='other', help_text='Category of error', max_length=20)),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='error', help_text='Error severity level', max_length=10)),
                ('message', models.TextField(help_text='Error message')),
                ('stack_trace', models.TextField(blank=True, help_text='Full stack trace or error details')),
                ('url', models.URLField(blank=True, help_text='URL where error occurred', max_length=500)),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent string')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Client IP address', null=True)),
                ('file_name', models.CharField(blank=True, help_text='Source file where error occurred', max_length=255)),
                ('line_number', models.IntegerField(blank=True, help_text='Line number where error occurred', null=True)),
                ('function_name', models.CharField(blank=True, help_text='Function/method where error occurred', max_length=100)),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional error context as JSON')),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether this error has been resolved')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When error was marked as resolved', null=True)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about error resolution')),
                ('occurrence_count', models.IntegerField(default=1, help_text='Number of times this error occurred')),
                ('first_occurred', models.DateTimeField(default=django.utils.timezone.now, help_text='When this error first occurred')),
                ('last_occurred', models.DateTimeField(default=django.utils.timezone.now, help_text='When this error last occurred')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Error Log',
                'verbose_name_plural': 'Error Logs',
                'ordering': ['-last_occurred', '-created_at'],
                'indexes': [models.Index(fields=['error_type', 'level', 'last_occurred'], name='main_errorl_error_t_e476ea_idx'), models.Index(fields=['is_resolved', 'last_occurred'], name='main_errorl_is_reso_fd570c_idx'), models.Index(fields=['url', 'last_occurred'], name='main_errorl_url_cfb848_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('lcp', 'Largest Contentful Paint'), ('fid', 'First Input Delay'), ('cls', 'Cumulative Layout Shift'), ('inp', 'Interaction to Next Paint'), ('ttfb', 'Time to First Byte'), ('fcp', 'First Contentful Paint'), ('navigation', 'Navigation Timing'), ('resource', 'Resource Loading'), ('memory', 'Memory Usage'), ('custom', 'Custom Metric')], help_text='Type of performance metric', max_length=20)),
                ('value', models.FloatField(help_text='Metric value in appropriate unit (ms, ratio, bytes, etc.)')),
                ('url', models.URLField(help_text='Page URL where metric was collected', max_length=500)),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent string')),
                ('device_type', models.CharField(choices=[('mobile', 'Mobile'), ('desktop', 'Desktop'), ('tablet', 'Tablet')], default='desktop', help_text='Device type', max_length=10)),
                ('connection_type', models.CharField(choices=[('4g', '4G'), ('3g', '3G'), ('2g', '2G'), ('slow-2g', 'Slow 2G'), ('wifi', 'WiFi'), ('ethernet', 'Ethernet'), ('unknown', 'Unknown')], default='unknown', help_text='Network connection type', max_length=10)),
                ('screen_resolution', models.CharField(blank=True, help_text='Screen resolution (e.g., 1920x1080)', max_length=20)),
                ('viewport_size', models.CharField(blank=True, help_text='Viewport size (e.g., 1200x800)', max_length=20)),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional metric data as JSON')),
                ('session_id', models.CharField(blank=True, help_text='Browser session identifier', max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Client IP address', null=True)),
                ('country_code', models.CharField(blank=True, help_text='Country code (ISO 3166-1 alpha-2)', max_length=2)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the metric was collected')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Performance Metric',
                'verbose_name_plural': 'Performance Metrics',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['metric_type', 'timestamp'], name='main_perfor_metric__1f6b3a_idx'), models.Index(fields=['url', 'timestamp'], name='main_perfor_url_cfa1c5_idx'), models.Index(fields=['device_type', 'timestamp'], name='main_perfor_device__1244ef_idx'), models.Index(fields=['session_id'], name='main_perfor_session_4cdf43_idx')],
            },
        ),
        migrations.CreateModel(
            name='WebPushSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.URLField(help_text='Push service endpoint URL', unique=True)),
                ('p256dh', models.TextField(help_text='P-256 ECDH public key (base64 encoded)')),
                ('auth', models.TextField(help_text='Authentication secret (base64 encoded)')),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent string')),
                ('browser', models.CharField(blank=True, help_text='Browser name (Chrome, Firefox, etc.)', max_length=50)),
                ('platform', models.CharField(blank=True, help_text='Operating system/platform', max_length=50)),
                ('enabled', models.BooleanField(default=True, help_text='Whether notifications are enabled for this subscription')),
                ('topics', models.JSONField(blank=True, default=list, help_text='List of subscribed notification topics')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address when subscription was created', null=True)),
                ('country_code', models.CharField(blank=True, help_text='Country code (ISO 3166-1 alpha-2)', max_length=2)),
                ('total_sent', models.IntegerField(default=0, help_text='Total notifications sent to this subscription')),
                ('total_delivered', models.IntegerField(default=0, help_text='Total notifications successfully delivered')),
                ('total_failed', models.IntegerField(default=0, help_text='Total failed delivery attempts')),
                ('last_success', models.DateTimeField(blank=True, help_text='Last successful notification delivery', null=True)),
                ('last_failure', models.DateTimeField(blank=True, help_text='Last failed notification delivery', null=True)),
                ('failure_reason', models.CharField(blank=True, help_text='Reason for last failure', max_length=200)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Web Push Subscription',
                'verbose_name_plural': 'Web Push Subscriptions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['enabled', 'created_at'], name='main_webpus_enabled_2ebac6_idx'), models.Index(fields=['browser'], name='main_webpus_browser_e82578_idx'), models.Index(fields=['last_success'], name='main_webpus_last_su_47ce12_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Notification title', max_length=200)),
                ('body', models.TextField(help_text='Notification body text')),
                ('icon', models.URLField(blank=True, help_text='Notification icon URL')),
                ('image', models.URLField(blank=True, help_text='Notification image URL')),
                ('badge', models.URLField(blank=True, help_text='Notification badge URL')),
                ('notification_type', models.CharField(choices=[('blog_post', 'New Blog Post'), ('project_update', 'Project Update'), ('system_update', 'System Update'), ('newsletter', 'Newsletter'), ('promotion', 'Promotion'), ('reminder', 'Reminder'), ('alert', 'Alert'), ('custom', 'Custom')], default='custom', help_text='Type of notification', max_length=20)),
                ('tag', models.CharField(blank=True, help_text='Notification tag for grouping', max_length=100)),
                ('actions', models.JSONField(blank=True, default=list, help_text='List of action buttons for the notification')),
                ('url', models.URLField(blank=True, help_text='URL to open when notification is clicked')),
                ('topics', models.JSONField(blank=True, default=list, help_text='Target topics for broadcast notifications')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('expired', 'Expired')], default='pending', help_text='Notification delivery status', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, help_text='When notification was sent', null=True)),
                ('delivered_at', models.DateTimeField(blank=True, help_text='When notification was delivered', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if delivery failed')),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional notification data')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription', models.ForeignKey(blank=True, help_text='Specific subscription (if targeted)', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.webpushsubscription')),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'created_at'], name='main_notifi_status_bfa426_idx'), models.Index(fields=['notification_type', 'created_at'], name='main_notifi_notific_eeeb52_idx'), models.Index(fields=['subscription', 'status'], name='main_notifi_subscri_e7c7f7_idx')],
            },
        ),
    ]
