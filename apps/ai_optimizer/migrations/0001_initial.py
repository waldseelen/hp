# Generated by Django 5.1 on 2025-09-08 14:33

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="AIOptimizerSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=False, help_text="Enable AI optimization features"
                    ),
                ),
                (
                    "auto_optimization",
                    models.BooleanField(
                        default=False, help_text="Auto-apply low-risk optimizations"
                    ),
                ),
                (
                    "min_confidence_threshold",
                    models.FloatField(
                        default=0.7,
                        help_text="Minimum confidence score for suggestions",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "max_sessions_per_hour",
                    models.IntegerField(
                        default=10, help_text="Rate limit for optimization sessions"
                    ),
                ),
                (
                    "cache_timeout",
                    models.IntegerField(
                        default=3600, help_text="Cache timeout in seconds"
                    ),
                ),
                ("image_analysis_enabled", models.BooleanField(default=True)),
                ("content_analysis_enabled", models.BooleanField(default=True)),
                ("performance_prediction_enabled", models.BooleanField(default=True)),
                ("accessibility_analysis_enabled", models.BooleanField(default=True)),
                (
                    "external_apis",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="External API configurations",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "AI Optimizer Settings",
                "verbose_name_plural": "AI Optimizer Settings",
            },
        ),
        migrations.CreateModel(
            name="OptimizationSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_id", models.UUIDField(editable=False, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("optimization_type", models.CharField(max_length=50)),
                ("target_url", models.URLField(blank=True)),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                ("started_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("config", models.JSONField(blank=True, default=dict)),
                ("results", models.JSONField(blank=True, default=dict)),
                ("error_message", models.TextField(blank=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="OptimizationResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("category", models.CharField(max_length=50)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("suggested", "Suggested"),
                            ("approved", "Approved"),
                            ("implemented", "Implemented"),
                            ("rejected", "Rejected"),
                        ],
                        default="suggested",
                        max_length=20,
                    ),
                ),
                (
                    "impact_score",
                    models.FloatField(
                        help_text="Expected impact score (0.0 - 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        help_text="AI confidence in this recommendation (0.0 - 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("implementation_notes", models.TextField(blank=True)),
                ("before_metrics", models.JSONField(blank=True, default=dict)),
                ("after_metrics", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="optimization_results",
                        to="ai_optimizer.optimizationsession",
                    ),
                ),
            ],
            options={
                "ordering": ["-impact_score", "-confidence_score"],
            },
        ),
        migrations.CreateModel(
            name="OptimizationMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("lcp", "Largest Contentful Paint"),
                            ("fid", "First Input Delay"),
                            ("cls", "Cumulative Layout Shift"),
                            ("fcp", "First Contentful Paint"),
                            ("ttfb", "Time to First Byte"),
                            ("seo_score", "SEO Score"),
                            ("accessibility_score", "Accessibility Score"),
                            ("performance_score", "Performance Score"),
                            ("image_size", "Image Size"),
                            ("page_size", "Page Size"),
                        ],
                        max_length=50,
                    ),
                ),
                ("before_value", models.FloatField(blank=True, null=True)),
                ("after_value", models.FloatField(blank=True, null=True)),
                (
                    "improvement_percent",
                    models.FloatField(
                        blank=True,
                        help_text="Calculated improvement percentage",
                        null=True,
                    ),
                ),
                (
                    "measured_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "optimization_result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="ai_optimizer.optimizationresult",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["metric_type", "measured_at"],
                        name="ai_optimize_metric__fb9686_idx",
                    )
                ],
                "unique_together": {("optimization_result", "metric_type")},
            },
        ),
        migrations.AddIndex(
            model_name="optimizationsession",
            index=models.Index(
                fields=["status", "optimization_type"],
                name="ai_optimize_status_9bd154_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationsession",
            index=models.Index(
                fields=["started_at"], name="ai_optimize_started_47266d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationresult",
            index=models.Index(
                fields=["session", "category"], name="ai_optimize_session_dbe6b9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationresult",
            index=models.Index(
                fields=["priority", "status"], name="ai_optimize_priorit_39ade7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationresult",
            index=models.Index(
                fields=["impact_score"], name="ai_optimize_impact__ce994a_idx"
            ),
        ),
    ]
