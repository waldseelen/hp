# DOCKER-COMPOSE.PROD.YML - Production Ortamı Container Konfigürasyonu
# ===============================================================================
#
# Bu dosya Django portfolio projesinin production ortamında multi-container
# deployment'ı için gerekli tüm servisleri ve konfigürasyonları tanımlar.
# PostgreSQL, Redis, Django ve Nginx servislerini orchestrate eder.
#
# SERVİSLER:
# - PostgreSQL: Ana veritabanı (persistent data storage)
# - Redis: Cache ve session storage
# - Django Web: Ana uygulama servisi (Gunicorn ile)
# - Nginx: Reverse proxy ve static file serving
# - Backup: Otomatik veritabanı yedekleme (opsiyonel)
#
# NETWORK YÖNETİMİ:
# - portfolio_network_prod: İzole container ağı
# - Service discovery ve internal communication
# - Load balancing ve health check desteği
#
# VOLUME YÖNETİMİ:
# - postgres_data_prod: Veritabanı persistent storage
# - redis_data_prod: Redis data persistence
# - static_files_prod: Django static files
# - media_files_prod: Kullanıcı yükleme dosyaları
#
# GÜVENLİK ÖZELLİKLERİ:
# - Environment variable validation (required secrets)
# - Health check monitoring
# - Resource limits ve reservations
# - SSL/TLS termination (Nginx)
#
# KULLANIM:
# docker-compose -f docker-compose.prod.yml up -d
# docker-compose -f docker-compose.prod.yml --profile backup up backup
#
# ENVIRONMENT VARIABLES (.env dosyası gereklidir):
# - SECRET_KEY, POSTGRES_PASSWORD, REDIS_PASSWORD
# - ALLOWED_HOSTS, DATABASE_URL, EMAIL_* değişkenleri
# ===============================================================================

# =============================================================================
# Docker Compose for Django Portfolio Site - Production Environment
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # PostgreSQL Database Service
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: portfolio_db_prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_prod}
      POSTGRES_USER: ${POSTGRES_USER:-portfolio_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - portfolio_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-portfolio_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # =============================================================================
  # Redis Cache Service
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: portfolio_redis_prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?Redis password required}
    volumes:
      - redis_data_prod:/data
    networks:
      - portfolio_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # =============================================================================
  # Django Web Application Service
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        APP_USER: django
        APP_UID: 1000
        APP_GID: 1000
    container_name: portfolio_web_prod
    restart: always
    environment:
      # Django Settings
      DJANGO_SETTINGS_MODULE: portfolio_site.portfolio_site.settings.production
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY:?Secret key required}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:?Allowed hosts required}
      
      # Database Configuration
      DATABASE_URL: postgres://${POSTGRES_USER:-portfolio_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-portfolio_prod}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Gunicorn Configuration
      PORT: 8000
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-4}
      GUNICORN_WORKER_CLASS: ${GUNICORN_WORKER_CLASS:-sync}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-30}
      GUNICORN_MAX_REQUESTS: ${GUNICORN_MAX_REQUESTS:-1000}
      
      # Email Configuration
      EMAIL_BACKEND: ${EMAIL_BACKEND:-django.core.mail.backends.smtp.EmailBackend}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      
      # Security
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-True}
      SECURE_HSTS_SECONDS: ${SECURE_HSTS_SECONDS:-31536000}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      
      # Media and Static Files
      MEDIA_URL: /media/
      STATIC_URL: /static/
    volumes:
      # Persistent media files
      - media_files_prod:/app/media
      # Static files
      - static_files_prod:/app/staticfiles
      # Logs
      - ./logs:/app/logs
    networks:
      - portfolio_network_prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "health_check.py", "--quick"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # =============================================================================
  # Nginx Reverse Proxy
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: portfolio_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf:ro
      - static_files_prod:/app/staticfiles:ro
      - media_files_prod:/app/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - portfolio_network_prod
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # =============================================================================
  # Backup Service (Optional)
  # =============================================================================
  backup:
    image: postgres:15-alpine
    container_name: portfolio_backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data:ro
      - ./backups:/backups
    networks:
      - portfolio_network_prod
    depends_on:
      - postgres
    command: |
      sh -c "
        while true; do
          pg_dump -h postgres -U ${POSTGRES_USER:-portfolio_user} -d ${POSTGRES_DB:-portfolio_prod} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    profiles:
      - backup

# =============================================================================
# Network Configuration
# =============================================================================
networks:
  portfolio_network_prod:
    driver: bridge
    name: portfolio_network_prod

# =============================================================================
# Volume Configuration
# =============================================================================
volumes:
  postgres_data_prod:
    name: portfolio_postgres_data_prod
    driver: local
  
  redis_data_prod:
    name: portfolio_redis_data_prod
    driver: local
  
  static_files_prod:
    name: portfolio_static_files_prod
    driver: local
  
  media_files_prod:
    name: portfolio_media_files_prod
    driver: local